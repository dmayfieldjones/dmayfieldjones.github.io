{"version":3,"file":"static/chunks/3731.8f776eb927af8479.js","mappings":"uRA8IA,MArIyB,cAAQ,aACjC,CAoIe,EApIf,OAAY,OAoImB,EAAC,KApIpB,GAAqB,EACjC,MAAiC,cAAQ,KACzC,MAAuC,cAAQ,GAC/C,MAAkC,cAAQ,KAC1C,MAA8B,cAAQ,GACtC,kCACA,mBACA,EAAyB,iBAAW,QACpC,MAA4B,cAAQ,KA0BpC,MAzBI,eAAS,MAEb,WACA,IACA,OACA,UACA,MACA,YAAuC,OAAa,EACpD,OACA,MACA,OAAgC,uBAAiB,IACjD,aACqB,EACrB,IACA,CACA,CACA,SACA,iBACA,IACA,QACA,CACA,KACA,CACA,EAAS,EACT,CAAK,UACO,UAAK,CAAC,QAAM,EAAI,6CAAgE,UAAK,CAAC,GAAa,EAAI,UAAW,SAAI,CAAC,GAAU,EAAI,sJAA0J,EAAG,UAAK,CAAC,GAAS,EAAI,kCACjU,iBACA,CAAyB,yCAAiD,SAAI,CAAC,GAAQ,EAAI,iCAAqC,EAAG,SAAI,CAAC,GAAQ,EAAI,2BAA+B,GAAI,YAAqB,UAAK,CAAC,UAAS,EAAI,UAAW,SAAI,CAAC,GAAU,EAAI,qFAAyF,EAAG,SAAI,CAAC,GAAS,EAAI,qBAC3W,iBACA,CAAiC,qIACjC,WACA,YACA,oCACA,CAAqC,CACrC,CAAmC,IAAY,SAAI,CAAC,cAAY,EAAI,QAAc,IAAgB,SAAI,CAAC,iBAAe,EAAI,4BAA8B,IAAe,UAAK,QAAU,UAAW,UAAK,QAAU,wCAA8C,EAAG,SAAI,QAAU,sBAA6B,GAAI,QAAY,QAAY,EAAG,UAAK,CAAC,GAAa,EAAI,UAAW,SAAI,CAAC,GAAM,EAAI,wFAC5X,MAA0C,wBAAkB,IAC5D,kBAA8D,iBAAW,mBACzE,EAA4C,gBAAU,IACtD,EAAyC,uBAAiB,IAC1D,aACA,MAEA,YADA,cACA,CACA,SAAsD,UAAkB,GAAG,EAAI,GAAG,EAAS,GAAG,YAAY,eAC1G,gBACA,KACA,UACA,QAAqD,QAAgB,GAAG,EAAI,GAAG,EAAS,GACxF,UACA,CACA,aAAkE,EAAG,0BACrE,+BACA,eACA,aAAsE,EAAG,8CACzE,2BACA,UACA,GAA+D,IAAkB,CACjF,WACA,MACA,OACA,CAA6D,CACJ,CACJ,CACJ,CACjD,CACyC,EACzC,cACA,CACA,MAEA,iBACA,SAA8C,UAAkB,GAAG,EAAI,OAAO,YAAY,eAC1F,KAA8C,UAAkB,GAAG,EAAI,OAAO,YAAY,eAC1F,gBACA,KACA,UACA,QAA6C,QAAgB,KAC7D,UACA,CACA,aAA0D,EAAG,0BAC7D,+BACA,eACA,aAA8D,EAAG,8CACjE,2BACA,SAA0D,IAAQ,CACrB,CACJ,CACzC,CACA,aAA0D,EAAG,2BAC7D,gCACA,SAAsD,IAAQ,CACrB,CACzC,CACiC,EACjC,gBACA,KACA,UACA,QAA6C,QAAgB,KAC7D,UACA,CACA,aAA0D,EAAG,0BAC7D,+BACA,eACA,aAA8D,EAAG,8CACjE,2BACA,SAA0D,IAAQ,CACrB,CACJ,CACzC,CACA,aAA0D,EAAG,2BAC7D,gCACA,SAAsD,IAAQ,CACrB,CACzC,CACiC,EACjC,eACA,cACA,CACA,GACA,CAAyB,mBAAsB,EAAG,SAAI,CAAC,GAAM,EAAI,mDACjE,GACA,CAAyB,mBAAsB,GAAI,GAAI,CACvD,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/LinearPileupDisplay/components/GroupByDialog.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { Dialog, ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui';\nimport { getContainingTrack, getContainingView, getSession, useDebounce, } from '@jbrowse/core/util';\nimport { Button, DialogActions, DialogContent, MenuItem, TextField, Typography, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { getSnapshot } from 'mobx-state-tree';\nimport { getUniqueTags } from '../../shared/getUniqueTags';\nimport { defaultFilterFlags, negFlags, posFlags } from '../../shared/util';\nconst GroupByTagDialog = observer(function (props) {\n    const { model, handleClose } = props;\n    const [tag, setGroupByTag] = useState('');\n    const [tagSet, setGroupByTagSet] = useState();\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState();\n    const validTag = /^[A-Za-z][A-Za-z0-9]$/.exec(tag);\n    const isInvalid = tag.length === 2 && !validTag;\n    const debouncedTag = useDebounce(tag, 1000);\n    const [type, setType] = useState('');\n    useEffect(() => {\n        ;\n        (async () => {\n            try {\n                if (!isInvalid) {\n                    setError(undefined);\n                    setLoading(true);\n                    const vals = await getUniqueTags({\n                        self: model,\n                        tag: debouncedTag,\n                        blocks: getContainingView(model)\n                            .staticBlocks,\n                    });\n                    setGroupByTagSet(vals);\n                }\n            }\n            catch (e) {\n                console.error(e);\n                setError(e);\n            }\n            finally {\n                setLoading(false);\n            }\n        })();\n    }, [model, isInvalid, debouncedTag]);\n    return (_jsxs(Dialog, { open: true, onClose: handleClose, title: \"Group by\", children: [_jsxs(DialogContent, { children: [_jsx(Typography, { children: \"NOTE: this will create new session tracks with the \\\"filter by\\\" set to the values chosen here rather than affecting the current track state\" }), _jsxs(TextField, { fullWidth: true, value: type, onChange: event => {\n                            setType(event.target.value);\n                        }, label: \"Group by...\", select: true, children: [_jsx(MenuItem, { value: \"strand\", children: \"Strand\" }), _jsx(MenuItem, { value: \"tag\", children: \"Tag\" })] }), type === 'tag' ? (_jsxs(_Fragment, { children: [_jsx(Typography, { color: \"textSecondary\", children: \"Examples: HP for haplotype, RG for read group, etc.\" }), _jsx(TextField, { value: tag, onChange: event => {\n                                    setGroupByTag(event.target.value);\n                                }, placeholder: \"Enter tag name\", error: isInvalid, helperText: isInvalid ? 'Not a valid tag' : '', autoComplete: \"off\", \"data-testid\": \"group-tag-name\", slotProps: {\n                                    htmlInput: {\n                                        maxLength: 2,\n                                        'data-testid': 'group-tag-name-input',\n                                    },\n                                } }), error ? (_jsx(ErrorMessage, { error: error })) : loading ? (_jsx(LoadingEllipses, { title: \"Loading unique tags\" })) : tagSet ? (_jsxs(\"div\", { children: [_jsxs(\"div\", { children: [\"Found unique \", tag, \" values:\"] }), _jsx(\"div\", { children: tagSet.join(', ') })] })) : null] })) : null] }), _jsxs(DialogActions, { children: [_jsx(Button, { variant: \"contained\", color: \"primary\", type: \"submit\", disabled: !tagSet, autoFocus: true, onClick: () => {\n                            const track = getContainingTrack(model);\n                            const trackConf = structuredClone(getSnapshot(track.configuration));\n                            const session = getSession(model);\n                            const view = getContainingView(model);\n                            if (type === 'tag') {\n                                if (tagSet) {\n                                    const ret = [...tagSet, undefined];\n                                    for (const tagValue of ret) {\n                                        const t1 = `${trackConf.trackId}-${tag}:${tagValue}-${+Date.now()}-sessionTrack`;\n                                        session.addTrackConf({\n                                            ...trackConf,\n                                            trackId: t1,\n                                            name: `${trackConf.name} (${tag}:${tagValue})`,\n                                            displays: [\n                                                {\n                                                    displayId: `${t1}-LinearAlignmentsDisplay`,\n                                                    type: 'LinearAlignmentsDisplay',\n                                                    pileupDisplay: {\n                                                        displayId: `${t1}-LinearAlignmentsDisplay-LinearPileupDisplay`,\n                                                        type: 'LinearPileupDisplay',\n                                                        filterBy: {\n                                                            ...defaultFilterFlags,\n                                                            tagFilter: {\n                                                                tag,\n                                                                value: tagValue,\n                                                            },\n                                                        },\n                                                    },\n                                                },\n                                            ],\n                                        });\n                                        view.showTrack(t1);\n                                    }\n                                }\n                            }\n                            else if (type === 'strand') {\n                                const t1 = `${trackConf.trackId}-${tag}:(-)-${+Date.now()}-sessionTrack`;\n                                const t2 = `${trackConf.trackId}-${tag}:(+)-${+Date.now()}-sessionTrack`;\n                                session.addTrackConf({\n                                    ...trackConf,\n                                    trackId: t1,\n                                    name: `${trackConf.name} (-)`,\n                                    displays: [\n                                        {\n                                            displayId: `${t1}-LinearAlignmentsDisplay`,\n                                            type: 'LinearAlignmentsDisplay',\n                                            pileupDisplay: {\n                                                displayId: `${t1}-LinearAlignmentsDisplay-LinearPileupDisplay`,\n                                                type: 'LinearPileupDisplay',\n                                                filterBy: negFlags,\n                                            },\n                                        },\n                                        {\n                                            displayId: `${t1}-LinearSNPCoverageDisplay`,\n                                            type: 'LinearSNPCoverageDisplay',\n                                            filterBy: negFlags,\n                                        },\n                                    ],\n                                });\n                                session.addTrackConf({\n                                    ...trackConf,\n                                    trackId: t2,\n                                    name: `${trackConf.name} (+)`,\n                                    displays: [\n                                        {\n                                            displayId: `${t2}-LinearAlignmentsDisplay`,\n                                            type: 'LinearAlignmentsDisplay',\n                                            pileupDisplay: {\n                                                displayId: `${t2}-LinearAlignmentsDisplay-LinearPileupDisplay`,\n                                                type: 'LinearPileupDisplay',\n                                                filterBy: posFlags,\n                                            },\n                                        },\n                                        {\n                                            displayId: `${t2}-LinearSNPCoverageDisplay`,\n                                            type: 'LinearSNPCoverageDisplay',\n                                            filterBy: posFlags,\n                                        },\n                                    ],\n                                });\n                                view.showTrack(t1);\n                                view.showTrack(t2);\n                            }\n                            handleClose();\n                        }, children: \"Submit\" }), _jsx(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                            handleClose();\n                        }, children: \"Cancel\" })] })] }));\n});\nexport default GroupByTagDialog;\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
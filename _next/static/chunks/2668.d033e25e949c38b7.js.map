{"version":3,"file":"static/chunks/2668.d033e25e949c38b7.js","mappings":"4QA8JA,MAtJyB,cAAQ,aACjC,CAqJe,EArJf,OAAY,OAqJmB,EAAC,KArJpB,GAAqB,EACjC,MAAiC,cAAQ,KACzC,MAAuC,cAAQ,GAC/C,MAAkC,cAAQ,KAC1C,MAA8B,cAAQ,GACtC,kCACA,mBACA,EAAyB,iBAAW,QACpC,MAA4B,cAAQ,KA0BpC,MAzBI,eAAS,MAEb,WACA,IACA,OACA,UACA,MACA,YAAuC,OAAa,EACpD,OACA,MACA,OAAgC,uBAAiB,IACjD,aACqB,EACrB,IACA,CACA,CACA,SACA,iBACA,IACA,QACA,CACA,KACA,CACA,EAAS,EACT,CAAK,UACO,eAAmB,CAAC,QAAM,EAAI,mCAAqD,CACvF,eAAmB,CAAC,GAAa,MAC7B,eAAmB,CAAC,GAAU,oJAC9B,eAAmB,CAAC,GAAS,EAAI,kCAC7C,iBACA,CAAiB,+BAAsC,CACvC,eAAmB,CAAC,GAAQ,EAAI,eAAiB,WACjD,eAAmB,CAAC,GAAQ,EAAI,YAAc,SAC9D,UAA8B,eAAmB,CAAC,UAAc,MAChD,eAAmB,CAAC,GAAU,EAAI,sBAAwB,wDAC1D,eAAmB,CAAC,GAAS,EAAI,qBACjD,iBACA,CAAqB,qIACrB,WACA,YACA,oCACA,CAAyB,CACzB,CAAuB,EACvB,EAAyB,eAAmB,CAAC,cAAY,EAAI,QAAc,IAAgB,eAAmB,CAAC,iBAAe,EAAI,4BAA8B,IAAe,eAAmB,YAC9K,eAAmB,YACvC,gBACA,EACA,YACoB,eAAmB,uCAC/B,eAAmB,CAAC,GAAa,MAC7B,eAAmB,CAAC,GAAM,EAAI,wFAC1C,MAAkC,wBAAkB,IACpD,kBAAsD,iBAAW,mBACjE,EAAoC,gBAAU,IAC9C,EAAiC,uBAAiB,IAClD,aACA,MAEA,YADA,cACA,CACA,SAA8C,UAAkB,GAAG,EAAI,GAAG,EAAS,GAAG,YAAY,eAClG,gBACA,KACA,UACA,QAA6C,QAAgB,KAC7D,UACA,CACA,aAA0D,EAAG,0BAC7D,+BACA,eACA,aAA8D,EAAG,8CACjE,2BACA,UACA,GAAuD,IAAkB,CACzE,WACA,MACA,OACA,CAAqD,CACJ,CACJ,CACJ,CACzC,CACiC,EACjC,cACA,CACA,MAEA,iBACA,SAAsC,UAAkB,GAAG,EAAI,OAAO,YAAY,eAClF,KAAsC,UAAkB,GAAG,EAAI,OAAO,YAAY,eAClF,gBACA,KACA,UACA,QAAqC,QAAgB,KACrD,UACA,CACA,aAAkD,EAAG,0BACrD,+BACA,eACA,aAAsD,EAAG,8CACzD,2BACA,SAAkD,IAAQ,CACrB,CACJ,CACjC,CACA,aAAkD,EAAG,2BACrD,gCACA,SAA8C,IAAQ,CACrB,CAEjC,CAAyB,EACzB,gBACA,KACA,UACA,QAAqC,QAAgB,KACrD,UACA,CACA,aAAkD,EAAG,0BACrD,+BACA,eACA,aAAsD,EAAG,8CACzD,2BACA,SAAkD,IAAQ,CACrB,CACJ,CACjC,CACA,aAAkD,EAAG,2BACrD,gCACA,SAA8C,IAAQ,CACrB,CACjC,CACyB,EACzB,eACA,cACA,CACA,GACA,EAAmB,WACP,eAAmB,CAAC,GAAM,EAAI,mDAC1C,GACA,EAAmB,YACnB,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/LinearPileupDisplay/components/GroupByDialog.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Dialog, ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui';\nimport { getContainingTrack, getContainingView, getSession, useDebounce, } from '@jbrowse/core/util';\nimport { Button, DialogActions, DialogContent, MenuItem, TextField, Typography, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { getSnapshot } from 'mobx-state-tree';\nimport { getUniqueTags } from '../../shared/getUniqueTags';\nimport { defaultFilterFlags, negFlags, posFlags } from '../../shared/util';\nconst GroupByTagDialog = observer(function (props) {\n    const { model, handleClose } = props;\n    const [tag, setGroupByTag] = useState('');\n    const [tagSet, setGroupByTagSet] = useState();\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState();\n    const validTag = /^[A-Za-z][A-Za-z0-9]$/.exec(tag);\n    const isInvalid = tag.length === 2 && !validTag;\n    const debouncedTag = useDebounce(tag, 1000);\n    const [type, setType] = useState('');\n    useEffect(() => {\n        ;\n        (async () => {\n            try {\n                if (!isInvalid) {\n                    setError(undefined);\n                    setLoading(true);\n                    const vals = await getUniqueTags({\n                        self: model,\n                        tag: debouncedTag,\n                        blocks: getContainingView(model)\n                            .staticBlocks,\n                    });\n                    setGroupByTagSet(vals);\n                }\n            }\n            catch (e) {\n                console.error(e);\n                setError(e);\n            }\n            finally {\n                setLoading(false);\n            }\n        })();\n    }, [model, isInvalid, debouncedTag]);\n    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: \"Group by\" },\n        React.createElement(DialogContent, null,\n            React.createElement(Typography, null, \"NOTE: this will create new session tracks with the \\\"filter by\\\" set to the values chosen here rather than affecting the current track state\"),\n            React.createElement(TextField, { fullWidth: true, value: type, onChange: event => {\n                    setType(event.target.value);\n                }, label: \"Group by...\", select: true },\n                React.createElement(MenuItem, { value: \"strand\" }, \"Strand\"),\n                React.createElement(MenuItem, { value: \"tag\" }, \"Tag\")),\n            type === 'tag' ? (React.createElement(React.Fragment, null,\n                React.createElement(Typography, { color: \"textSecondary\" }, \"Examples: HP for haplotype, RG for read group, etc.\"),\n                React.createElement(TextField, { value: tag, onChange: event => {\n                        setGroupByTag(event.target.value);\n                    }, placeholder: \"Enter tag name\", error: isInvalid, helperText: isInvalid ? 'Not a valid tag' : '', autoComplete: \"off\", \"data-testid\": \"group-tag-name\", slotProps: {\n                        htmlInput: {\n                            maxLength: 2,\n                            'data-testid': 'group-tag-name-input',\n                        },\n                    } }),\n                error ? (React.createElement(ErrorMessage, { error: error })) : loading ? (React.createElement(LoadingEllipses, { title: \"Loading unique tags\" })) : tagSet ? (React.createElement(\"div\", null,\n                    React.createElement(\"div\", null,\n                        \"Found unique \",\n                        tag,\n                        \" values:\"),\n                    React.createElement(\"div\", null, tagSet.join(', ')))) : null)) : null),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { variant: \"contained\", color: \"primary\", type: \"submit\", disabled: !tagSet, autoFocus: true, onClick: () => {\n                    const track = getContainingTrack(model);\n                    const trackConf = structuredClone(getSnapshot(track.configuration));\n                    const session = getSession(model);\n                    const view = getContainingView(model);\n                    if (type === 'tag') {\n                        if (tagSet) {\n                            const ret = [...tagSet, undefined];\n                            for (const tagValue of ret) {\n                                const t1 = `${trackConf.trackId}-${tag}:${tagValue}-${+Date.now()}-sessionTrack`;\n                                session.addTrackConf({\n                                    ...trackConf,\n                                    trackId: t1,\n                                    name: `${trackConf.name} (-)`,\n                                    displays: [\n                                        {\n                                            displayId: `${t1}-LinearAlignmentsDisplay`,\n                                            type: 'LinearAlignmentsDisplay',\n                                            pileupDisplay: {\n                                                displayId: `${t1}-LinearAlignmentsDisplay-LinearPileupDisplay`,\n                                                type: 'LinearPileupDisplay',\n                                                filterBy: {\n                                                    ...defaultFilterFlags,\n                                                    tagFilter: {\n                                                        tag,\n                                                        value: tagValue,\n                                                    },\n                                                },\n                                            },\n                                        },\n                                    ],\n                                });\n                                view.showTrack(t1);\n                            }\n                        }\n                    }\n                    else if (type === 'strand') {\n                        const t1 = `${trackConf.trackId}-${tag}:(-)-${+Date.now()}-sessionTrack`;\n                        const t2 = `${trackConf.trackId}-${tag}:(+)-${+Date.now()}-sessionTrack`;\n                        session.addTrackConf({\n                            ...trackConf,\n                            trackId: t1,\n                            name: `${trackConf.name} (-)`,\n                            displays: [\n                                {\n                                    displayId: `${t1}-LinearAlignmentsDisplay`,\n                                    type: 'LinearAlignmentsDisplay',\n                                    pileupDisplay: {\n                                        displayId: `${t1}-LinearAlignmentsDisplay-LinearPileupDisplay`,\n                                        type: 'LinearPileupDisplay',\n                                        filterBy: negFlags,\n                                    },\n                                },\n                                {\n                                    displayId: `${t1}-LinearSNPCoverageDisplay`,\n                                    type: 'LinearSNPCoverageDisplay',\n                                    filterBy: negFlags,\n                                },\n                            ],\n                        });\n                        session.addTrackConf({\n                            ...trackConf,\n                            trackId: t2,\n                            name: `${trackConf.name} (+)`,\n                            displays: [\n                                {\n                                    displayId: `${t2}-LinearAlignmentsDisplay`,\n                                    type: 'LinearAlignmentsDisplay',\n                                    pileupDisplay: {\n                                        displayId: `${t2}-LinearAlignmentsDisplay-LinearPileupDisplay`,\n                                        type: 'LinearPileupDisplay',\n                                        filterBy: posFlags,\n                                    },\n                                },\n                                {\n                                    displayId: `${t2}-LinearSNPCoverageDisplay`,\n                                    type: 'LinearSNPCoverageDisplay',\n                                    filterBy: posFlags,\n                                },\n                            ],\n                        });\n                        view.showTrack(t1);\n                        view.showTrack(t2);\n                    }\n                    handleClose();\n                } }, \"Submit\"),\n            React.createElement(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                    handleClose();\n                } }, \"Cancel\"))));\n});\nexport default GroupByTagDialog;\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
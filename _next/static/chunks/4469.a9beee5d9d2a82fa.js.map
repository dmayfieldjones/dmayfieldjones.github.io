{"version":3,"file":"static/chunks/4469.a9beee5d9d2a82fa.js","mappings":"6QAKA,MAA4B,cAAQ,WAAa,mCAAiC,EAClF,+BAA0E,GAAmB,CAC7F,MAAY,SAAI,CAAC,UAAQ,EAAI,SAAU,SAAI,CAAC,iBAAe,GAAI,WAAa,SAAI,IAA0B,OAAS,SAAe,WAAoB,EAAG,CACzJ,CAAC,ECJD,EAAeA,CAAAA,EAAAA,SAAAA,CAAAA,CAAaA,CAAC,CAAaC,EAAAA,EAAAA,GAAAA,CAAIA,CAAC,CAAP,MAAe,CACrDC,EAAG,+HACL,GAAI,YAAY,EAAC,oCCDjB,MAA6B,cAAQ,iCAAiC,uCAA2D,EACjI,WAMA,MALI,eAAS,MACb,GACA,IAEA,CAAK,UACO,SAAI,SAAW,8BAAiD,SAAI,CAAC,GAAS,EAAI,6DAA+F,UAAK,CAAC,UAAS,EAAI,8BAA6D,SAAI,CAAC,GAAU,EAAI,8DAAkF,SAAI,CAAC,EAAa,EAAI,EAAG,GAAP,IAAO,CAAY,2CACvZ,qCACA,CAAa,sCAAiE,SAAI,CAAC,GAAQ,EAAI,4CAAkD,UAAa,OAAW,CACzK,CAAC,ECND,EAAkB,gBAAU,QAC5B,MACA,sBACA,CAAK,CACL,SACA,6CACK,CACL,QACA,uBACA,wBACA,CAAK,CACL,kBACA,yBACA,CAAK,CACL,CAAC,EACD,sDAoCA,EAnC4B,cAAQ,iBAAa,EAAO,EACxD,SAAgD,OAkCd,EAAC,IAlCa,CAAQ,GACxD,MAA4C,cAAQ,GACpD,MAAwC,cAAQ,IAChD,SAAY,GAAU,IACtB,EAAoB,gBAAU,IAC9B,eAAY,GAAgB,CAAE,WAAM,IACpC,EAAwB,aAAO,wDAA4G,EAAc,CAAE,YAAM,cACjK,MAAY,SAAI,QAAU,0BAAmC,SAAI,CAAC,GAAO,EAAI,0EAA2G,UAAK,CAAC,GAAI,EAAI,UAAW,SAAI,CAAC,GAAS,EAAI,WAAiB,EAAG,UAAK,CAAC,GAAW,EAAI,gBAA+B,SAAI,CAAC,EAAoB,CAAI,iBDjBrS,EAAC,GCiBoS,MAAJ,iBAAI,0CACxU,KACA,GAGA,KAAuD,OAAO,GAAG,WAAW,EAC5E,EAAmC,OAAsC,SAAI,CAAC,EAAmB,CAAI,gBH9BnE,CG8BmE,CH9BlE,KG8BkE,IAAJ,MAAI,EAAsE,OAAW,UAAK,QAAU,uCAAgD,SAAI,CAAC,GAAM,EAAI,4BACpQ,MACA,CAAyC,oCAA+C,EAAG,SAAI,CAAC,GAAM,EAAI,qBAC1G,2DACA,mBACA,MAAmE,OAAwB,KAC3F,6BACA,mBACA,MAEA,mCAEoD,+BAAyB,KAC7E,eAEA,MAEA,MAEA,CAAyC,+FAAiI,GAAI,GAAI,GAAI,KAAY,EAAG,CACrM,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddConnectionWidget/components/ConfigureConnection.js","webpack://_N_E/./node_modules/@mui/icons-material/esm/OpenInNew.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddConnectionWidget/components/ConnectionTypeSelect.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddConnectionWidget/components/AddConnectionWidget.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Suspense } from 'react';\nimport { LoadingEllipses } from '@jbrowse/core/ui';\nimport { ConfigurationEditor } from '@jbrowse/plugin-config';\nimport { observer } from 'mobx-react';\nconst ConfigureConnection = observer(function ({ connectionType, model, session, }) {\n    const ConfigEditorComponent = connectionType.configEditorComponent || ConfigurationEditor;\n    return (_jsx(Suspense, { fallback: _jsx(LoadingEllipses, {}), children: _jsx(ConfigEditorComponent, { model: { target: model }, session: session }) }));\n});\nexport default ConfigureConnection;\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3z\"\n}), 'OpenInNew');","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect } from 'react';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport { IconButton, MenuItem, TextField } from '@mui/material';\nimport { observer } from 'mobx-react';\nconst ConnectionTypeSelect = observer(function ConnectionTypeSelect({ connectionTypeChoices, connectionType, setConnectionType, }) {\n    const firstChoice = connectionTypeChoices[0];\n    useEffect(() => {\n        if (!connectionType) {\n            setConnectionType(firstChoice);\n        }\n    }, [connectionType, firstChoice, setConnectionType]);\n    return (_jsx(\"form\", { autoComplete: \"off\", children: connectionType ? (_jsx(TextField, { value: connectionType.name, label: \"connectionType\", helperText: connectionType.description ? (_jsxs(_Fragment, { children: [connectionType.description, connectionType.url ? (_jsx(IconButton, { href: connectionType.url, rel: \"noopener noreferrer\", target: \"_blank\", children: _jsx(OpenInNewIcon, {}) })) : null] })) : null, select: true, fullWidth: true, onChange: event => {\n                setConnectionType(connectionTypeChoices.find(c => c.name === event.target.value));\n            }, variant: \"outlined\", children: connectionTypeChoices.map(c => (_jsx(MenuItem, { value: c.name, children: c.displayName || c.name }, c.name))) })) : null }));\n});\nexport default ConnectionTypeSelect;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useMemo, useState } from 'react';\nimport { getEnv, getSession, isSessionModelWithWidgets, } from '@jbrowse/core/util';\nimport { isSessionWithConnections } from '@jbrowse/product-core';\nimport { Button, Step, StepContent, StepLabel, Stepper } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nimport ConfigureConnection from './ConfigureConnection';\nimport ConnectionTypeSelect from './ConnectionTypeSelect';\nconst useStyles = makeStyles()(theme => ({\n    root: {\n        marginTop: theme.spacing(1),\n    },\n    stepper: {\n        backgroundColor: theme.palette.background.default,\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    actionsContainer: {\n        marginBottom: theme.spacing(2),\n    },\n}));\nconst steps = ['Select a Connection Type', 'Configure Connection'];\nconst AddConnectionWidget = observer(function ({ model }) {\n    const [connectionType, setConnectionType] = useState();\n    const [connectionId, setConnectionId] = useState();\n    const [activeStep, setActiveStep] = useState(0);\n    const { classes } = useStyles();\n    const session = getSession(model);\n    const { pluginManager } = getEnv(session);\n    const configModel = useMemo(() => connectionType === null || connectionType === void 0 ? void 0 : connectionType.configSchema.create({ connectionId }, getEnv(model)), [connectionId, connectionType, model]);\n    return (_jsx(\"div\", { className: classes.root, children: _jsx(Stepper, { className: classes.stepper, activeStep: activeStep, orientation: \"vertical\", children: steps.map(label => (_jsxs(Step, { children: [_jsx(StepLabel, { children: label }), _jsxs(StepContent, { children: [activeStep === 0 ? (_jsx(ConnectionTypeSelect, { connectionTypeChoices: pluginManager.getConnectionElements(), connectionType: connectionType, setConnectionType: c => {\n                                    setConnectionType(c);\n                                    if (!c) {\n                                        return;\n                                    }\n                                    setConnectionId(`${c.name}-${Date.now()}`);\n                                } })) : connectionType && configModel ? (_jsx(ConfigureConnection, { connectionType: connectionType, model: configModel, session: session })) : null, _jsxs(\"div\", { className: classes.actionsContainer, children: [_jsx(Button, { disabled: activeStep === 0, onClick: () => {\n                                            setActiveStep(activeStep - 1);\n                                        }, className: classes.button, children: \"Back\" }), _jsx(Button, { disabled: !((activeStep === 0 && connectionType) ||\n                                            (activeStep === 1 && configModel)), variant: \"contained\", color: \"primary\", onClick: () => {\n                                            if (activeStep === steps.length - 1) {\n                                                if (configModel && isSessionWithConnections(session)) {\n                                                    const conf = session.addConnectionConf(configModel);\n                                                    session.makeConnection(conf);\n                                                }\n                                                else {\n                                                    session.notify('No config model to add');\n                                                }\n                                                if (isSessionModelWithWidgets(session)) {\n                                                    session.hideWidget(model);\n                                                }\n                                            }\n                                            else {\n                                                setActiveStep(activeStep + 1);\n                                            }\n                                        }, className: classes.button, \"data-testid\": \"addConnectionNext\", children: activeStep === steps.length - 1 ? 'Connect' : 'Next' })] })] })] }, label))) }) }));\n});\nexport default AddConnectionWidget;\n"],"names":["createSvgIcon","_jsx","d"],"sourceRoot":"","ignoreList":[0,1,2,3]}
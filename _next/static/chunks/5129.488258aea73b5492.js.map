{"version":3,"file":"static/chunks/5129.488258aea73b5492.js","mappings":"oNAEO,uBAA+B,YAAgB,EACtD,MACA,oBAAY,GAAkB,CAAE,eAAU,IAC1C,iBACA,kBACA,yDACA,gBACA,EAAoB,QAAO,MAC3B,8CACA,MACA,kCAEA,MAAqB,QAAW,kBAChC,YACA,aACA,WACA,QACA,UACA,QACA,MAAuB,QAAqB,GAC5C,EACA,eAQA,OAPA,kBACA,sDACA,cACA,mBACA,mBAA6B,WAAW,OACnC,EACL,mCACA,CACA,CC3BA,MAAuC,UAAI,KAAO,8BAA0C,CAC5F,EAAwC,UAAI,KAAO,+BAA2C,EAC/E,kBAA0C,YAAiB,EAC1E,IAAY,QAAO,EACnB,MAA0B,cAAQ,GAClC,MAA8B,cAAQ,GAClC,eAAS,MAEb,WACA,IACA,YAAoC,EAAa,CACjD,OACA,GAFiD,KAEjD,IAAiC,eAAa,GAC9C,CAAiB,EACjB,IACA,CACA,SACA,KACA,gBACA,CACA,EAAS,EACT,CAAK,QACL,SACA,KACA,YAAwB,aAAoB,IAC5C,sBAGA,gBAAyB,eAAmB,YACpC,eAAmB,CAAC,GAAU,2BACtC,EAAgB,eAAmB,CAAC,cAAY,EAAI,QAAc,OAC1D,eAAmB,yBAC3B,WACA,OAAoB,eAAmB,OAAS,OAAQ,kBAAoB,GAAG,EAAM,EAAG,CACxF,UACA,IACgB,cAAQ,6BACxB,MACA,IACA,UACA,IACgB,cAAQ,6BACxB,IACgB,eAAmB,IAA2B,kBAA8B,EAC5F,IACgB,eAAmB,IAAuB,kBAA8B,EACxF,CAAS,QACT,CACA,kBAAkC,YAAgB,EAClD,OAAY,eAAmB,CAAC,GAAI,EAAI,qBACxC,mBACA,MAA4B,gBAAU,IACtC,kBACA,EACA,CACA,cACA,UACA,YAAiC,eAAa,EAAG,YAAiB,EAClE,YACA,qDACiB,CACjB,CACA,EAAW,gBACX,CACA,kBAA8B,YAAgB,EAC9C,OAAY,eAAmB,CAAC,GAAI,EAAI,qBACxC,mBACA,MAA4B,gBAAU,IACtC,kBACA,EACA,CACA,cACA,UACA,YAAiC,eAAa,EAAG,YAAiB,EAClE,YACA,oDACA,CAAiB,CACjB,CACA,EAAW,gBACX,gBChFe,gBAA6C,UAAa,EACzE,OAAY,eAAmB,YACvB,eAAmB,CAAC,GAAU,mDAC9B,eAAmB,aAC3B,QAAqB,GACrB,eACA,YACA,0BACA,EAA6B,QAAc,IAC3C,kBACA,KACA,OACA,MACA,MACA,KAAiC,EAAM,GAAG,cAAgB,GAAG,EAAG,EAChE,4BACA,4BACA,KAAqC,EAAM,GAAG,EAAa,GAAG,GAAY,GAAG,EAAS,KAAK,EAAS,KACpG,OAAoB,eAAmB,OAAS,OAAQ,EAAU,GAAG,EAAI,EAAG,CAC5D,eAAmB,CAAC,GAAI,EAAI,2BAC5C,mBACwB,OAAQ,KAChC,EAAuB,IACvB,CAAS,GACT,CCvBe,cACf,IAAY,yBAAsB,EAClC,EAAoB,gBAAU,IAC9B,CAAY,iBAAgB,CAAE,WAAM,IACpC,KACA,IACA,wCACA,CACA,SACA,CACA,OAAY,eAAmB,CAAC,IAAQ,CAAI,cAAJ,uBAAI,CAA6C,CACjF,eAAmB,CAAC,EAAiC,CAAI,cAAwB,EACzF,EAAgC,YAD6B,GACV,CAAC,EAA8B,CAAI,kBAAgC,OACtH,EADkF","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/getSAFeatures.js","webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/LaunchSupplementaryAlignmentBreakpointSplitViewPanel.js","webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/SupplementaryAlignmentsLocStrings.js","webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/SupplementaryAlignments.js"],"sourcesContent":["import { getSession } from '@jbrowse/core/util';\nimport { featurizeSA, getClip, getLengthSansClipping } from '../MismatchParser';\nexport async function getSAFeatures({ view, feature, }) {\n    var _a;\n    const { assemblyManager } = getSession(view);\n    const cigar = feature.get('CIGAR');\n    const origStrand = feature.get('strand');\n    const SA = ((_a = feature.get('tags')) === null || _a === void 0 ? void 0 : _a.SA) || '';\n    const readName = feature.get('name');\n    const clipPos = getClip(cigar, 1);\n    const assembly = await assemblyManager.waitForAssembly(view.assemblyNames[0]);\n    if (!assembly) {\n        throw new Error('assembly not found');\n    }\n    const suppAlns = featurizeSA(SA, feature.id(), origStrand, readName, true);\n    const feat = feature.toJSON();\n    feat.clipPos = clipPos;\n    feat.strand = 1;\n    feat.mate = {\n        refName: readName,\n        start: clipPos,\n        end: clipPos + getLengthSansClipping(cigar),\n    };\n    const features = [feat, ...suppAlns];\n    features.forEach((f, idx) => {\n        f.refName = assembly.getCanonicalRefName(f.refName) || f.refName;\n        f.syntenyId = idx;\n        f.mate.syntenyId = idx;\n        f.mate.uniqueId = `${f.uniqueId}_mate`;\n    });\n    features.sort((a, b) => a.clipPos - b.clipPos);\n    return features;\n}\n","import React, { lazy, useEffect, useState } from 'react';\nimport { ErrorMessage } from '@jbrowse/core/ui';\nimport { SimpleFeature, getSession, toLocale } from '@jbrowse/core/util';\nimport { Link, Typography } from '@mui/material';\nimport { getSAFeatures } from './getSAFeatures';\nconst BreakendMultiLevelOptionDialog = lazy(() => import('./BreakendMultiLevelOptionDialog'));\nconst BreakendSingleLevelOptionDialog = lazy(() => import('./BreakendSingleLevelOptionDialog'));\nexport default function LaunchBreakpointSplitViewPanel({ model, feature, }) {\n    const { view } = model;\n    const [res, setRes] = useState();\n    const [error, setError] = useState();\n    useEffect(() => {\n        ;\n        (async () => {\n            try {\n                const feats = await getSAFeatures({\n                    view,\n                    feature: new SimpleFeature(feature),\n                });\n                setRes(feats);\n            }\n            catch (e) {\n                setError(e);\n                console.error(e);\n            }\n        })();\n    }, [feature, view]);\n    const ret = [];\n    if (res) {\n        for (let i = 0; i < res.length - 1; i++) {\n            ret.push([res[i], res[i + 1]]);\n        }\n    }\n    return ret.length ? (React.createElement(\"div\", null,\n        React.createElement(Typography, null, \"Launch split view\"),\n        error ? React.createElement(ErrorMessage, { error: error }) : null,\n        React.createElement(\"ul\", null, ret.map((arg, index) => {\n            const [f1, f2] = arg;\n            return (React.createElement(\"li\", { key: `${JSON.stringify(arg)}-${index}` },\n                f1.refName,\n                \":\",\n                toLocale(f1.strand === 1 ? f1.end : f1.start),\n                \" ->\",\n                ' ',\n                f2.refName,\n                \":\",\n                toLocale(f2.strand === 1 ? f2.start : f2.end),\n                ' ',\n                React.createElement(TopBottomSplitViewLink, { model: model, f1: f1, f2: f2 }),\n                ' ',\n                React.createElement(SideBySideViewLink, { model: model, f1: f1, f2: f2 })));\n        })))) : null;\n}\nfunction TopBottomSplitViewLink({ model, f1, f2, }) {\n    return (React.createElement(Link, { href: \"#\", onClick: event => {\n            event.preventDefault();\n            const session = getSession(model);\n            session.queueDialog(handleClose => [\n                BreakendMultiLevelOptionDialog,\n                {\n                    handleClose,\n                    session,\n                    feature: new SimpleFeature({ ...f1, mate: f2 }),\n                    view: model.view,\n                    assemblyName: model.view.displayedRegions[0].assemblyName,\n                },\n            ]);\n        } }, \"(top/bottom)\"));\n}\nfunction SideBySideViewLink({ model, f1, f2, }) {\n    return (React.createElement(Link, { href: \"#\", onClick: event => {\n            event.preventDefault();\n            const session = getSession(model);\n            session.queueDialog(handleClose => [\n                BreakendSingleLevelOptionDialog,\n                {\n                    handleClose,\n                    session,\n                    feature: new SimpleFeature({ ...f1, mate: f2 }),\n                    view: model.view,\n                    assemblyName: model.view.displayedRegions[0].assemblyName,\n                },\n            ]);\n        } }, \"(single row)\"));\n}\n","import React from 'react';\nimport { Link, Typography } from '@mui/material';\nimport { getLengthOnRef } from '../MismatchParser';\nimport { navToLoc } from './util';\nexport default function SupplementaryAlignmentsLocStrings({ tag, model, }) {\n    return (React.createElement(\"div\", null,\n        React.createElement(Typography, null, \"List of supplementary alignment locations\"),\n        React.createElement(\"ul\", null, tag\n            .split(';')\n            .filter(SA => !!SA)\n            .map((SA, idx) => {\n            const [saRef, saStart, saStrand, saCigar] = SA.split(',');\n            const saLength = getLengthOnRef(saCigar);\n            const extra = Math.floor(saLength / 5);\n            const start = +saStart;\n            const end = +saStart + saLength;\n            const sp = start - extra;\n            const ep = end + extra;\n            const locString = `${saRef}:${Math.max(1, sp)}-${ep}`;\n            const displayStart = start.toLocaleString('en-US');\n            const displayEnd = end.toLocaleString('en-US');\n            const displayString = `${saRef}:${displayStart}-${displayEnd} (${saStrand}) [${saLength}bp]`;\n            return (React.createElement(\"li\", { key: `${locString}-${idx}` },\n                React.createElement(Link, { href: \"#\", onClick: async (event) => {\n                        event.preventDefault();\n                        navToLoc(locString, model);\n                    } }, displayString)));\n        }))));\n}\n","import React from 'react';\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard';\nimport { getEnv, getSession } from '@jbrowse/core/util';\nimport LaunchBreakpointSplitViewPanel from './LaunchSupplementaryAlignmentBreakpointSplitViewPanel';\nimport SupplementaryAlignmentsLocStrings from './SupplementaryAlignmentsLocStrings';\nexport default function SupplementaryAlignments(props) {\n    const { model, tag, feature } = props;\n    const session = getSession(model);\n    const { pluginManager } = getEnv(session);\n    let hasBreakendSplitView = false;\n    try {\n        hasBreakendSplitView = !!pluginManager.getViewType('BreakpointSplitView');\n    }\n    catch (e) {\n    }\n    return (React.createElement(BaseCard, { ...props, title: \"Supplementary alignments\" },\n        React.createElement(SupplementaryAlignmentsLocStrings, { model: model, tag: tag }),\n        hasBreakendSplitView ? (React.createElement(LaunchBreakpointSplitViewPanel, { model: model, feature: feature })) : null));\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2,3]}
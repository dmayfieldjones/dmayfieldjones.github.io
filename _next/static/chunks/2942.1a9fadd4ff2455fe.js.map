{"version":3,"file":"static/chunks/2942.1a9fadd4ff2455fe.js","mappings":"4JAIe,SAASA,EAAcC,CAA8B,EAQlE,MAPAC,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACR,IAAIC,EAAAA,CAAQA,CAAC,CACX,GAAGF,CAAK,CACRG,QAAS,IACTC,UAAW,iBACb,EACF,EAAG,CAACJ,EAAM,EACH,UAACK,MAAAA,CAAIC,MAAO,CAAEC,QAAS,GAAIC,OAAQ,EAAG,EAAGC,GAAG,kBACrD,CCXe,SAASC,EAAW,CAQlC,KARkC,CACjCC,cAAY,SACZC,CAAO,gBACPC,CAAc,CAKf,CARkC,EAS3BC,EAAcD,EACjBE,GAAG,CAACC,IACH,GAAM,CAAEC,MAAI,UAAEC,CAAQ,MAAEC,CAAI,CAAE,CAAGH,EACjC,GAAIE,EAAU,CACZ,GAAM,CAACE,EAAKC,EAAK,CAAGH,EAASI,KAAK,CAAC,KAC7B,CAACC,EAAOC,EAAK,CAAGH,EAAKC,KAAK,CAAC,KACjC,MAAO,CACLH,YACAF,EACAQ,MAAON,IAASR,EAAe,OAAS,UACxCS,IAAKA,EAAIM,OAAO,CAAC,MAAO,IACxBH,MAAO,CAACA,EAAMI,UAAU,CAAC,IAAK,IAC9BH,KAAM,CAACA,EAAKG,UAAU,CAAC,IAAK,GAC9B,CACF,CAGF,GACCC,GAJQ,GAIF,CAACC,GAAK,CAAC,CAACA,GACjB,MACE,UAAC9B,EAAaA,CACZ+B,QAAS,EADG/B,SAEH,yBACTgC,WAAW,EACXC,SAAU,GACVC,UAAWC,KAAKC,GAAG,CAACC,OAAOC,UAAU,CAAG,IAAK,KAC7CC,2BAA2B,EAC3BC,YAAY,aACZzB,YAAaA,EACb0B,aAAc,QACF3B,SAAAA,EAAAA,KAAAA,EAAAA,QAAAA,EAAAA,EAAgB4B,IAAI,CAACZ,CAArBhB,EAA0BgB,EAAEV,IAAI,GAAKuB,EAAIvB,KAAI,GAA7CN,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAgDI,IAAAA,GAExDL,EAAQ8B,EAAIvB,IAAI,CAEpB,GAGN","sources":["webpack://_N_E/./app/GreatDaneGenomeBrowser/Ideogram.tsx","webpack://_N_E/./app/GreatDaneGenomeBrowser/MyIdeogram.tsx"],"sourcesContent":["import React, { useEffect } from 'react'\n\nimport Ideogram from 'ideogram'\n\nexport default function ReactIdeogram(props: Record<string, unknown>) {\n  useEffect(() => {\n    new Ideogram({\n      ...props,\n      dataDir: '/',\n      container: '#ideo-container',\n    })\n  }, [props])\n  return <div style={{ padding: 10, margin: 10 }} id=\"ideo-container\"></div>\n}\n","import ReactIdeogram from './Ideogram'\n\nexport default function MyIdeogram({\n  selectedGene,\n  setGene,\n  geneCategories,\n}: {\n  selectedGene?: string\n  setGene: (arg: string) => void\n  geneCategories: any[]\n}) {\n  const annotations = geneCategories\n    .map(r => {\n      const { type, location, name } = r\n      if (location) {\n        const [chr, rest] = location.split(':')\n        const [start, stop] = rest.split('-')\n        return {\n          name,\n          type,\n          color: name === selectedGene ? 'blue' : '#bf141c',\n          chr: chr.replace('chr', ''),\n          start: +start.replaceAll(',', ''),\n          stop: +stop.replaceAll(',', ''),\n        }\n      } else {\n        return undefined\n      }\n    })\n    .filter(f => !!f)\n  return (\n    <ReactIdeogram\n      columns={2}\n      organism=\"canis-lupus-familiaris\"\n      rotatable={false}\n      chrWidth={10}\n      chrHeight={Math.min(window.innerWidth - 120, 500)}\n      showNonNuclearChromosomes={true}\n      orientation=\"horizontal\"\n      annotations={annotations}\n      onClickAnnot={(arg: { name: string }) => {\n        const f = geneCategories?.find(f => f.name === arg.name)?.type\n        if (f) {\n          setGene(arg.name)\n        }\n      }}\n    />\n  )\n}\n"],"names":["ReactIdeogram","props","useEffect","Ideogram","dataDir","container","div","style","padding","margin","id","MyIdeogram","selectedGene","setGene","geneCategories","annotations","map","r","type","location","name","chr","rest","split","start","stop","color","replace","replaceAll","filter","f","columns","rotatable","chrWidth","chrHeight","Math","min","window","innerWidth","showNonNuclearChromosomes","orientation","onClickAnnot","find","arg"],"sourceRoot":"","ignoreList":[]}
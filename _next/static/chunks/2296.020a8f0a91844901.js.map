{"version":3,"file":"static/chunks/2296.020a8f0a91844901.js","mappings":"4OASA,MAAkB,uBAAU,QAC5B,qBACA,UACA,mBACA,CAAK,CACL,CAAC,EACD,EAAsB,cAAQ,gBAA0B,8BAAiC,MATzF,EAUA,IAAY,0BAAsC,EAClD,EAAiB,oBAAc,WAC/B,EAA0B,oBAAc,oBACxC,wBACA,MAAY,SAAI,CAAC,GAAgB,EAAI,QAAS,SAAI,CAAC,GAAQ,EAAI,0BAC/D,MACA,EACA,KAGA,oDAEA,CAAa,iBAAoB,SACjC,EACA,aAvBA,CADA,EAwBuC,aAvBvC,aAAiC,cAAkB,OAuBsB,MACzE,CACA,eACA,UAAwB,gBACxB,CAAC,EACD,EAAuB,cAAQ,mBAA4B,oBAA2B,EACtF,IAAY,WAAU,IACtB,MAAY,SAAI,QAAU,8DAAsI,yBAA8C,SAAI,QAAU,SAAU,SAAI,IAAkB,mCAAgE,EAAG,IAAK,OAAU,GAAG,EAAI,IAA1O,SAAI,CAAC,GAAU,EAAI,gCAAkC,CAAqL,CAAO,CAC5V,CAAC,EAMD,EAL+B,cAAQ,WAAa,GAKrC,MALqC,gBAKf,EAAC,aALc,EAAwC,EAC5F,MAAY,UAAK,CAAC,QAAM,EAAI,0EAA+F,UAAK,CAAC,GAAa,EAAI,UAAW,SAAI,CAAC,GAAU,EAAI,uDAAyD,EAAG,SAAI,IAAmB,4BAAoD,GAAI,EAAG,SAAI,CAAC,GAAa,EAAI,SAAU,SAAI,CAAC,GAAM,EAAI,aAC7W,GACA,CAAqB,sDAA6D,EAAG,GAAI,CACzF,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/HierarchicalTrackSelectorWidget/components/dialogs/ToggleConnectionsDialog.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { readConfObject } from '@jbrowse/core/configuration';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { Button, Checkbox, DialogActions, DialogContent, FormControlLabel, Typography, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nfunction ellipses(slug) {\n    return slug.length > 20 ? `${slug.slice(0, 20)}...` : slug;\n}\nconst useStyles = makeStyles()(theme => ({\n    connectionContainer: {\n        width: 500,\n        margin: theme.spacing(4),\n    },\n}));\nconst ConnectionRow = observer(function ConnectionRow({ conf, session, breakConnection, }) {\n    const { connectionInstances: instances = [] } = session;\n    const name = readConfObject(conf, 'name');\n    const assemblyNames = readConfObject(conf, 'assemblyNames');\n    const found = instances.find(conn => name === conn.name);\n    return (_jsx(FormControlLabel, { control: _jsx(Checkbox, { checked: !!found, onChange: () => {\n                var _a;\n                if (found) {\n                    breakConnection(conf);\n                }\n                else {\n                    (_a = session.makeConnection) === null || _a === void 0 ? void 0 : _a.call(session, conf);\n                }\n            }, color: \"primary\" }), label: [\n            name,\n            assemblyNames.length ? `(${ellipses(assemblyNames.join(','))})` : '',\n        ]\n            .filter(f => !!f)\n            .join(' ') }, conf.connectionId));\n});\nconst ConnectionList = observer(function ConnectionsList({ session, breakConnection, }) {\n    const { classes } = useStyles();\n    return (_jsx(\"div\", { className: classes.connectionContainer, children: !session.connections.length ? (_jsx(Typography, { children: \"No connections found\" })) : (session.connections.map((conf, idx) => (_jsx(\"div\", { children: _jsx(ConnectionRow, { conf: conf, session: session, breakConnection: breakConnection }) }, `${conf.name}_${idx}`)))) }));\n});\nconst ToggleConnectionDialog = observer(function ({ session, handleClose, breakConnection, }) {\n    return (_jsxs(Dialog, { open: true, onClose: handleClose, maxWidth: \"lg\", title: \"Turn on/off connections\", children: [_jsxs(DialogContent, { children: [_jsx(Typography, { children: \"Use the checkbox to turn on/off connections\" }), _jsx(ConnectionList, { session: session, breakConnection: breakConnection })] }), _jsx(DialogActions, { children: _jsx(Button, { onClick: () => {\n                        handleClose();\n                    }, variant: \"contained\", color: \"primary\", children: \"Close\" }) })] }));\n});\nexport default ToggleConnectionDialog;\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
{"version":3,"file":"static/chunks/4211.067bbc7a91e70e65.js","mappings":"gOAQA,MAAkB,gBAAU,IAC5B,QACA,oBACA,CAAK,CACJ,EAgCD,EA/B2C,cAAQ,aACnD,CA8Be,EA9Bf,OAAY,GAAQ,EACpB,SAAY,GAAU,IACtB,IA4BiD,EAAC,EA5BtC,qCAAwC,EACpD,EAAgB,YAAM,OACtB,MAAgC,cAAQ,GACxC,MAAgC,cAAQ,GACxC,OAAY,GAAQ,CAAE,sBAAiB,IACvC,OAAY,eAAmB,QAAU,sBACzC,MACA,wEACA,4BACA,6BACA,eACA,cACA,CAAS,mBACT,UACA,SACA,EAAW,CACH,eAAmB,CAAC,IAA0B,EAAI,KAAU,EAC5D,eAAmB,CAAC,GAAS,EAAI,QAAc,EACvD,KAA6B,eAAmB,QAAU,OAAS,qBAAwB,CAC/E,eAAmB,QAAU,2CAAkE,2BAAwC,CACnI,eAAmB,SAAW,uCAAmF,EACjH,eAAmB,SAAW,mCAA4D,GAC9F,eAAmB,CAAC,IAAW,KAC3B,eAAmB,CAAC,eAAa,EAAI,0BADV,CACU,eAAkE,EACvH,2BACA,gBAAkD,EAAI,GAAG,EAAM,GAC/D,WAAqC,SACrC,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/MultiLinearVariantDisplay/components/VariantDisplayComponent.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { SanitizedHTML } from '@jbrowse/core/ui';\nimport BaseTooltip from '@jbrowse/core/ui/BaseTooltip';\nimport { getContainingView } from '@jbrowse/core/util';\nimport { BaseLinearDisplayComponent } from '@jbrowse/plugin-linear-genome-view';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nimport LegendBar from '../../shared/LegendBar';\nconst useStyles = makeStyles()({\n    cursor: {\n        pointerEvents: 'none',\n    },\n});\nconst MultiLinearVariantDisplayComponent = observer(function (props) {\n    const { model } = props;\n    const { classes } = useStyles();\n    const { height, sources, rowHeight, scrollTop } = model;\n    const ref = useRef(null);\n    const [mouseY, setMouseY] = useState();\n    const [mouseX, setMouseX] = useState();\n    const { width } = getContainingView(model);\n    return (React.createElement(\"div\", { ref: ref, onMouseMove: event => {\n            var _a;\n            const rect = (_a = ref.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();\n            const top = (rect === null || rect === void 0 ? void 0 : rect.top) || 0;\n            const left = (rect === null || rect === void 0 ? void 0 : rect.left) || 0;\n            setMouseY(event.clientY - top);\n            setMouseX(event.clientX - left);\n        }, onMouseLeave: () => {\n            setMouseY(undefined);\n            setMouseX(undefined);\n        } },\n        React.createElement(BaseLinearDisplayComponent, { ...props }),\n        React.createElement(LegendBar, { model: model }),\n        mouseY && sources ? (React.createElement(\"div\", { style: { position: 'relative' } },\n            React.createElement(\"svg\", { className: classes.cursor, width: width, height: height, style: { position: 'absolute', top: scrollTop } },\n                React.createElement(\"line\", { x1: 0, x2: width, y1: mouseY - scrollTop, y2: mouseY - scrollTop, stroke: \"black\" }),\n                React.createElement(\"line\", { x1: mouseX, x2: mouseX, y1: 0, y2: height, stroke: \"black\" })),\n            React.createElement(BaseTooltip, null,\n                React.createElement(SanitizedHTML, { html: Object.entries(sources[Math.floor(mouseY / rowHeight)] || {})\n                        .filter(([key]) => key !== 'color')\n                        .map(([key, value]) => `${key}:${value}`)\n                        .join('\\n') })))) : null));\n});\nexport default MultiLinearVariantDisplayComponent;\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
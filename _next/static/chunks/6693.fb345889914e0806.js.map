{"version":3,"file":"static/chunks/6693.fb345889914e0806.js","mappings":"qNAIO,sBACP,eAAY,GAAa,CAAE,eAAU,IACrC,EAAsB,aAAO,mBAC7B,eAAY,mBAA+B,EAC3C,EAAsB,qBAAe,IACrC,kBAAY,GAAmB,EAC/B,GACA,YACA,gBACA,mBACgB,aAAO,KACvB,eAEA,CAAS,CACT,MAEA,iCACA,2DACA,UAAgB,6BAAmC,EACnD,qBACA,CACA,KACA,sBACA,eACA,kBACA,EACA,CACA,KACA,kBACA,CACA,CACA,+BACA,IAAgB,2BAA2B,uBAAiB,IAC5D,0DACA,KACA,gCACA,UAAwB,SAAa,EACrC,OACA,iCACA,oBACA,gBACA,CACA,CAAa,EACb,SACA,CAAS,EACT,UAAgB,6BAAmC,EACnD,oBACA,CACA,KACA,sBACA,eACA,kBACA,EACA,CACA,KACA,kBACA,CACA,CACA,gBACA,qDAEA,uCAA8C,EAAc,GAC5D,CC7DO,cACH,iBAAW,GAAO,aAAO,WAC7B,IACA,6BACA,MAA6B,uBAAiB,IAC9C,EAAkC,qBAAe,GACjD,qBACA,sCACA,QAA0C,EAAoB,GAC9D,YACA,GAF8D,KAE9D,GACA,2BACA,oBACiB,EACG,aAAO,KAC3B,8BAEA,CACA,CACA,SACgB,aAAO,MAAW,sBAAgB,MAClD,iBACA,cAEA,CACA,CAAK,EAAI,UAAa,EACtB","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/getQuantitativeStats.js","webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/getQuantitativeStatsAutorun.js"],"sourcesContent":["import { getConf } from '@jbrowse/core/configuration';\nimport { getContainingView, getSession } from '@jbrowse/core/util';\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks';\nimport { isAlive } from 'mobx-state-tree';\nexport async function getQuantitativeStats(self, opts) {\n    const { rpcManager } = getSession(self);\n    const numStdDev = getConf(self, 'numStdDev') || 3;\n    const { adapterConfig, autoscaleType } = self;\n    const sessionId = getRpcSessionId(self);\n    const { currStatsBpPerPx } = opts;\n    const params = {\n        sessionId,\n        adapterConfig,\n        statusCallback: (message) => {\n            if (isAlive(self)) {\n                self.setMessage(message);\n            }\n        },\n        ...opts,\n    };\n    if (autoscaleType === 'global' || autoscaleType === 'globalsd') {\n        const results = (await rpcManager.call(sessionId, 'WiggleGetGlobalQuantitativeStats', params));\n        const { scoreMin, scoreMean, scoreStdDev } = results;\n        return autoscaleType === 'globalsd'\n            ? {\n                ...results,\n                scoreMin: scoreMin >= 0 ? 0 : scoreMean - numStdDev * scoreStdDev,\n                scoreMax: scoreMean + numStdDev * scoreStdDev,\n                currStatsBpPerPx,\n            }\n            : {\n                ...results,\n                currStatsBpPerPx,\n            };\n    }\n    if (autoscaleType === 'local' || autoscaleType === 'localsd') {\n        const { dynamicBlocks, bpPerPx } = getContainingView(self);\n        const results = (await rpcManager.call(sessionId, 'WiggleGetMultiRegionQuantitativeStats', {\n            ...params,\n            regions: dynamicBlocks.contentBlocks.map(region => {\n                const { start, end } = region;\n                return {\n                    ...JSON.parse(JSON.stringify(region)),\n                    start: Math.floor(start),\n                    end: Math.ceil(end),\n                };\n            }),\n            bpPerPx,\n        }));\n        const { scoreMin, scoreMean, scoreStdDev } = results;\n        return autoscaleType === 'localsd'\n            ? {\n                ...results,\n                scoreMin: scoreMin >= 0 ? 0 : scoreMean - numStdDev * scoreStdDev,\n                scoreMax: scoreMean + numStdDev * scoreStdDev,\n                currStatsBpPerPx,\n            }\n            : {\n                ...results,\n                currStatsBpPerPx,\n            };\n    }\n    if (autoscaleType === 'zscale') {\n        return rpcManager.call(sessionId, 'WiggleGetGlobalQuantitativeStats', params);\n    }\n    throw new Error(`invalid autoscaleType '${autoscaleType}'`);\n}\n","import { getContainingView, isAbortException } from '@jbrowse/core/util';\nimport { createStopToken } from '@jbrowse/core/util/stopToken';\nimport { autorun } from 'mobx';\nimport { addDisposer, isAlive } from 'mobx-state-tree';\nimport { getQuantitativeStats } from './getQuantitativeStats';\nexport function getQuantitativeStatsAutorun(self) {\n    addDisposer(self, autorun(async () => {\n        try {\n            if (self.quantitativeStatsReady) {\n                const view = getContainingView(self);\n                const stopToken = createStopToken();\n                self.setStatsLoading(stopToken);\n                const statsRegion = JSON.stringify(view.dynamicBlocks);\n                const wiggleStats = await getQuantitativeStats(self, {\n                    stopToken,\n                    filters: [],\n                    currStatsBpPerPx: view.bpPerPx,\n                    ...self.adapterProps(),\n                });\n                if (isAlive(self)) {\n                    self.updateQuantitativeStats(wiggleStats, statsRegion);\n                }\n            }\n        }\n        catch (e) {\n            if (isAlive(self) && !isAbortException(e)) {\n                console.error(e);\n                self.setError(e);\n            }\n        }\n    }, { delay: 1000 }));\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0,1]}
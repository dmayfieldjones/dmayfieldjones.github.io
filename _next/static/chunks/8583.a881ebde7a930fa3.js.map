{"version":3,"file":"static/chunks/8583.a881ebde7a930fa3.js","mappings":"uLAIO,sBACP,WAAY,QAAa,EACzB,gBAAY,GAAiB,EAE7B,CAAY,2CAAsD,CADjD,sBAAiB,IAElC,oCACA,MAA2B,GAAU,SACrC,UACA,QACA,CAAS,EACT,mCACA,4BACA,KACA,OACA,EACA,CACA,aAAmC,eAAmB,CAAC,UAAc,MAC7C,eAAmB,SAAW,sCAAoD,EAClF,eAAmB,SAAW,SAAa,IACnE,CAAiB,CACjB,CAEA,eAAgB,6CAAoD,CAAE,MAAe,MACrF,OACA,EACA,0BACA,KACA,KACA,WAA4B,mBAAa,OACzC,YACA,uBACa,EACb,CACK,GACL,OAAY,eAAmB,CAAC,UAAc,wBAC9C,aAAgB,aAAoB,EAEpC,EAAuB,QAAK,MAC5B,OAAgB,eAAmB,CAAC,UAAc,EAAI,YAAa,EAAM,EAAG,CAChE,eAAmB,aACf,eAAmB,aAAe,KAAY,CAC1C,eAAmB,SAAW,4BAA8D,IACpG,eAAmB,MAAQ,uBANvC,IAM+D,CAAQ,IAAK,CAC5D,eAAmB,MAAQ,iBAAkB,EAAO,GAAI,CACpD,eAAmB,CAAC,gBAAc,EAAI,YAAsB,IAChF,CAAK,EACL","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-linear-genome-view/esm/BaseLinearDisplay/models/renderSvg.js"],"sourcesContent":["import React from 'react';\nimport { ReactRendering, getContainingView, getViewParams, } from '@jbrowse/core/util';\nimport BlockState, { renderBlockData } from './serverSideRenderedBlock';\nimport { getId } from './util';\nexport async function renderBaseLinearDisplaySvg(self, opts) {\n    const { height, id } = self;\n    const { overrideHeight } = opts;\n    const view = getContainingView(self);\n    const { offsetPx: viewOffsetPx, roundedDynamicBlocks, width } = view;\n    const renderings = await Promise.all(roundedDynamicBlocks.map(async (block) => {\n        const blockState = BlockState.create({\n            key: block.key,\n            region: block,\n        });\n        const cannotBeRenderedReason = self.regionCannotBeRenderedText(block) ||\n            self.regionCannotBeRendered(block);\n        if (cannotBeRenderedReason) {\n            return [\n                block,\n                {\n                    reactElement: (React.createElement(React.Fragment, null,\n                        React.createElement(\"rect\", { x: 0, y: 0, width: width, height: 20, fill: \"#aaa\" }),\n                        React.createElement(\"text\", { x: 0, y: 15 }, cannotBeRenderedReason))),\n                },\n            ];\n        }\n        const { rpcManager, renderArgs, renderProps, rendererType } = renderBlockData(blockState, self);\n        return [\n            block,\n            await rendererType.renderInClient(rpcManager, {\n                ...renderArgs,\n                ...renderProps,\n                viewParams: getViewParams(self, true),\n                exportSVG: opts,\n                theme: opts.theme || renderProps.theme,\n            }),\n        ];\n    }));\n    return (React.createElement(React.Fragment, null, renderings.map(([block, rendering], index) => {\n        const { offsetPx, widthPx } = block;\n        const offset = offsetPx - viewOffsetPx;\n        const clipid = getId(id, index);\n        return (React.createElement(React.Fragment, { key: `frag-${index}` },\n            React.createElement(\"defs\", null,\n                React.createElement(\"clipPath\", { id: clipid },\n                    React.createElement(\"rect\", { x: 0, y: 0, width: widthPx, height: overrideHeight || height }))),\n            React.createElement(\"g\", { transform: `translate(${offset} 0)` },\n                React.createElement(\"g\", { clipPath: `url(#${clipid})` },\n                    React.createElement(ReactRendering, { rendering: rendering })))));\n    })));\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
{"version":3,"file":"static/chunks/2423.ae2ebfcda2a7c375.js","mappings":"0SAEe,oBAAyB,uBAA6B,EACrE,MAAY,UAAK,CAAC,UAAS,EAAI,UAAW,SAAI,CAAC,GAAU,EAAI,0QAA4Q,gBAAkB,EAAO,GAAM,SAAI,CAAC,GAAS,EAAI,sBAAuB,EAAM,8BACvZ,GAAgC,wBAAwC,CACxE,EAAmB,WAAY,EAAM,KAAO,CAC5C,CCCe,kBACf,MAKA,EAJA,IAAY,6BAA6B,EACzC,MAAgC,cAAQ,GAAG,EAE3C,iBADA,aAA0C,EAG1C,KACA,iBACA,IACA,IACA,OACA,EACA,2DAAgF,KAAK,KACrF,YACA,QACA,GAEA,qBACA,YACA,WACA,UACA,wBAEA,CAAa,EAEb,CACA,SACA,GACA,CACA,SAAkC,cAAQ,KAC1C,wEAAuH,GACvH,WAAiC,sBAAgB,kBACjD,gBACA,QACA,OACA,QACA,mHACA,WACS,CACJ,EACL,gBAA6C,UAAK,CAAC,IAAQ,CAAI,cAAJ,OAAI,YAA+C,SAAI,CAAC,GAAU,EAAI,0BAA6B,EAAM,EAAG,OAAU,SAAI,CAAC,GAAgB,EAAI,QAAS,SAAI,CAAC,GAAQ,EAAI,uBACpO,mBACA,EAAuB,QAAU,SAAI,CAAC,GAAU,EAAI,wCAA4C,EAAG,IAAc,SAAI,CAAC,EAAa,CAAI,+BAAwD,OAAW,SAAI,QAAU,OACxN,eACA,sBACA,CAAiB,UAAY,SAAI,CAAC,GAAQ,EAAI,sIAAwK,UAAmB,GAAW,MAAS,YAC7P,SACA,cACA,uBACA,CAA6B,CACJ,CACzB,CAAuB,EAAG,GAAI,EAX9B,IAYA,CC5DO,OACP,4DACA,4EACA,iFACA,gFACA,iFACA,yEACA,yIACA,ECAA,EAA4B,UAAI,KAAO,+BAAmD,EAC1F,EAAmC,UAAI,KAAO,+BAAsC,EACpF,YAAoB,yBAAwB,EAC5C,cACA,4GACA,iJACA,mDACA,MAAY,SAAI,IAA+B,0CAA0D,CACzG,CACA,yBAAoB,YAAwB,EAC5C,cACA,4GACA,+HACA,mDACA,MAAY,SAAI,IAA+B,0CAA0D,CACzG,CACA,kBAAoC,EAAQ,EAC5C,gBAAY,GAAc,EAC1B,gCACA,MAAY,MAAY,EACxB,qBAAkC,SAAI,IAAwB,mCAAmD,MAAQ,iBAAc,OAAa,4CAAqE,UAAiB,sBAAiC,SAAI,IAAwB,iCAA6C,eAAkB,GAAG,WAAc,GAAI,uBAAkC,SAAI,IAAwB,iCAA6C,eAAkB,GAAG,aAAgB,GAAI,2BAC/gB,wBACA,2BACA,mBACA,iBAA+B,SAAI,IAAwB,SAC3D,kBACA,kBACA,cACA,cACA,MACA,kBACA,YACA,WACA,CACA,CAAS,wBAAgC,UAAa,GAAG,MAAS,GAAI,MACtE,CAWA,MAV6B,cAAQ,aACrC,UAAY,GAAQ,EACpB,CAQe,YARH,QAQuB,EAAC,KARxB,GAA4B,EACxC,gCACA,SAAY,cAAwB,EACpC,MAAY,UAAK,CAAC,GAAK,EAAI,8CAAiD,SAAI,CAAC,IAAc,CAAI,oBAAJ,GAAI,CACnG,GAAuB,CAAwB,CAC/C,KACiB,MAAY,EAAG,UAAK,CAAC,UAAQ,EAAI,wBAA2B,SAAI,IAAa,yBAA2C,EAAG,SAAI,IAAa,yBAA2C,EAAG,SAAI,IAA6B,QAAc,GAAI,EAAG,SAAI,CAAC,EAAiB,CAAI,WAAJ,EAAI,iBAAqD,GAAI,CACpV,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/VariantSampleGrid/VariantSampleFilters.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/VariantSampleGrid/VariantSampleGrid.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/variantFieldDescriptions.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/VariantFeatureWidget.js"],"sourcesContent":["import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { TextField, Typography } from '@mui/material';\nexport default function SampleFilters({ columns, filter, setFilter, }) {\n    return (_jsxs(_Fragment, { children: [_jsx(Typography, { children: \"These filters can use a plain text search or regex style query, e.g. in the genotype field, entering 1 will query for all genotypes that include the first alternate allele e.g. 0|1 or 1|1, entering [1-9]\\\\d* will find any non-zero allele e.g. 0|2 or 2/33\" }), columns.map(({ field }) => (_jsx(TextField, { placeholder: `Filter ${field}`, value: filter[field] || '', onChange: event => {\n                    setFilter({ ...filter, [field]: event.target.value });\n                } }, `filter-${field}`)))] }));\n}\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard';\nimport { measureGridWidth } from '@jbrowse/core/util';\nimport { Checkbox, FormControlLabel, Typography } from '@mui/material';\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\nimport SampleFilters from './VariantSampleFilters';\nexport default function VariantSamples(props) {\n    var _a;\n    const { feature, descriptions = {} } = props;\n    const [filter, setFilter] = useState({});\n    const samples = (feature.samples || {});\n    const preFilteredRows = Object.entries(samples);\n    let error;\n    let rows = [];\n    const filters = Object.keys(filter);\n    try {\n        rows = preFilteredRows\n            .map(row => {\n            return {\n                ...Object.fromEntries(Object.entries(row[1]).map(e => [e[0], `${e[1]}`])),\n                sample: row[0],\n                id: row[0],\n            };\n        })\n            .filter(row => filters.length\n            ? filters.every(key => {\n                const currFilter = filter[key];\n                return currFilter\n                    ? new RegExp(currFilter, 'i').exec(row[key])\n                    : true;\n            })\n            : true);\n    }\n    catch (e) {\n        error = e;\n    }\n    const [checked, setChecked] = useState(false);\n    const keys = ['sample', ...Object.keys(((_a = preFilteredRows[0]) === null || _a === void 0 ? void 0 : _a[1]) || {})];\n    const widths = keys.map(e => measureGridWidth(rows.map(r => r[e])));\n    const columns = keys.map((field, index) => {\n        var _a, _b;\n        return ({\n            field,\n            description: (_b = (_a = descriptions === null || descriptions === void 0 ? void 0 : descriptions.FORMAT) === null || _a === void 0 ? void 0 : _a[field]) === null || _b === void 0 ? void 0 : _b.Description,\n            width: widths[index],\n        });\n    });\n    return !preFilteredRows.length ? null : (_jsxs(BaseCard, { ...props, title: \"Samples\", children: [error ? _jsx(Typography, { color: \"error\", children: `${error}` }) : null, _jsx(FormControlLabel, { control: _jsx(Checkbox, { checked: checked, onChange: event => {\n                        setChecked(event.target.checked);\n                    } }), label: _jsx(Typography, { variant: \"body2\", children: \"Show options\" }) }), checked ? (_jsx(SampleFilters, { setFilter: setFilter, columns: columns, filter: filter })) : null, _jsx(\"div\", { style: {\n                    display: 'flex',\n                    flexDirection: 'column',\n                }, children: _jsx(DataGrid, { rows: rows, hideFooter: rows.length < 100, columns: columns, disableRowSelectionOnClick: true, rowHeight: 25, columnHeaderHeight: 35, disableColumnMenu: true, slots: { toolbar: checked ? GridToolbar : null }, slotProps: {\n                        toolbar: {\n                            printOptions: {\n                                disableToolbarButton: true,\n                            },\n                        },\n                    } }) })] }));\n}\n","export const variantFieldDescriptions = {\n    CHROM: 'chromosome: An identifier from the reference genome',\n    POS: 'position: The reference position, with the 1st base having position 1',\n    ID: 'identifier: Semi-colon separated list of unique identifiers where available',\n    REF: 'reference base(s): Each base must be one of A,C,G,T,N (case insensitive).',\n    ALT: 'alternate base(s): Comma-separated list of alternate non-reference alleles',\n    QUAL: 'quality: Phred-scaled quality score for the assertion made in ALT',\n    FILTER: 'filter status: PASS if this position has passed all filters, otherwise a semicolon-separated list of codes for filters that fail',\n};\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Suspense, lazy } from 'react';\nimport { parseBreakend } from '@gmod/vcf';\nimport FeatureDetails from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/FeatureDetails';\nimport { Paper } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport VariantSampleGrid from './VariantSampleGrid/VariantSampleGrid';\nimport { variantFieldDescriptions } from './variantFieldDescriptions';\nconst LaunchBreakendPanel = lazy(() => import('./LaunchBreakendPanel/LaunchBreakendPanel'));\nconst VariantConsequenceDataGrid = lazy(() => import('./VariantConsequenceDataGrid'));\nfunction AnnPanel({ descriptions, feature, }) {\n    var _a, _b, _c, _d, _e;\n    const annDesc = (_b = (_a = descriptions === null || descriptions === void 0 ? void 0 : descriptions.INFO) === null || _a === void 0 ? void 0 : _a.ANN) === null || _b === void 0 ? void 0 : _b.Description;\n    const annFields = ((_d = (_c = annDesc === null || annDesc === void 0 ? void 0 : annDesc.match(/.*Functional annotations:'(.*)'$/)) === null || _c === void 0 ? void 0 : _c[1]) === null || _d === void 0 ? void 0 : _d.split('|')) || [];\n    const ann = ((_e = feature.INFO) === null || _e === void 0 ? void 0 : _e.ANN) || [];\n    return (_jsx(VariantConsequenceDataGrid, { fields: annFields, data: ann, title: \"Variant ANN field\" }));\n}\nfunction CsqPanel({ descriptions, feature, }) {\n    var _a, _b, _c, _d, _e;\n    const csqDescription = (_b = (_a = descriptions === null || descriptions === void 0 ? void 0 : descriptions.INFO) === null || _a === void 0 ? void 0 : _a.CSQ) === null || _b === void 0 ? void 0 : _b.Description;\n    const csqFields = ((_d = (_c = csqDescription === null || csqDescription === void 0 ? void 0 : csqDescription.match(/.*Format: (.*)/)) === null || _c === void 0 ? void 0 : _c[1]) === null || _d === void 0 ? void 0 : _d.split('|')) || [];\n    const csq = ((_e = feature.INFO) === null || _e === void 0 ? void 0 : _e.CSQ) || [];\n    return (_jsx(VariantConsequenceDataGrid, { fields: csqFields, data: csq, title: \"Variant CSQ field\" }));\n}\nfunction LaunchBreakendWidgetArea({ model, }) {\n    const { featureData } = model;\n    const feat = JSON.parse(JSON.stringify(featureData));\n    const { type = '' } = feat;\n    return type === 'breakend' ? (_jsx(LaunchBreakendPanel, { feature: feat, locStrings: feat.ALT.map((alt) => { var _a; return ((_a = parseBreakend(alt)) === null || _a === void 0 ? void 0 : _a.MatePosition) || ''; }), model: model })) : type === 'translocation' ? (_jsx(LaunchBreakendPanel, { feature: feat, model: model, locStrings: [`${feat.INFO.CHR2[0]}:${feat.INFO.END}`] })) : type === 'paired_feature' ? (_jsx(LaunchBreakendPanel, { feature: feat, model: model, locStrings: [`${feat.mate.refName}:${feat.mate.start}`] })) : type.includes('inversion') ||\n        type.includes('deletion') ||\n        type.includes('duplication') ||\n        type.includes('cnv') ||\n        type.includes('sv') ? (_jsx(LaunchBreakendPanel, { feature: {\n            uniqueId: 'random',\n            refName: feat.refName,\n            start: feat.start,\n            end: feat.start + 1,\n            mate: {\n                refName: feat.refName,\n                start: feat.end,\n                end: feat.end + 1,\n            },\n        }, model: model, locStrings: [`${feat.refName}:${feat.end}`] })) : null;\n}\nconst VariantFeatureWidget = observer(function (props) {\n    const { model } = props;\n    const { featureData, descriptions } = model;\n    const feat = JSON.parse(JSON.stringify(featureData));\n    const { samples, ALT, ...rest } = feat;\n    return (_jsxs(Paper, { \"data-testid\": \"variant-side-drawer\", children: [_jsx(FeatureDetails, { feature: rest, descriptions: {\n                    ...variantFieldDescriptions,\n                    ...descriptions,\n                }, ...props }), _jsxs(Suspense, { fallback: null, children: [_jsx(CsqPanel, { feature: rest, descriptions: descriptions }), _jsx(AnnPanel, { feature: rest, descriptions: descriptions }), _jsx(LaunchBreakendWidgetArea, { model: model })] }), _jsx(VariantSampleGrid, { feature: feat, ...props, descriptions: descriptions })] }));\n});\nexport default VariantFeatureWidget;\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2,3]}
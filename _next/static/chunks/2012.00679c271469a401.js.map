{"version":3,"file":"static/chunks/2012.00679c271469a401.js","mappings":"4QAKA,aACA,MAAY,UAAK,QAAU,UAAW,SAAI,CAAC,GAAgB,EAAI,eAAmB,gBAAmB,EAAG,SAAI,CAAC,GAAU,EAAI,yCAA6C,GAAI,CAC5K,CACA,gBACA,MAAW,qBAAe,QAAQ,EAAI,IACtC,CACA,qBAAsB,OAAmB,EACzC,MAAY,SAAI,QAAU,SAAU,SAAI,CAAC,GAAS,EAAI,gBAA6B,EAAG,CACtF,CACe,kBAA2B,gBAAqB,EAC/D,MAAoB,gBAAU,IAC9B,sCACA,MAAkD,cAAQ,IAC1D,MAAkC,cAAQ,KAC1C,MAA8B,cAAQ,GACtC,8BACA,gCACA,wCACA,MAAY,UAAK,CAAC,QAAM,EAAI,+CAAkE,UAAK,CAAC,GAAa,EAAI,YAAoB,SAAI,CAAC,cAAY,EAAI,QAAc,IAAgB,SAAI,KAAmB,OAAW,SAAI,IAAe,2CACjP,iBACA,EAA2B,EAAG,UAAK,IAAe,oEAA8E,UAAY,sBAC5I,iBACA,CAAyB,WAAa,SAAI,CAAC,GAAQ,EAAI,iCAAqC,EAAG,SAAI,CAAC,GAAQ,EAAI,mCAAuC,EAAG,SAAI,CAAC,GAAQ,EAAI,6BAAiC,EAAG,SAAI,CAAC,GAAQ,EAAI,6BAAiC,GAAI,cAAwB,SAAI,IAAe,gEAChT,iBACA,CAAyB,qDAAqE,SAAI,CAAC,GAAQ,EAAI,0CAAoD,KAAU,SAA8B,SAAI,CAAC,GAAgB,EAAI,QAAS,SAAI,CAAC,GAAQ,EAAI,wBAC9P,QACA,EAA+B,uFAA0F,EAAM,SAAI,CAAC,GAAU,EAAI,gGAAkG,GAAK,EAAG,UAAK,CAAC,GAAa,EAAI,UAAW,SAAI,CAAC,GAAM,EAAI,mDAC7S,GACA,CAAyB,mBAAsB,EAAG,SAAI,CAAC,GAAM,EAAI,oEACjE,MACA,UACA,IACA,mBACA,kBACA,WACA,cACA,WACA,CAAiC,EACjC,GACA,CACA,SACA,iBACA,IACA,QACA,CACA,KACA,CACA,CAAyB,mBAAsB,GAAI,GAAI,CACvD","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearGenomeView/components/ExportSvgDialog.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { Dialog, ErrorMessage } from '@jbrowse/core/ui';\nimport { getSession, useLocalStorage } from '@jbrowse/core/util';\nimport { Button, Checkbox, CircularProgress, DialogActions, DialogContent, FormControlLabel, MenuItem, TextField, Typography, } from '@mui/material';\nfunction LoadingMessage() {\n    return (_jsxs(\"div\", { children: [_jsx(CircularProgress, { size: 20, style: { marginRight: 20 } }), _jsx(Typography, { display: \"inline\", children: \"Creating SVG\" })] }));\n}\nfunction useSvgLocal(key, val) {\n    return useLocalStorage(`svg-${key}`, val);\n}\nfunction TextField2({ children, ...rest }) {\n    return (_jsx(\"div\", { children: _jsx(TextField, { ...rest, children: children }) }));\n}\nexport default function ExportSvgDialog({ model, handleClose, }) {\n    const session = getSession(model);\n    const offscreenCanvas = typeof OffscreenCanvas !== 'undefined';\n    const [rasterizeLayers, setRasterizeLayers] = useState(offscreenCanvas);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState();\n    const [filename, setFilename] = useSvgLocal('file', 'jbrowse.svg');\n    const [trackLabels, setTrackLabels] = useSvgLocal('tracklabels', 'offset');\n    const [themeName, setThemeName] = useSvgLocal('theme', session.themeName || 'default');\n    return (_jsxs(Dialog, { open: true, onClose: handleClose, title: \"Export SVG\", children: [_jsxs(DialogContent, { children: [error ? (_jsx(ErrorMessage, { error: error })) : loading ? (_jsx(LoadingMessage, {})) : null, _jsx(TextField2, { helperText: \"filename\", value: filename, onChange: event => {\n                            setFilename(event.target.value);\n                        } }), _jsxs(TextField2, { select: true, label: \"Track label positioning\", variant: \"outlined\", style: { width: 150 }, value: trackLabels, onChange: event => {\n                            setTrackLabels(event.target.value);\n                        }, children: [_jsx(MenuItem, { value: \"offset\", children: \"Offset\" }), _jsx(MenuItem, { value: \"overlay\", children: \"Overlay\" }), _jsx(MenuItem, { value: \"left\", children: \"Left\" }), _jsx(MenuItem, { value: \"none\", children: \"None\" })] }), session.allThemes ? (_jsx(TextField2, { select: true, label: \"Theme\", variant: \"outlined\", value: themeName, onChange: event => {\n                            setThemeName(event.target.value);\n                        }, children: Object.entries(session.allThemes()).map(([key, val]) => (_jsx(MenuItem, { value: key, children: val.name || '(Unknown name)' }, key))) })) : null, offscreenCanvas ? (_jsx(FormControlLabel, { control: _jsx(Checkbox, { checked: rasterizeLayers, onChange: () => {\n                                setRasterizeLayers(val => !val);\n                            } }), label: \"Rasterize canvas based tracks? File may be much larger if this is turned off\" })) : (_jsx(Typography, { children: \"Note: rasterizing layers not yet supported in this browser, so SVG size may be large\" }))] }), _jsxs(DialogActions, { children: [_jsx(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                            handleClose();\n                        }, children: \"Cancel\" }), _jsx(Button, { variant: \"contained\", color: \"primary\", type: \"submit\", onClick: async () => {\n                            setLoading(true);\n                            setError(undefined);\n                            try {\n                                await model.exportSvg({\n                                    rasterizeLayers,\n                                    filename,\n                                    trackLabels,\n                                    themeName,\n                                });\n                                handleClose();\n                            }\n                            catch (e) {\n                                console.error(e);\n                                setError(e);\n                            }\n                            finally {\n                                setLoading(false);\n                            }\n                        }, children: \"Submit\" })] })] }));\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
{"version":3,"file":"static/chunks/6107.917e912e4138912e.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/TextIndexingConfig.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/TrackAdapterSelector.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/TrackTypeSelector.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/ConfirmTrack.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/TrackSourceSelect.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/DefaultAddTrackWorkflow.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/PasteConfigWorkflow.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/AddTrackWidget.js","webpack://_N_E/./node_modules/@mui/icons-material/esm/Delete.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Card, CardContent, IconButton, InputAdornment, InputLabel, List, ListItem, Paper, TextField, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    paper: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: theme.spacing(1),\n    },\n    card: {\n        marginTop: theme.spacing(1),\n    },\n}));\nconst TextIndexingConfig = observer(function ({ model, }) {\n    const { classes } = useStyles();\n    const [value1, setValue1] = useState('');\n    const [value2, setValue2] = useState('');\n    const [attributes, setAttributes] = useState(['Name', 'ID']);\n    const [exclude, setExclude] = useState(['CDS', 'exon']);\n    const sections = [\n        {\n            label: 'Indexing attributes',\n            values: attributes,\n        },\n        {\n            label: 'Feature types to exclude',\n            values: exclude,\n        },\n    ];\n    useEffect(() => {\n        model.setTextIndexingConf({ attributes, exclude });\n    }, [model, attributes, exclude]);\n    return (React.createElement(Paper, { className: classes.paper },\n        React.createElement(InputLabel, null, \"Indexing configuration\"),\n        sections.map((section, index) => (React.createElement(Card, { raised: true, key: section.label, className: classes.card },\n            React.createElement(CardContent, null,\n                React.createElement(InputLabel, null, section.label),\n                React.createElement(List, { disablePadding: true },\n                    section.values.map((val, idx) => (React.createElement(ListItem, { key: `${val}-${idx}`, disableGutters: true },\n                        React.createElement(TextField, { value: val, slotProps: {\n                                input: {\n                                    endAdornment: (React.createElement(InputAdornment, { position: \"end\" },\n                                        React.createElement(IconButton, { onClick: () => {\n                                                const newAttr = section.values.filter((_, i) => i !== idx);\n                                                if (index === 0) {\n                                                    setAttributes(newAttr);\n                                                }\n                                                else {\n                                                    setExclude(newAttr);\n                                                }\n                                            } },\n                                            React.createElement(DeleteIcon, null)))),\n                                },\n                            } })))),\n                    React.createElement(ListItem, { disableGutters: true },\n                        React.createElement(TextField, { value: index === 0 ? value1 : value2, placeholder: \"add new\", onChange: event => {\n                                if (index === 0) {\n                                    setValue1(event.target.value);\n                                }\n                                else {\n                                    setValue2(event.target.value);\n                                }\n                            }, slotProps: {\n                                input: {\n                                    endAdornment: (React.createElement(InputAdornment, { position: \"end\" },\n                                        React.createElement(IconButton, { onClick: () => {\n                                                if (index === 0) {\n                                                    setAttributes([...attributes, value1]);\n                                                    setValue1('');\n                                                }\n                                                else {\n                                                    setExclude([...exclude, value2]);\n                                                    setValue2('');\n                                                }\n                                            }, disabled: index === 0 ? value1 === '' : value2 === '', \"data-testid\": \"stringArrayAdd-Feat\" },\n                                            React.createElement(AddIcon, null)))),\n                                },\n                            } })))))))));\n});\nexport default TextIndexingConfig;\n","import React from 'react';\nimport { getEnv } from '@jbrowse/core/util';\nimport { ListSubheader, MenuItem, TextField } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    spacing: {\n        marginBottom: theme.spacing(3),\n    },\n}));\nfunction categorizeAdapters(adaptersList) {\n    const map = {};\n    adaptersList.forEach(adapter => {\n        var _a;\n        const key = ((_a = adapter.adapterMetadata) === null || _a === void 0 ? void 0 : _a.category) || 'Default';\n        if (!map[key]) {\n            map[key] = [];\n        }\n        map[key].push(adapter);\n    });\n    return map;\n}\nconst TrackAdapterSelector = observer(({ model }) => {\n    const { classes } = useStyles();\n    const { trackAdapter } = model;\n    const { pluginManager } = getEnv(model);\n    return (React.createElement(TextField, { className: classes.spacing, value: (trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type) !== 'UNKNOWN' ? trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type : '', label: \"Adapter type\", variant: \"outlined\", helperText: \"Select an adapter type\", select: true, fullWidth: true, onChange: event => {\n            model.setAdapterHint(event.target.value);\n        }, slotProps: {\n            select: {\n                SelectDisplayProps: { 'data-testid': 'adapterTypeSelect' },\n            },\n        } }, Object.entries(categorizeAdapters(pluginManager\n        .getAdapterElements()\n        .filter(e => { var _a; return !((_a = e.adapterMetadata) === null || _a === void 0 ? void 0 : _a.hiddenFromGUI); }))).map(([key, val]) => {\n        return [\n            React.createElement(ListSubheader, { key: key }, key),\n            val.map(elt => (React.createElement(MenuItem, { key: elt.name, value: elt.name }, elt.displayName))),\n        ];\n    })));\n});\nexport default TrackAdapterSelector;\n","import React from 'react';\nimport { getEnv } from '@jbrowse/core/util';\nimport { MenuItem, TextField } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    spacing: {\n        marginBottom: theme.spacing(3),\n    },\n}));\nconst TrackTypeSelector = observer(({ model }) => {\n    const { classes } = useStyles();\n    const { pluginManager } = getEnv(model);\n    const { trackType } = model;\n    const trackTypes = pluginManager.getTrackElements();\n    return (React.createElement(TextField, { className: classes.spacing, value: trackType, variant: \"outlined\", label: \"Track type\", helperText: \"Select track type\", select: true, fullWidth: true, onChange: event => {\n            model.setTrackType(event.target.value);\n        }, slotProps: {\n            select: {\n                SelectDisplayProps: { 'data-testid': 'trackTypeSelect' },\n            },\n        } }, trackTypes.map(({ name, displayName }) => (React.createElement(MenuItem, { key: name, value: name }, displayName)))));\n});\nexport default TrackTypeSelector;\n","import React, { useEffect, useState } from 'react';\nimport { AssemblySelector } from '@jbrowse/core/ui';\nimport { getSession, isElectron, isSupportedIndexingAdapter, } from '@jbrowse/core/util';\nimport { UNKNOWN } from '@jbrowse/core/util/tracks';\nimport { Checkbox, FormControl, FormControlLabel, Link, TextField, Typography, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nimport TextIndexingConfig from './TextIndexingConfig';\nimport TrackAdapterSelector from './TrackAdapterSelector';\nimport TrackTypeSelector from './TrackTypeSelector';\nconst useStyles = makeStyles()(theme => ({\n    spacing: {\n        marginBottom: theme.spacing(3),\n    },\n}));\nfunction StatusMessage({ trackAdapter, trackType, }) {\n    const { classes } = useStyles();\n    const { type, subadapter } = trackAdapter;\n    return type === 'SNPCoverageAdapter' ? (React.createElement(Typography, { className: classes.spacing },\n        \"Selected \",\n        React.createElement(\"code\", null, trackType),\n        \". Using adapter \",\n        React.createElement(\"code\", null, type),\n        \" with subadapter \",\n        React.createElement(\"code\", null, subadapter === null || subadapter === void 0 ? void 0 : subadapter.type),\n        \". Please enter a track name and, if necessary, update the track type.\")) : (React.createElement(Typography, { className: classes.spacing },\n        \"Using adapter \",\n        React.createElement(\"code\", null, type),\n        \" and guessing track type\",\n        ' ',\n        React.createElement(\"code\", null, trackType),\n        \". Please enter a track name and, if necessary, update the track type.\"));\n}\nfunction UnknownAdapterPrompt({ model }) {\n    const { classes } = useStyles();\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Typography, { className: classes.spacing },\n            \"JBrowse was not able to guess the adapter type for this data, but it may be in the list below. If not, you can\",\n            ' ',\n            React.createElement(Link, { href: \"https://github.com/GMOD/jbrowse-components/releases\", target: \"_blank\", rel: \"noopener noreferrer\" }, \"check for new releases\"),\n            ' ',\n            \"of JBrowse to see if they support this data type or\",\n            ' ',\n            React.createElement(Link, { href: \"https://github.com/GMOD/jbrowse-components/issues/new\", target: \"_blank\", rel: \"noopener noreferrer\" }, \"file an issue\"),\n            ' ',\n            \"and add a feature request for this data type.\"),\n        React.createElement(TrackAdapterSelector, { model: model })));\n}\nconst ConfirmTrack = observer(function ConfirmTrack({ model, }) {\n    const { classes } = useStyles();\n    const [check, setCheck] = useState(true);\n    const session = getSession(model);\n    const { trackName, unsupported, trackAdapter, trackType, warningMessage, adapterHint, } = model;\n    useEffect(() => {\n        if (adapterHint === '' && trackAdapter) {\n            model.setAdapterHint(trackAdapter.type);\n        }\n    }, [adapterHint, trackAdapter, trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type, model]);\n    if (unsupported) {\n        return (React.createElement(Typography, { className: classes.spacing },\n            \"This version of JBrowse cannot display data of this type. It is possible, however, that there is a newer version that can display them. You can\",\n            ' ',\n            React.createElement(Link, { href: \"https://github.com/GMOD/jbrowse-components/releases\", target: \"_blank\", rel: \"noopener noreferrer\" }, \"check for new releases\"),\n            ' ',\n            \"of JBrowse or\",\n            ' ',\n            React.createElement(Link, { href: \"https://github.com/GMOD/jbrowse-components/issues/new\", target: \"_blank\", rel: \"noopener noreferrer\" }, \"file an issue\"),\n            ' ',\n            \"and add a feature request for this data type.\"));\n    }\n    if ((trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type) === UNKNOWN) {\n        return React.createElement(UnknownAdapterPrompt, { model: model });\n    }\n    if (!(trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type)) {\n        return React.createElement(Typography, null, \"Could not recognize this data type.\");\n    }\n    const supportedForIndexing = isSupportedIndexingAdapter(trackAdapter.type);\n    return (React.createElement(\"div\", null,\n        React.createElement(StatusMessage, { trackAdapter: trackAdapter, trackType: trackType }),\n        warningMessage ? (React.createElement(Typography, { style: { color: 'orange' } }, warningMessage)) : null,\n        React.createElement(TextField, { className: classes.spacing, label: \"trackName\", helperText: \"A name for this track\", fullWidth: true, value: trackName, onChange: event => {\n                model.setTrackName(event.target.value);\n            }, slotProps: {\n                htmlInput: { 'data-testid': 'trackNameInput' },\n            } }),\n        React.createElement(TrackAdapterSelector, { model: model }),\n        React.createElement(TrackTypeSelector, { model: model }),\n        React.createElement(AssemblySelector, { session: session, helperText: \"Select assembly to add track to\", selected: model.assembly, onChange: asm => {\n                model.setAssembly(asm);\n            }, TextFieldProps: {\n                fullWidth: true,\n                SelectProps: {\n                    SelectDisplayProps: { 'data-testid': 'assemblyNameSelect' },\n                },\n            } }),\n        isElectron && supportedForIndexing && (React.createElement(FormControl, null,\n            React.createElement(FormControlLabel, { label: 'Index track for text searching?', control: React.createElement(Checkbox, { checked: check, onChange: e => {\n                        setCheck(e.target.checked);\n                        model.setTextIndexTrack(e.target.checked);\n                    } }) }))),\n        isElectron && check && supportedForIndexing ? (React.createElement(TextIndexingConfig, { model: model })) : null));\n});\nexport default ConfirmTrack;\n","import React from 'react';\nimport { FileSelector } from '@jbrowse/core/ui';\nimport { Paper } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { getRoot } from 'mobx-state-tree';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    paper: {\n        padding: theme.spacing(2),\n    },\n    spacer: {\n        height: theme.spacing(8),\n    },\n}));\nconst TrackSourceSelect = observer(function ({ model, }) {\n    const { classes } = useStyles();\n    const rootModel = getRoot(model);\n    return (React.createElement(Paper, { className: classes.paper },\n        React.createElement(FileSelector, { name: \"Main file\", description: \"\", location: model.trackData, setLocation: model.setTrackData, setName: model.setTrackName, rootModel: rootModel }),\n        React.createElement(\"div\", { className: classes.spacer }),\n        React.createElement(FileSelector, { name: \"Index file\", description: \"(Optional) The URL of the index file is automatically inferred from the URL of the main file if it is not supplied.\", location: model.indexTrackData, setLocation: model.setIndexTrackData, setName: model.setTrackName, rootModel: rootModel })));\n});\nexport default TrackSourceSelect;\n","import React, { useState } from 'react';\nimport { getConf } from '@jbrowse/core/configuration';\nimport { getSession, isElectron, isSessionModelWithWidgets, isSessionWithAddTracks, isSupportedIndexingAdapter, } from '@jbrowse/core/util';\nimport { Alert, Button, Step, StepContent, StepLabel, Stepper, Typography, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { getRoot } from 'mobx-state-tree';\nimport { makeStyles } from 'tss-react/mui';\nimport ConfirmTrack from './ConfirmTrack';\nimport TrackSourceSelect from './TrackSourceSelect';\nconst useStyles = makeStyles()(theme => ({\n    root: {\n        marginTop: theme.spacing(1),\n    },\n    stepper: {\n        backgroundColor: theme.palette.background.default,\n    },\n    button: {\n        marginRight: theme.spacing(1),\n    },\n    actionsContainer: {\n        marginTop: theme.spacing(10),\n        marginBottom: theme.spacing(2),\n    },\n    alertContainer: {\n        padding: `${theme.spacing(2)}px 0px ${theme.spacing(2)}px 0px`,\n    },\n}));\nconst steps = ['Enter track data', 'Confirm track type'];\nconst DefaultAddTrackWorkflow = observer(function ({ model, }) {\n    const [activeStep, setActiveStep] = useState(0);\n    const { classes } = useStyles();\n    const { jobsManager } = getRoot(model);\n    const session = getSession(model);\n    const { assembly, trackAdapter, trackData, trackName, trackType, textIndexTrack, textIndexingConf, } = model;\n    const [trackErrorMessage, setTrackErrorMessage] = useState();\n    function getStepContent(step) {\n        switch (step) {\n            case 0:\n                return React.createElement(TrackSourceSelect, { model: model });\n            case 1:\n                return React.createElement(ConfirmTrack, { model: model });\n            default:\n                return React.createElement(Typography, null, \"Unknown step\");\n        }\n    }\n    async function handleNext() {\n        var _a, _b;\n        if (activeStep !== steps.length - 1) {\n            setActiveStep(activeStep + 1);\n            return;\n        }\n        const trackId = [\n            `${trackName.toLowerCase().replaceAll(' ', '_')}-${Date.now()}`,\n            session.adminMode ? '' : '-sessionTrack',\n        ].join('');\n        const assemblyInstance = session.assemblyManager.get(assembly);\n        if (!isSessionWithAddTracks(session)) {\n            setTrackErrorMessage('Unable to add tracks to this model');\n            return;\n        }\n        if (assemblyInstance && trackAdapter && trackAdapter.type !== 'UNKNOWN') {\n            session.addTrackConf({\n                trackId,\n                type: trackType,\n                name: trackName,\n                assemblyNames: [assembly],\n                adapter: {\n                    ...trackAdapter,\n                    sequenceAdapter: getConf(assemblyInstance, ['sequence', 'adapter']),\n                },\n            });\n            (_b = (_a = model.view).showTrack) === null || _b === void 0 ? void 0 : _b.call(_a, trackId);\n            if (isElectron &&\n                textIndexTrack &&\n                isSupportedIndexingAdapter(trackAdapter.type)) {\n                const attr = textIndexingConf || {\n                    attributes: ['Name', 'ID'],\n                    exclude: ['CDS', 'exon'],\n                };\n                const indexName = `${trackName}-index`;\n                const newEntry = {\n                    indexingParams: {\n                        ...attr,\n                        assemblies: [assembly],\n                        tracks: [trackId],\n                        indexType: 'perTrack',\n                        name: indexName,\n                        timestamp: new Date().toISOString(),\n                    },\n                    name: indexName,\n                    cancelCallback: () => jobsManager.abortJob(),\n                };\n                jobsManager.queueJob(newEntry);\n            }\n            model.clearData();\n            if (isSessionModelWithWidgets(session)) {\n                session.hideWidget(model);\n            }\n        }\n        else {\n            setTrackErrorMessage('Failed to add track.\\nThe configuration of this file is not currently supported.');\n        }\n    }\n    function isNextDisabled() {\n        switch (activeStep) {\n            case 0:\n                return !trackData;\n            case 1:\n                return !(trackName && trackType && (trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type) && assembly);\n            default:\n                return true;\n        }\n    }\n    return (React.createElement(\"div\", { className: classes.root },\n        React.createElement(Stepper, { className: classes.stepper, activeStep: activeStep, orientation: \"vertical\" }, steps.map((label, idx) => (React.createElement(Step, { key: label },\n            React.createElement(StepLabel, null, label),\n            React.createElement(StepContent, null,\n                getStepContent(idx),\n                React.createElement(\"div\", { className: classes.actionsContainer },\n                    React.createElement(Button, { disabled: activeStep === 0, onClick: () => {\n                            setTrackErrorMessage(undefined);\n                            setActiveStep(activeStep - 1);\n                        }, className: classes.button }, \"Back\"),\n                    React.createElement(Button, { disabled: isNextDisabled(), variant: \"contained\", color: \"primary\", onClick: handleNext, className: classes.button, \"data-testid\": \"addTrackNextButton\" }, activeStep === steps.length - 1 ? 'Add' : 'Next')),\n                trackErrorMessage ? (React.createElement(\"div\", { className: classes.alertContainer },\n                    React.createElement(Alert, { severity: \"error\" }, trackErrorMessage))) : null)))))));\n});\nexport default DefaultAddTrackWorkflow;\n","import React, { useState } from 'react';\nimport { ErrorMessage } from '@jbrowse/core/ui';\nimport { getSession, isSessionModelWithWidgets, isSessionWithAddTracks, } from '@jbrowse/core/util';\nimport { Button, TextField } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()({\n    textbox: {\n        width: '100%',\n    },\n    submit: {\n        marginTop: 25,\n        marginBottom: 100,\n        display: 'block',\n    },\n});\nconst PasteConfigAddTrackWorkflow = observer(function ({ model, }) {\n    const { classes } = useStyles();\n    const [val, setVal] = useState('');\n    const [error, setError] = useState();\n    return (React.createElement(\"div\", null,\n        error ? React.createElement(ErrorMessage, { error: error }) : null,\n        React.createElement(TextField, { multiline: true, rows: 10, value: val, onChange: event => {\n                setVal(event.target.value);\n            }, placeholder: 'Paste track config or array of track configs in JSON format', variant: \"outlined\", className: classes.textbox }),\n        React.createElement(Button, { variant: \"contained\", className: classes.submit, onClick: () => {\n                try {\n                    setError(undefined);\n                    const session = getSession(model);\n                    const conf = JSON.parse(val);\n                    const confs = Array.isArray(conf) ? conf : [conf];\n                    if (isSessionWithAddTracks(session) &&\n                        isSessionModelWithWidgets(session)) {\n                        confs.forEach(c => {\n                            session.addTrackConf(c);\n                        });\n                        confs.forEach(c => model.view.showTrack(c.trackId));\n                        model.clearData();\n                        session.hideWidget(model);\n                    }\n                }\n                catch (e) {\n                    console.error(e);\n                    setError(e);\n                }\n            } }, \"Submit\")));\n});\nexport default PasteConfigAddTrackWorkflow;\n","import React, { Suspense, useState } from 'react';\nimport { getEnv } from '@jbrowse/core/util';\nimport { FormControl, FormHelperText, MenuItem, Select } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport DefaultAddTrackWorkflow from './DefaultAddTrackWorkflow';\nimport PasteConfigWorkflow from './PasteConfigWorkflow';\nconst AddTrackSelector = observer(function ({ model, }) {\n    const [val, setVal] = useState('Default add track workflow');\n    const ComponentMap = {\n        'Default add track workflow': DefaultAddTrackWorkflow,\n        'Add track JSON': PasteConfigWorkflow,\n        ...Object.fromEntries(getEnv(model)\n            .pluginManager.getAddTrackWorkflowElements()\n            .map(w => [w.name, w.ReactComponent])),\n    };\n    const val2 = ComponentMap[val] ? val : 'Default add track workflow';\n    const Component = ComponentMap[val2];\n    return (React.createElement(React.Fragment, null,\n        React.createElement(FormControl, null,\n            React.createElement(Select, { value: val2, onChange: event => {\n                    setVal(event.target.value);\n                } }, Object.keys(ComponentMap).map(e => (React.createElement(MenuItem, { key: e, value: e }, e)))),\n            React.createElement(FormHelperText, null, \"Type of add track workflow\")),\n        React.createElement(Suspense, { fallback: null },\n            React.createElement(Component, { model: model }))));\n});\nexport default AddTrackSelector;\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');"],"names":["createSvgIcon","_jsx","d"],"sourceRoot":"","ignoreList":[0,1,2,3,4,5,6,7,8]}
{"version":3,"file":"static/chunks/5267.6bb34206339de1bd.js","mappings":"2OAKA,MAAwB,cAAQ,4BAAa,uCAAsD,EACnG,MAAY,SAAI,CAAC,GAAS,EAAI,mGAC9B,iBACA,CAAS,mBAAqC,SAAI,CAAC,GAAQ,EAAI,mBAA2B,KAAU,CACpG,CAAC,EACD,EAAmC,cAAQ,WAAa,mCAAkC,EAC1F,MAAY,UAAK,CAAC,UAAS,EAAI,UAAW,SAAI,CAAC,GAAK,EAAI,0BAA8B,UAAY,0FAA6F,EAAG,SAAI,QAAU,SAAU,SAAI,CAAC,cAAY,EAAI,0DAC/O,IACA,EAAuB,EAAG,GAAI,CAC9B,CAAC,EACD,EAAiC,cAAQ,yBAAa,oDAA+D,EACrH,MAAY,UAAK,CAAC,UAAS,EAAI,UAAW,SAAI,QAAU,SAAU,SAAI,CAAC,cAAY,EAAI,0DACvF,IACA,EAAuB,EAAG,EAAG,SAAI,QAAU,SAAU,SAAI,CAAC,cAAY,EAAI,wDAC1E,IACA,EAAuB,EAAG,GAAI,CAC9B,CAAC,EACD,EAA+B,cAAQ,yBAAa,mFAA4F,EAChJ,MAAY,UAAK,CAAC,UAAS,EAAI,UAAW,SAAI,QAAU,SAAU,SAAI,CAAC,cAAY,EAAI,0DACvF,IACA,EAAuB,EAAG,EAAG,SAAI,QAAU,SAAU,SAAI,CAAC,cAAY,EAAI,wDAC1E,IACA,EAAuB,EAAG,EAAG,SAAI,QAAU,SAAU,SAAI,CAAC,cAAY,EAAI,wDAC1E,IACA,EAAuB,EAAG,GAAI,CAC9B,CAAC,EACD,EAA2B,cAAQ,0BAAa,mEAA+E,EAC/H,MAAY,UAAK,CAAC,UAAS,EAAI,UAAW,SAAI,QAAU,SAAU,SAAI,CAAC,cAAY,EAAI,2DACvF,IACA,EAAuB,EAAG,EAAG,SAAI,QAAU,SAAU,SAAI,CAAC,cAAY,EAAI,yIAC1E,IACA,EAAuB,EAAG,GAAI,CAC9B,CAAC,EACD,GAAgB,QAChB,GACA,sBACA,oBACA,wBACA,gBACA,CACA,EAAwB,cAAQ,mBAAa,YAAmB,EAChE,SAA4C,cAAQ,KACpD,MAA0D,cAAQ,KAClE,MAAoD,cAAQ,OAC5D,MAA8C,cAAQ,IACtD,MAA0C,cAAQ,IAClD,MAA0C,cAAQ,IAClD,MAAgD,cAAQ,IACxD,MAAwD,cAAQ,IAChE,MAAY,UAAK,CAAC,UAAS,EAAI,UAAW,UAAK,CAAC,GAAa,EAAI,UAAW,SAAI,CAAC,GAAS,EAAI,0HAC9F,iBACA,CAAyB,YACzB,WAAyC,8BAAgC,CACzE,CAA2B,EAAG,SAAI,CAAC,GAAS,EAAI,2LAChD,iBACA,CAAyB,YACzB,WACA,qCACA,CAA6B,CAC7B,CAA2B,EAAG,SAAI,IAAoB,wDAA0G,4BAAiD,SAAI,IAA6B,kEAA4H,8BAAqD,SAAI,IAA+B,mCAAkE,sBAA6C,SAAI,IAAuB,kFAA4J,EAAM,SAAI,IAA2B,iGAAsL,GAAK,EAAG,UAAK,CAAC,GAAa,EAAI,UAAW,SAAI,CAAC,GAAM,EAAI,iDAChgC,OACA,qDAGA,IACA,eACA,OACA,cACA,UACA,8BACA,WAAoD,EAAa,GAAG,kBAAkB,EACtF,kCACA,CACA,2BACA,gBACA,aACA,EACA,wBACA,CACA,yBACA,gBACA,cACA,aACA,EACA,4BACA,CACA,6BACA,eACA,EACA,CACA,qBACA,iBACA,oBACA,CAAqD,CAChB,CACJ,EACjC,mBAAyD,EAAa,cAEtE,CAAyB,mBAAsB,EAAG,SAAI,CAAC,GAAM,EAAI,mDACjE,GACA,CAAyB,mBAAsB,GAAI,GAAI,CACvD,CAAC,iBCrGD,MAAkB,uBAAU,IAC5B,WACA,gBACA,aACA,CAAK,CACJ,EACD,EAAuB,cAAQ,oBAAa,YAAoB,EAChE,YAAY,GAAU,IACtB,MAAY,UAAK,CAAC,UAAS,EAAI,UAAW,SAAI,CAAC,GAAa,EAAI,SAAU,SAAI,QAAU,iCAAoD,SAAI,CAAC,GAAmB,EAAI,OAAS,UAAoB,EAAM,SAAI,QAAU,uBAAyB,EAAI,EAAG,EAAG,SAAI,CAAC,GAAa,EAAI,SAAU,SAAI,CAAC,GAAM,EAAI,iCAC3S,GACA,CAAqB,iBAAoB,EAAG,GAAI,CAChD,CAAC,4BCZD,MAAeA,CAAAA,EAAAA,SAAAA,CAAAA,CAAaA,CAAC,CAAaC,EAAAA,EAAAA,GAAAA,CAAIA,CAAC,CAAP,MAAe,CACrDC,EAAG,kIACL,GAAI,SAAS,EAAC,oCCEd,MAAsB,cAAQ,0BAAa,sCAAkD,EAC7F,MAAY,UAAK,CAAC,UAAS,EAAI,UAAW,SAAI,CAAC,GAAa,EAAI,SAAU,SAAI,QAAU,OAAS,sCAA0C,UAAY,SAAI,CAAC,GAAQ,EAAI,gGACxK,GAAgC,oBAAc,WAC9C,KAAkC,oBAAc,WAChD,YAAyC,oBAAc,kBACvD,QAAqC,oBAAc,cACnD,UACA,EAAyB,WACzB,CAA8B,aAAe,CAC7C,CAA8B,oBAAsB,CACpD,CAA8B,gBAAkB,CAChD,CACA,gBACA,aAA+C,MAAK,IACpD,aAA4C,UAAiB,EAC7D,qCAEA,YACA,MAA4C,UAAK,CAAC,UAAS,EAAI,UAAW,SAAI,CAAC,GAAU,EAAI,yBAC7F,IACA,CAAiD,UAAY,SAAI,CAAC,EAAU,EAAI,EAAG,EAAG,SAAI,CAAC,GAAU,EAAI,iBAAkB,EAAK,kCAChI,IACA,iBAIA,oBAHA,mDAMA,CAAiD,UAAY,SAAI,CAAC,GAAU,GAAI,EAAG,GAAI,CACvF,CAAiC,CACJ,CAC7B,CAA2B,EAAG,EAAG,EAAG,UAAK,CAAC,GAAa,EAAI,UAAW,SAAI,CAAC,GAAM,EAAI,mDACrF,GACA,CAAyB,kBAAqB,EAAG,SAAI,CAAC,GAAM,EAAI,8BAAiC,SAAI,CAAC,GAAO,GAAI,eACjH,GACA,CAAyB,6BAAgC,GAAI,GAAI,CACjE,CAAC,ECrBD,EAjBwB,cAAQ,WAAa,QAiB9B,CAjB8B,WAAmB,EAChE,CAgB8B,EAhB9B,MAAsC,cAAQ,KAC9C,MAAkD,cAAQ,GAC1D,MAAY,SAAI,CAAC,QAAM,EAAI,8CAC3B,GACA,CAAS,YAA+B,SAAI,CAAC,EAAc,CAAI,aHKjC,MGLiC,KAC/D,GAD2D,IAC3D,EACA,EAAe,IAAmB,SAAI,CAAC,EAAe,CAAI,YJ6F5B,EAAC,II7F2B,KAC1D,KACA,EAAe,EAAM,SAAI,CAAC,EAAa,CAAI,UD8Bf,EAAC,MC9Bc,KAC3C,GACA,CAAa,oBACb,KACA,CAAa,oBACb,IACA,EAAe,EAAI,CACnB,CAAC,8DEnBD,MAAeF,CAAAA,EAAAA,EAAAA,CAAAA,CAAaA,CAAC,CAAaC,EAAAA,EAAAA,GAAAA,CAAIA,CAAC,CAAP,MAAe,CACrDC,EAAG,0EACL,GAAI,SAAS,EAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AssemblyManager/AssemblyAddForm.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AssemblyManager/AssemblyEditor.js","webpack://_N_E/./node_modules/@mui/icons-material/esm/Create.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AssemblyManager/AssemblyTable.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AssemblyManager/AssemblyManager.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AssemblyManager/index.js","webpack://_N_E/./node_modules/@mui/icons-material/esm/Delete.js"],"sourcesContent":["import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { FileSelector } from '@jbrowse/core/ui';\nimport { Alert, Button, DialogActions, DialogContent, MenuItem, TextField, } from '@mui/material';\nimport { observer } from 'mobx-react';\nconst AdapterSelector = observer(function ({ adapterSelection, setAdapterSelection, adapterTypes, }) {\n    return (_jsx(TextField, { value: adapterSelection, variant: \"outlined\", select: true, helperText: \"Type of adapter to use\", fullWidth: true, onChange: event => {\n            setAdapterSelection(event.target.value);\n        }, children: adapterTypes.map(str => (_jsx(MenuItem, { value: str, children: str }, str))) }));\n});\nconst UnindexedFastaAdapterInput = observer(function ({ fastaLocation, setFastaLocation, }) {\n    return (_jsxs(_Fragment, { children: [_jsx(Alert, { severity: \"warning\", style: { margin: 30 }, children: \"Note: use only relatively small files for this type, it is loaded into memory\" }), _jsx(\"div\", { children: _jsx(FileSelector, { inline: true, name: \"fastaLocation\", location: fastaLocation, setLocation: loc => {\n                        setFastaLocation(loc);\n                    } }) })] }));\n});\nconst IndexedFastaAdapterInput = observer(function ({ fastaLocation, faiLocation, setFaiLocation, setFastaLocation, }) {\n    return (_jsxs(_Fragment, { children: [_jsx(\"div\", { children: _jsx(FileSelector, { inline: true, name: \"fastaLocation\", location: fastaLocation, setLocation: loc => {\n                        setFastaLocation(loc);\n                    } }) }), _jsx(\"div\", { children: _jsx(FileSelector, { inline: true, name: \"faiLocation\", location: faiLocation, setLocation: loc => {\n                        setFaiLocation(loc);\n                    } }) })] }));\n});\nconst BgzipFastaAdapterInput = observer(function ({ fastaLocation, faiLocation, gziLocation, setFaiLocation, setGziLocation, setFastaLocation, }) {\n    return (_jsxs(_Fragment, { children: [_jsx(\"div\", { children: _jsx(FileSelector, { inline: true, name: \"fastaLocation\", location: fastaLocation, setLocation: loc => {\n                        setFastaLocation(loc);\n                    } }) }), _jsx(\"div\", { children: _jsx(FileSelector, { inline: true, name: \"faiLocation\", location: faiLocation, setLocation: loc => {\n                        setFaiLocation(loc);\n                    } }) }), _jsx(\"div\", { children: _jsx(FileSelector, { inline: true, name: \"gziLocation\", location: gziLocation, setLocation: loc => {\n                        setGziLocation(loc);\n                    } }) })] }));\n});\nconst TwoBitAdapterInput = observer(function ({ twoBitLocation, chromSizesLocation, setTwoBitLocation, setChromSizesLocation, }) {\n    return (_jsxs(_Fragment, { children: [_jsx(\"div\", { children: _jsx(FileSelector, { inline: true, name: \"twoBitLocation\", location: twoBitLocation, setLocation: loc => {\n                        setTwoBitLocation(loc);\n                    } }) }), _jsx(\"div\", { children: _jsx(FileSelector, { inline: true, name: \"chromSizesLocation (optional, can be added to speed up loading 2bit files with many contigs)\", location: chromSizesLocation, setLocation: loc => {\n                        setChromSizesLocation(loc);\n                    } }) })] }));\n});\nconst blank = { uri: '' };\nconst adapterTypes = [\n    'IndexedFastaAdapter',\n    'BgzipFastaAdapter',\n    'UnindexedFastaAdapter',\n    'TwoBitAdapter',\n];\nconst AssemblyAddForm = observer(function ({ session, onClose, }) {\n    const [assemblyName, setAssemblyName] = useState('');\n    const [assemblyDisplayName, setAssemblyDisplayName] = useState('');\n    const [adapterSelection, setAdapterSelection] = useState(adapterTypes[0]);\n    const [fastaLocation, setFastaLocation] = useState(blank);\n    const [faiLocation, setFaiLocation] = useState(blank);\n    const [gziLocation, setGziLocation] = useState(blank);\n    const [twoBitLocation, setTwoBitLocation] = useState(blank);\n    const [chromSizesLocation, setChromSizesLocation] = useState(blank);\n    return (_jsxs(_Fragment, { children: [_jsxs(DialogContent, { children: [_jsx(TextField, { id: \"assembly-name\", label: \"Assembly name\", helperText: \"The assembly name e.g. hg38\", variant: \"outlined\", value: assemblyName, onChange: event => {\n                            setAssemblyName(event.target.value);\n                        }, slotProps: {\n                            htmlInput: { 'data-testid': 'assembly-name' },\n                        } }), _jsx(TextField, { id: \"assembly-name\", label: \"Assembly display name\", helperText: '(optional) A human readable display name for the assembly e.g. \"Homo sapiens (hg38)\"', variant: \"outlined\", value: assemblyDisplayName, onChange: event => {\n                            setAssemblyDisplayName(event.target.value);\n                        }, slotProps: {\n                            htmlInput: {\n                                'data-testid': 'assembly-display-name',\n                            },\n                        } }), _jsx(AdapterSelector, { adapterSelection: adapterSelection, adapterTypes: adapterTypes, setAdapterSelection: setAdapterSelection }), adapterSelection === 'IndexedFastaAdapter' ? (_jsx(IndexedFastaAdapterInput, { fastaLocation: fastaLocation, faiLocation: faiLocation, setFaiLocation: setFaiLocation, setFastaLocation: setFastaLocation })) : adapterSelection === 'UnindexedFastaAdapter' ? (_jsx(UnindexedFastaAdapterInput, { fastaLocation: fastaLocation, setFastaLocation: setFastaLocation })) : adapterSelection === 'TwoBitAdapter' ? (_jsx(TwoBitAdapterInput, { twoBitLocation: twoBitLocation, chromSizesLocation: chromSizesLocation, setTwoBitLocation: setTwoBitLocation, setChromSizesLocation: setChromSizesLocation })) : (_jsx(BgzipFastaAdapterInput, { fastaLocation: fastaLocation, gziLocation: gziLocation, faiLocation: faiLocation, setFaiLocation: setFaiLocation, setGziLocation: setGziLocation, setFastaLocation: setFastaLocation }))] }), _jsxs(DialogActions, { children: [_jsx(Button, { variant: \"contained\", color: \"primary\", onClick: () => {\n                            if (assemblyName === '') {\n                                session.notify(\"Can't create an assembly without a name\");\n                            }\n                            else {\n                                onClose();\n                                session.addAssembly({\n                                    name: assemblyName,\n                                    displayName: assemblyDisplayName,\n                                    sequence: {\n                                        type: 'ReferenceSequenceTrack',\n                                        trackId: `${assemblyName}-${performance.now()}`,\n                                        adapter: adapterSelection === 'IndexedFastaAdapter'\n                                            ? {\n                                                type: 'IndexedFastaAdapter',\n                                                fastaLocation,\n                                                faiLocation,\n                                            }\n                                            : adapterSelection === 'BgzipFastaAdapter'\n                                                ? {\n                                                    type: 'BgzipFastaAdapter',\n                                                    fastaLocation,\n                                                    faiLocation,\n                                                    gziLocation,\n                                                }\n                                                : adapterSelection === 'UnindexedFastaAdapter'\n                                                    ? {\n                                                        type: 'UnindexedFastaAdapter',\n                                                        fastaLocation,\n                                                    }\n                                                    : {\n                                                        type: 'TwoBitAdapter',\n                                                        twoBitLocation,\n                                                        chromSizesLocation,\n                                                    },\n                                    },\n                                });\n                                session.notify(`Added \"${assemblyName}\"`, 'success');\n                            }\n                        }, children: \"Submit\" }), _jsx(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                            onClose();\n                        }, children: \"Cancel\" })] })] }));\n});\nexport default AssemblyAddForm;\n","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { ConfigurationEditor } from '@jbrowse/plugin-config';\nimport { Button, DialogActions, DialogContent } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()({\n    container: {\n        overflow: 'auto',\n        maxHeight: 600,\n    },\n});\nconst AssemblyEditor = observer(function ({ assembly, onClose, }) {\n    const { classes } = useStyles();\n    return (_jsxs(_Fragment, { children: [_jsx(DialogContent, { children: _jsx(\"div\", { className: classes.container, children: assembly ? (_jsx(ConfigurationEditor, { model: { target: assembly } })) : (_jsx(\"div\", { children: \"No assembly\" })) }) }), _jsx(DialogActions, { children: _jsx(Button, { variant: \"contained\", onClick: () => {\n                        onClose();\n                    }, children: \"Back\" }) })] }));\n});\nexport default AssemblyEditor;\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34a.996.996 0 0 0-1.41 0l-1.83 1.83 3.75 3.75z\"\n}), 'Create');","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { readConfObject } from '@jbrowse/core/configuration';\nimport AddIcon from '@mui/icons-material/Add';\nimport CreateIcon from '@mui/icons-material/Create';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Button, DialogActions, DialogContent, IconButton } from '@mui/material';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { observer } from 'mobx-react';\nconst AssemblyTable = observer(function ({ onEditAssembly, onAddAssembly, onClose, session, }) {\n    return (_jsxs(_Fragment, { children: [_jsx(DialogContent, { children: _jsx(\"div\", { style: { display: 'flex', flexDirection: 'column' }, children: _jsx(DataGrid, { rowHeight: 25, columnHeaderHeight: 35, hideFooter: session.assemblies.length < 25, rows: session.assemblies.map(assembly => ({\n                            id: readConfObject(assembly, 'name'),\n                            name: readConfObject(assembly, 'name'),\n                            displayName: readConfObject(assembly, 'displayName'),\n                            aliases: readConfObject(assembly, 'aliases'),\n                            assembly,\n                        })), columns: [\n                            { field: 'name' },\n                            { field: 'displayName' },\n                            { field: 'aliases' },\n                            {\n                                field: 'actions',\n                                renderCell: ({ row }) => {\n                                    const { assembly, name } = row;\n                                    const editable = session.sessionAssemblies.includes(assembly)\n                                        ? true\n                                        : session.adminMode;\n                                    return (_jsxs(_Fragment, { children: [_jsx(IconButton, { disabled: !editable, onClick: () => {\n                                                    onEditAssembly(assembly);\n                                                }, children: _jsx(CreateIcon, {}) }), _jsx(IconButton, { \"data-testid\": `${name}-delete`, disabled: !editable, onClick: () => {\n                                                    if (editable) {\n                                                        if (!session.removeAssembly) {\n                                                            session.notify('Unable to find removeAssembly function');\n                                                        }\n                                                        else {\n                                                            session.removeAssembly(name);\n                                                        }\n                                                    }\n                                                }, children: _jsx(DeleteIcon, {}) })] }));\n                                },\n                            },\n                        ] }) }) }), _jsxs(DialogActions, { children: [_jsx(Button, { color: \"secondary\", variant: \"contained\", onClick: () => {\n                            onClose();\n                        }, children: \"Close\" }), _jsx(Button, { variant: \"contained\", startIcon: _jsx(AddIcon, {}), onClick: () => {\n                            onAddAssembly();\n                        }, children: \"Add new assembly\" })] })] }));\n});\nexport default AssemblyTable;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { observer } from 'mobx-react';\nimport AssemblyAddForm from './AssemblyAddForm';\nimport AssemblyEditor from './AssemblyEditor';\nimport AssemblyTable from './AssemblyTable';\nconst AssemblyManager = observer(function ({ session, onClose, }) {\n    const [isFormOpen, setFormOpen] = useState(false);\n    const [editingAssembly, setEditingAssembly] = useState();\n    return (_jsx(Dialog, { open: true, title: \"Assembly manager\", onClose: () => {\n            onClose();\n        }, children: editingAssembly ? (_jsx(AssemblyEditor, { assembly: editingAssembly, onClose: () => {\n                setEditingAssembly(undefined);\n            } })) : isFormOpen ? (_jsx(AssemblyAddForm, { session: session, onClose: () => {\n                setFormOpen(false);\n            } })) : (_jsx(AssemblyTable, { session: session, onClose: () => {\n                onClose();\n            }, onAddAssembly: () => {\n                setFormOpen(true);\n            }, onEditAssembly: arg => {\n                setEditingAssembly(arg);\n            } })) }));\n});\nexport default AssemblyManager;\n","export { default } from './AssemblyManager';\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');"],"names":["createSvgIcon","_jsx","d"],"sourceRoot":"","ignoreList":[0,1,2,3,4,5,6]}
{"version":3,"file":"static/chunks/1962.a9b683d5bb353edf.js","mappings":"2SAMA,MAAkB,gBAAU,QAC5B,aACA,oBACA,mBACA,iBACA,0BACK,CACL,CAAC,EACD,cACA,MAAgB,YAAM,OACtB,OAAY,eAAmB,CAAC,IAAS,CAAI,SAAJ,CAAI,sDAA4E,QAAY,sHAAyJ,CACtR,eAAmB,CAAC,GAAK,EAAI,WAAoB,EACzD,CACA,MAAwB,cAAQ,aAChC,YAAY,GAAU,IACtB,OAAY,wBAA2B,EACvC,OAAY,eAAmB,CAAC,GAAM,EAAI,sBAA0C,CAC5E,eAAmB,CAAC,GAAiB,MACjC,eAAmB,CAAC,GAAW,EAAI,OAAS,eAAkB,CAC1E,EACA,EAA2B,eAAmB,CAAC,GAAU,EAAI,qCAC7D,GACA,EAAuB,CACH,eAAmB,CAAC,GAAS,cACrC,eAAmB,CAAC,GAAO,OACvC,GACA,CAAC,uGCpBD,IAAM,EAAY,gBAAU,GAAb,CACf,MACA,oBACA,kBACA,uBACA,CACA,CAAC,EAyFD,EAxFA,UAAuB,cAwFR,EAxFQ,SAwFG,EAAC,CAxFJ,CAA2B,EAClD,YAAY,GAAU,IACtB,MAAoC,WADH,EACG,CAAQ,OAC5C,MAAoC,cAAQ,KAC5C,CAAY,+BAAyD,KACrE,MAA0C,cAAQ,SAClD,MAAoC,cAAQ,EAC5C,MACA,UACA,CAAK,EACL,OAAY,eAAmB,YACvB,eAAmB,CAAC,GAAM,EAAI,+BACtC,kBACA,EAAe,mCACP,eAAmB,CAAC,GAAM,EAAI,aACtC,EAAyB,QAAM,WAC/B,CAAa,oBAA8B,CAC/B,eAAmB,CAAC,GAAmB,OACnD,iCACQ,eAAmB,CAAC,GAAM,EAAI,aACtC,EAAyB,QAAQ,WACjC,CAAa,oBAA8B,CAC/B,eAAmB,CAAC,GAAqB,OACrD,mCACQ,eAAmB,CAAC,GAAM,EAAI,aACtC,EAAyB,QAAM,oBAC/B,CAAa,oBAA8B,CAC/B,eAAmB,CAAC,GAAyB,OACzD,qCACQ,eAAmB,CAAC,GAAM,EAAI,aACtC,EAAyB,QAAQ,oBACjC,CAAa,oBAA8B,CAC/B,eAAmB,CAAC,GAA2B,OAC3D,wCACQ,eAAmB,CAAC,cAAY,EAAI,gCAC5C,KACA,cACA,4BACA,GACA,WAEA,CAAiB,EACjB,SACA,CAAa,cACb,OACA,EAAe,EACP,eAAmB,QAAU,OAAS,yBAA8B,CAChE,eAAmB,CAAC,GAAQ,EAAI,oGAC5C,IACA,CAAiB,oDACjB,CACA,cACA,mBACA,mBAAuC,OAAW,GAAM,eAAmB,CAAC,IAAW,CAAI,iBAAJ,QAAI,IAC3F,4BACA,GACA,YAEA,SACA,EAA+B,CAC/B,CAAqB,CACrB,CACA,aACA,kBACA,MAA+B,sBAAgB,kBAC/C,CAAqB,IACrB,wBACA,QACA,mBAAuC,EAAO,GAAM,eAAmB,QAAU,iBAAyB,CAC9E,eAAmB,CAAC,eAAa,EAAI,KAAM,YAAM,IAAS,GACtF,MAA+B,sBAAgB,aAAkB,KAAO,GACxE,EAAqB,EACrB,oCACA,WACA,cACA,mBACA,OAAkC,UAAY,EAC9C,IACA,oBACA,MAAuC,YAAM,OAC7C,EAAuC,YAAM,OAC7C,aACA,mBACA,kBACA,CAAyB,EACzB,EACA,EAAmB,GACnB,ECpGM,EAAY,gBAAU,IAC5B,EADe,MACf,CACA,YACA,CAAK,CACJ,EACc,kBAA0B,gBAAqB,EAC9D,YAAY,GAAU,IACtB,CAAY,WAAU,EACtB,MAAwC,cAAQ,yBAChD,MAAoC,qBAAe,4BACnD,OAAY,eAAmB,CFiBhB,EEjBgC,CAAI,YFiBrB,EAAC,EEjBoB,OAAJ,IAAI,mDAAkG,CAC7I,eAAmB,CAAC,GAAa,EAAI,oBAA4B,CAC7D,eAAmB,CAAC,GAAM,EAAI,2BAA+B,cAAgB,cACzF,KACA,EAAmB,4BACP,eAAmB,YAC/B,EAAwB,eAAmB,CAAC,UAAc,MAC1D,eACgB,eAAmB,WACf,eAAmB,mEACnB,eAAmB,yEACnB,eAAmB,yEACnB,eAAmB,yEACnB,eAAmB,sDACnB,eAAmB,6EACnB,eAAmB,qHAC3B,eAAmB,CAAC,EAAW,CAAI,mBAAJ,QAAI,EAA+D,GACtG,eAAmB,CAAC,GAAa,MAC7B,eAAmB,CAAC,GAAM,EAAI,+DAC1C,gBACA,gBACA,EAAmB,0BACP,eAAmB,CAAC,GAAM,EAAI,mDAC1C,IACA,qBACA,EAAmB,WACP,eAAmB,CAAC,GAAM,EAAI,+DAC1C,eACA,GACA,EAAmB,YACnB,iFC5CO,oBACP,QACA,mCACA,iBACA,IACA,gBACA,sBACA,MACA,+BAEA,IACA,CACA,QACA,CACO,oBACP,QACA,mCACA,iBACA,aACA,gBACA,sBACA,MACA,+BAEA,IACA,CACA,QACA,CAEO,cACP,kBAAY,GAAgB,EAC5B,aAAY,GAAc,CAAE,sBAAiB,IAC7C,EAAkB,wBAAkB,IACpC,EAAsB,aAAO,WAC7B,2BAEA,GADU,iBAAW,GAPrB,MAOqB,GAErB","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/MultiLinearWiggleDisplay/components/DraggableDialog.js","webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/MultiLinearWiggleDisplay/components/SourcesGrid.js","webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/MultiLinearWiggleDisplay/components/SetColorDialog.js","webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/MultiLinearWiggleDisplay/components/util.js"],"sourcesContent":["import React, { useRef } from 'react';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { Dialog, DialogTitle, Divider, IconButton, Paper, ScopedCssBaseline, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport Draggable from 'react-draggable';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}));\nfunction PaperComponent(props) {\n    const ref = useRef(null);\n    return (React.createElement(Draggable, { nodeRef: ref, cancel: '[class*=\"MuiDialogContent-root\"]', onStart: arg => { var _a, _b; return (_b = (_a = arg.target) === null || _a === void 0 ? void 0 : _a.className) === null || _b === void 0 ? void 0 : _b.includes('MuiDialogTitle'); } },\n        React.createElement(Paper, { ref: ref, ...props })));\n}\nconst DraggableDialog = observer(function DraggableDialog(props) {\n    const { classes } = useStyles();\n    const { title, children, onClose } = props;\n    return (React.createElement(Dialog, { ...props, PaperComponent: PaperComponent },\n        React.createElement(ScopedCssBaseline, null,\n            React.createElement(DialogTitle, { style: { cursor: 'move' } },\n                title,\n                onClose ? (React.createElement(IconButton, { className: classes.closeButton, onClick: () => {\n                        onClose();\n                    } },\n                    React.createElement(CloseIcon, null))) : null),\n            React.createElement(Divider, null),\n            children)));\n});\nexport default DraggableDialog;\n","import React, { useState } from 'react';\nimport { SanitizedHTML } from '@jbrowse/core/ui';\nimport ColorPicker, { ColorPopover } from '@jbrowse/core/ui/ColorPicker';\nimport { getStr, measureGridWidth } from '@jbrowse/core/util';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown';\nimport KeyboardDoubleArrowUpIcon from '@mui/icons-material/KeyboardDoubleArrowUp';\nimport { Button } from '@mui/material';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { makeStyles } from 'tss-react/mui';\nimport { moveDown, moveUp } from './util';\nconst useStyles = makeStyles()({\n    cell: {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n    },\n});\nfunction SourcesGrid({ rows, onChange, showTips, }) {\n    const { classes } = useStyles();\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [selected, setSelected] = useState([]);\n    const { name: _name, color: _color, baseUri: _baseUri, ...rest } = rows[0];\n    const [widgetColor, setWidgetColor] = useState('blue');\n    const [currSort, setCurrSort] = useState({\n        idx: 0,\n        field: null,\n    });\n    return (React.createElement(\"div\", null,\n        React.createElement(Button, { disabled: !selected.length, onClick: event => {\n                setAnchorEl(event.currentTarget);\n            } }, \"Change color of selected items\"),\n        React.createElement(Button, { onClick: () => {\n                onChange(moveUp([...rows], selected));\n            }, disabled: !selected.length },\n            React.createElement(KeyboardArrowUpIcon, null),\n            showTips ? 'Move selected items up' : null),\n        React.createElement(Button, { onClick: () => {\n                onChange(moveDown([...rows], selected));\n            }, disabled: !selected.length },\n            React.createElement(KeyboardArrowDownIcon, null),\n            showTips ? 'Move selected items down' : null),\n        React.createElement(Button, { onClick: () => {\n                onChange(moveUp([...rows], selected, rows.length));\n            }, disabled: !selected.length },\n            React.createElement(KeyboardDoubleArrowUpIcon, null),\n            showTips ? 'Move selected items to top' : null),\n        React.createElement(Button, { onClick: () => {\n                onChange(moveDown([...rows], selected, rows.length));\n            }, disabled: !selected.length },\n            React.createElement(KeyboardDoubleArrowDownIcon, null),\n            showTips ? 'Move selected items to bottom' : null),\n        React.createElement(ColorPopover, { anchorEl: anchorEl, color: widgetColor, onChange: c => {\n                setWidgetColor(c);\n                selected.forEach(id => {\n                    const elt = rows.find(f => f.name === id);\n                    if (elt) {\n                        elt.color = c;\n                    }\n                });\n                onChange([...rows]);\n            }, onClose: () => {\n                setAnchorEl(null);\n            } }),\n        React.createElement(\"div\", { style: { height: 400, width: '100%' } },\n            React.createElement(DataGrid, { getRowId: row => row.name, checkboxSelection: true, disableRowSelectionOnClick: true, onRowSelectionModelChange: arg => {\n                    setSelected(arg);\n                }, rows: rows, rowHeight: 25, columnHeaderHeight: 33, columns: [\n                    {\n                        field: 'color',\n                        headerName: 'Color',\n                        renderCell: ({ value, id }) => (React.createElement(ColorPicker, { color: value || 'blue', onChange: c => {\n                                const elt = rows.find(f => f.name === id);\n                                if (elt) {\n                                    elt.color = c;\n                                }\n                                onChange([...rows]);\n                            } })),\n                    },\n                    {\n                        field: 'name',\n                        headerName: 'Name',\n                        width: measureGridWidth(rows.map(r => r.name)),\n                    },\n                    ...Object.keys(rest).map(val => ({\n                        field: val,\n                        renderCell: ({ value }) => (React.createElement(\"div\", { className: classes.cell },\n                            React.createElement(SanitizedHTML, { html: getStr(value) }))),\n                        width: measureGridWidth(rows.map(r => `${r[val]}`)),\n                    })),\n                ], sortModel: [], onSortModelChange: args => {\n                    const sort = args[0];\n                    const idx = (currSort.idx + 1) % 2;\n                    const field = sort.field || currSort.field;\n                    setCurrSort({ idx, field });\n                    onChange(field\n                        ? [...rows].sort((a, b) => {\n                            const aa = getStr(a[field]);\n                            const bb = getStr(b[field]);\n                            return idx === 1\n                                ? aa.localeCompare(bb)\n                                : bb.localeCompare(aa);\n                        })\n                        : rows);\n                } }))));\n}\nexport default SourcesGrid;\n","import React, { useState } from 'react';\nimport { useLocalStorage } from '@jbrowse/core/util';\nimport { Button, DialogActions, DialogContent } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nimport DraggableDialog from './DraggableDialog';\nimport SourcesGrid from './SourcesGrid';\nconst useStyles = makeStyles()({\n    content: {\n        minWidth: 800,\n    },\n});\nexport default function SetColorDialog({ model, handleClose, }) {\n    const { classes } = useStyles();\n    const { sources } = model;\n    const [currLayout, setCurrLayout] = useState(structuredClone(sources || []));\n    const [showTips, setShowTips] = useLocalStorage('multiwiggle-showTips', false);\n    return (React.createElement(DraggableDialog, { open: true, onClose: handleClose, maxWidth: \"xl\", title: 'Multi-wiggle color/arrangement editor' },\n        React.createElement(DialogContent, { className: classes.content },\n            React.createElement(Button, { variant: \"contained\", style: { float: 'right' }, onClick: () => {\n                    setShowTips(!showTips);\n                } }, showTips ? 'Hide tips' : 'Show tips'),\n            React.createElement(\"br\", null),\n            showTips ? (React.createElement(React.Fragment, null,\n                \"Helpful tips\",\n                React.createElement(\"ul\", null,\n                    React.createElement(\"li\", null, \"You can select rows in the table with the checkboxes\"),\n                    React.createElement(\"li\", null, \"Multi-select is enabled with shift-click and control-click\"),\n                    React.createElement(\"li\", null, \"The \\\"Move selected items up/down\\\" can re-arrange subtracks\"),\n                    React.createElement(\"li\", null, \"Sorting the data grid itself can also re-arrange subtracks\"),\n                    React.createElement(\"li\", null, \"Changes are applied when you hit Submit\"),\n                    React.createElement(\"li\", null, \"You can click and drag the dialog box to move it on the screen\"),\n                    React.createElement(\"li\", null, \"Columns in the table can be hidden using a vertical '...' menu on the right side of each column\")))) : null,\n            React.createElement(SourcesGrid, { rows: currLayout, onChange: setCurrLayout, showTips: showTips })),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { variant: \"contained\", type: \"submit\", color: \"inherit\", onClick: () => {\n                    model.clearLayout();\n                    setCurrLayout(model.sources || []);\n                } }, \"Clear custom settings\"),\n            React.createElement(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                    handleClose();\n                    setCurrLayout([...(model.sources || [])]);\n                } }, \"Cancel\"),\n            React.createElement(Button, { variant: \"contained\", color: \"primary\", type: \"submit\", onClick: () => {\n                    model.setLayout(currLayout);\n                    handleClose();\n                } }, \"Submit\"))));\n}\n","import { getConf } from '@jbrowse/core/configuration';\nimport { getContainingTrack, getContainingView, measureText, } from '@jbrowse/core/util';\nexport function moveUp(arr, sel, by = 1) {\n    const idxs = sel\n        .map(l => arr.findIndex(v => v.name === l))\n        .sort((a, b) => a - b);\n    let lastIdx = 0;\n    for (const old of idxs) {\n        const idx = Math.max(lastIdx, old - by);\n        if (idx >= lastIdx) {\n            arr.splice(idx, 0, arr.splice(old, 1)[0]);\n        }\n        lastIdx = lastIdx + 1;\n    }\n    return arr;\n}\nexport function moveDown(arr, sel, by = 1) {\n    const idxs = sel\n        .map(l => arr.findIndex(v => v.name === l))\n        .sort((a, b) => b - a);\n    let lastIdx = arr.length - 1;\n    for (const old of idxs) {\n        const idx = Math.min(lastIdx, old + by);\n        if (idx <= lastIdx) {\n            arr.splice(idx, 0, arr.splice(old, 1)[0]);\n        }\n        lastIdx = lastIdx - 1;\n    }\n    return arr;\n}\nconst trackLabelFontSize = 12.8;\nexport function getOffset(model) {\n    const { prefersOffset } = model;\n    const { trackLabels } = getContainingView(model);\n    const track = getContainingTrack(model);\n    const trackName = getConf(track, 'name');\n    return trackLabels === 'overlapping' && !prefersOffset\n        ? measureText(trackName, trackLabelFontSize) + 100\n        : 10;\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2,3]}
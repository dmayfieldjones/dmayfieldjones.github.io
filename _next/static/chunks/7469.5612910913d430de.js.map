{"version":3,"file":"static/chunks/7469.5612910913d430de.js","mappings":"2MA6BA,MAzBwB,qBAAQ,OAyBjB,GAzBiB,GAChC,SAwB8B,CAxBlB,iBAAqB,EACjC,MAA0B,cAAQ,KAClC,kCACA,OAAY,eAAmB,CAAC,QAAM,EAAI,sCAAwD,CAC1F,eAAmB,CAAC,GAAa,MAC7B,eAAmB,CAAC,GAAU,gCAC9B,eAAmB,CAAC,GAAU,EAAI,sBAAwB,wDAC1D,eAAmB,CAAC,GAAS,EAAI,qBAC7C,iBACA,CAAiB,iKACjB,WACA,YACA,mCACA,CAAqB,CACrB,CAAmB,EACP,eAAmB,CAAC,GAAa,MAC7B,eAAmB,CAAC,GAAM,EAAI,4EAC9C,uBACA,GACA,EAAuB,WACP,eAAmB,CAAC,GAAM,EAAI,mDAC9C,GACA,EAAuB,aACvB,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/LinearPileupDisplay/components/SortByTagDialog.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { Button, DialogActions, DialogContent, TextField, Typography, } from '@mui/material';\nimport { observer } from 'mobx-react';\nconst SortByTagDialog = observer(function (props) {\n    const { model, handleClose } = props;\n    const [tag, setTag] = useState('');\n    const validTag = /^[A-Za-z][A-Za-z0-9]$/.exec(tag);\n    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: \"Sort by tag\" },\n        React.createElement(DialogContent, null,\n            React.createElement(Typography, null, \"Set the tag to sort by\"),\n            React.createElement(Typography, { color: \"textSecondary\" }, \"Examples: HP for haplotype, RG for read group, etc.\"),\n            React.createElement(TextField, { value: tag, onChange: event => {\n                    setTag(event.target.value);\n                }, placeholder: \"Enter tag name\", error: tag.length === 2 && !validTag, helperText: tag.length === 2 && !validTag ? 'Not a valid tag' : '', autoComplete: \"off\", \"data-testid\": \"sort-tag-name\", slotProps: {\n                    htmlInput: {\n                        maxLength: 2,\n                        'data-testid': 'sort-tag-name-input',\n                    },\n                } }),\n            React.createElement(DialogActions, null,\n                React.createElement(Button, { variant: \"contained\", color: \"primary\", type: \"submit\", autoFocus: true, onClick: () => {\n                        model.setSortedBy('tag', tag);\n                        handleClose();\n                    } }, \"Submit\"),\n                React.createElement(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                        handleClose();\n                    } }, \"Cancel\")))));\n});\nexport default SortByTagDialog;\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
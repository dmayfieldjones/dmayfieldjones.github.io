{"version":3,"file":"static/chunks/7662.431e2468b2dfdd23.js","mappings":"6FAcO,cACP,QACA,YAAoB,WAAgB,IACpC,mBAEA,cACA,CACO,cACP,aAAkB,MAAQ,8GCXnB,4BACP,YACA,WALA,GAMA,EANA,CACe,QAAQ,EAKvB,IALuB,eANvB,cACA,YACA,SAAe,MAAI,qBACnB,EASA,KACA,aAAqB,IAAE,GAAM,IAAE,GAAM,IAAE,GAAM,IAAE,CAC/C,qCChBO,6HCKA,kBAA+B,gDAA6C,EACnF,IAAY,+EAA0F,EACtG,gBAAY,UAA6B,EACzC,aACI,oBAAc,IAClB,MAAiB,QAA6C,eAC1D,oBAAc,IAClB,SACA,WACA,MA2EA,OA1EA,MAAU,kBAAY,iCACtB,UACA,wBACA,YAAwB,IAAO,KAC/B,0BACgB,oBAAc,IAC9B,qBAEA,SACA,SAAoB,qBAA2B,KAE/C,GADA,+DACA,CACA,uBACA,eACA,WACA,YAAgC,IAAS,KACzC,YACA,MAA4B,QAAW,KACvC,OACA,MACA,8CACA,MACA,UACA,sBACA,iBACA,MACA,8CACA,eACoC,OAAU,iBAC9C,MAEA,oBACA,aAAqD,IAAE,GAAM,IAAE,GAAM,IAAE,GAAM,IAAE,MAG/E,CACA,sBACgC,OAAoB,eACpD,CACA,CACA,CACA,CACA,KACA,CACA,yBACA,eACA,WACA,YAAgC,IAAS,KACzC,YACA,CAA4B,aAAW,KACvC,OACA,MACA,UACA,sBACA,iBACA,MACA,mBACgC,OAAU,eAC1C,MAEA,oBACA,aAAiD,IAAE,GAAM,IAAE,GAAM,IAAE,GAAM,IAAE,MAG3E,CACA,sBAC4B,OAAoB,eAChD,CACA,CACA,CACA,CACA,SACA,CACA,CAAK,EACL,CACA,OACA,KACA,CACA,8DCrDO,0BACP,YAxCA,cACA,eACA,IACA,IACA,IACA,IACA,eACA,MACA,IAEA,QACA,IAEA,QACA,IAGA,IAGA,SACA,YAEA,EACA,MAIA,GAHA,GACA,GAAiB,YAAM,gBAAgB,UAAwB,MAE/D,GACA,yBAAyC,IAAa,GACtD,aAAkC,YAAM,GACxC,CACA,MACA,wBAAwC,IAAiB,GACzD,aAAkC,YAAM,GACxC,CACA,yCACA,CACA,EAEA,KACA,aAAqB,IAAE,GAAM,IAAE,GAAM,IAAE,GAAM,IAAE,CAC/C","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/util.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/drawPhased.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/constants.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/MultiLinearVariantMatrixRenderer/makeImageData.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/drawAlleleCount.js"],"sourcesContent":["export function fillRectCtx(x, y, width, height, ctx, color) {\n    if (width < 0) {\n        x += width;\n        width = -width;\n    }\n    if (height < 0) {\n        y += height;\n        height = -height;\n    }\n    if (color) {\n        ctx.fillStyle = color;\n    }\n    ctx.fillRect(x, y, width, height);\n}\nexport function randomColor(str) {\n    let sum = 0;\n    for (let i = 0; i < str.length; i++) {\n        sum += str.charCodeAt(i);\n    }\n    return colorify(sum * 10);\n}\nexport function colorify(n) {\n    return `hsl(${n % 255}, 50%, 50%)`;\n}\n","import { set1 } from '@jbrowse/core/ui/colors';\nimport { f2 } from './constants';\nimport { colorify } from './util';\nfunction getColorPhased(alleles, HP) {\n    const c = +alleles[HP];\n    return c ? set1[c - 1] || 'black' : '#ccc';\n}\nfunction getColorPhasedWithPhaseSet(alleles, HP, PS) {\n    const c = +alleles[HP];\n    return c ? colorify(+PS) || 'black' : '#ccc';\n}\nexport function drawPhased(alleles, ctx, x, y, w, h, HP, PS) {\n    ctx.fillStyle =\n        PS !== undefined\n            ? getColorPhasedWithPhaseSet(alleles, HP, PS)\n            : getColorPhased(alleles, HP);\n    ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n}\n","export const fudgeFactor = 0.6;\nexport const f2 = fudgeFactor / 2;\n","import { updateStatus } from '@jbrowse/core/util';\nimport { checkStopToken } from '@jbrowse/core/util/stopToken';\nimport { f2 } from '../shared/constants';\nimport { drawColorAlleleCount } from '../shared/drawAlleleCount';\nimport { drawPhased } from '../shared/drawPhased';\nimport { getFeaturesThatPassMinorAlleleFrequencyFilter } from '../shared/minorAlleleFrequencyUtils';\nexport async function makeImageData({ ctx, canvasWidth, canvasHeight, renderArgs, }) {\n    const { renderingMode: renderingMode, minorAlleleFrequencyFilter, sources, features, stopToken, } = renderArgs;\n    const { statusCallback = () => { } } = renderArgs;\n    const h = canvasHeight / sources.length;\n    checkStopToken(stopToken);\n    const mafs = getFeaturesThatPassMinorAlleleFrequencyFilter(features.values(), minorAlleleFrequencyFilter);\n    checkStopToken(stopToken);\n    const arr = [];\n    const m = mafs.length;\n    const w = canvasWidth / m;\n    await updateStatus('Drawing variant matrix', statusCallback, () => {\n        var _a, _b, _c;\n        let start = performance.now();\n        for (let i = 0; i < m; i++) {\n            if (performance.now() - start > 400) {\n                checkStopToken(stopToken);\n                start = performance.now();\n            }\n            const arr2 = [];\n            const { feature, mostFrequentAlt } = mafs[i];\n            const hasPhaseSet = (_a = feature.get('FORMAT')) === null || _a === void 0 ? void 0 : _a.includes('PS');\n            if (hasPhaseSet) {\n                const samp = feature.get('samples');\n                const x = (i / mafs.length) * canvasWidth;\n                const sln = sources.length;\n                for (let j = 0; j < sln; j++) {\n                    const y = (j / sln) * canvasHeight;\n                    const { name, HP } = sources[j];\n                    const s = samp[name];\n                    if (s) {\n                        const genotype = (_b = s.GT) === null || _b === void 0 ? void 0 : _b[0];\n                        if (genotype) {\n                            arr2.push(genotype);\n                            const isPhased = genotype.includes('|');\n                            if (renderingMode === 'phased') {\n                                if (isPhased) {\n                                    const PS = (_c = s.PS) === null || _c === void 0 ? void 0 : _c[0];\n                                    const alleles = genotype.split('|');\n                                    drawPhased(alleles, ctx, x, y, w, h, HP, PS);\n                                }\n                                else {\n                                    ctx.fillStyle = 'black';\n                                    ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n                                }\n                            }\n                            else {\n                                const alleles = genotype.split(/[/|]/);\n                                drawColorAlleleCount(alleles, ctx, x, y, w, h, mostFrequentAlt);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                const samp = feature.get('genotypes');\n                const x = (i / mafs.length) * canvasWidth;\n                const sln = sources.length;\n                for (let j = 0; j < sln; j++) {\n                    const y = (j / sln) * canvasHeight;\n                    const { name, HP } = sources[j];\n                    const genotype = samp[name];\n                    if (genotype) {\n                        arr2.push(genotype);\n                        const isPhased = genotype.includes('|');\n                        if (renderingMode === 'phased') {\n                            if (isPhased) {\n                                const alleles = genotype.split('|');\n                                drawPhased(alleles, ctx, x, y, w, h, HP);\n                            }\n                            else {\n                                ctx.fillStyle = 'black';\n                                ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n                            }\n                        }\n                        else {\n                            const alleles = genotype.split(/[/|]/);\n                            drawColorAlleleCount(alleles, ctx, x, y, w, h, mostFrequentAlt);\n                        }\n                    }\n                }\n            }\n            arr.push(arr2);\n        }\n    });\n    return {\n        mafs,\n        arr,\n    };\n}\n","import { colord } from '@jbrowse/core/util/colord';\nimport { f2 } from './constants';\nfunction getColorAlleleCount(alleles, mostFrequentAlt) {\n    const total = alleles.length;\n    let alt = 0;\n    let uncalled = 0;\n    let alt2 = 0;\n    let ref = 0;\n    for (const allele of alleles) {\n        if (allele === mostFrequentAlt) {\n            alt++;\n        }\n        else if (allele === '0') {\n            ref++;\n        }\n        else if (allele === '.') {\n            uncalled++;\n        }\n        else {\n            alt2++;\n        }\n    }\n    if (ref === total) {\n        return `#ccc`;\n    }\n    else {\n        let a1;\n        if (alt) {\n            a1 = colord(`hsl(200,50%,${80 - (alt / total) * 50}%)`);\n        }\n        if (alt2) {\n            const l = `hsla(0,100%,20%,${alt2 / total})`;\n            a1 = a1 ? a1.mix(l) : colord(l);\n        }\n        if (uncalled) {\n            const l = `hsl(50,50%,50%,${uncalled / total})`;\n            a1 = a1 ? a1.mix(l) : colord(l);\n        }\n        return (a1 === null || a1 === void 0 ? void 0 : a1.toHex()) || 'black';\n    }\n}\nexport function drawColorAlleleCount(alleles, ctx, x, y, w, h, mostFrequentAlt) {\n    ctx.fillStyle = getColorAlleleCount(alleles, mostFrequentAlt);\n    ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2,3,4]}
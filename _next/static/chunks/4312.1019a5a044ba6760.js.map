{"version":3,"file":"static/chunks/4312.1019a5a044ba6760.js","mappings":"2KAUA,MAN0C,cAAQ,aAClD,CAKe,EALf,OAAY,GAAQ,EACpB,OAAY,YAIoC,EAAC,CAJlB,YACvB,eAAmB,CAAC,IAA0B,EAAI,KAAU,EAC5D,eAAmB,CAAC,GAAU,EAAI,QAAc,EACxD,CAAC,yECHD,MAJA,IACA,UAAY,KAGG,MAAM,EAAC,WAHV,EAAiC,EAC7C,OAAW,eAAmB,SAAW,QAAa,kBAAY,IAAS,CAC3E,ECFA,EAAoB,cAAQ,iBAAa,uCAA0C,EACnF,sBAAY,yGAAsH,EAClI,iBACA,OACA,SACA,QAEA,EADA,UACA,aACA,SAAsB,eAAmB,CAAC,UAAc,MACxD,EAAmC,eAAmB,CAAC,EAAM,CAAI,cAAJ,EAAI,wBAAuF,OACxJ,cACA,qBACA,OAAoB,eAAmB,CAAC,UAAc,EAAI,OAAQ,OAAY,GAAG,EAAI,EAAG,CACxF,OAAkD,eAAmB,CAAC,EAAM,CAAI,cAAJ,IAAI,WAA+E,EAC/J,QAAgC,eAAmB,CAAC,EAAM,CAAI,cAAJ,IAAI,6BAAsI,OACpM,EAAmC,eAAmB,SAAW,4BAAoF,cACrJ,CAAS,OACT,CAAC,EChBD,EAAoB,cAAQ,SAAI,EAAO,IACvC,UAAY,eAAmB,EAC/B,OAAY,GAAQ,CAAE,sBAAiB,IACvC,YAAuB,qBAA8D,SAAG,qBAA8D,GAAG,4BAA0C,EACnM,EAAgB,iBAAW,OAE3B,MADA,GAEA,OAAY,eAAmB,CAAC,UAAc,MACtC,eAAmB,CAAC,EAAM,CAAI,cAAJ,EAAI,YAA2C,EACzE,eAAmB,SAAW,SAAgB,IACtD,CAAC,4BCPD,MAAgB,cAAQ,oBAAa,sBAA6B,EAClE,WAAY,GAAS,EACrB,WAAqC,eAAmB,QAAU,OAClE,oBACA,MACA,OACA,qBACA,SACA,MAAmB,uBAAiB,UACpC,CAAW,GACX,CAAC,EAwBD,EAvB0B,cAAQ,SAuBnB,CAvBmB,GAClC,MAsByB,EAAC,EAtBd,6BAAgC,EAC5C,OAAY,8GAA8G,EAC1H,iBACA,OACA,CAAY,SAAmB,CAAE,sBAAiB,IAGlD,IADA,OAEA,YAEA,oBACA,OAAkB,iBAAW,YAC7B,WAPA,KAQA,OAAY,eAAmB,IAAY,KAAU,GAA6B,eAAmB,CAAC,UAAc,MAC5G,eAAmB,MAAQ,uBAAwB,EAAsB,EAAT,QAAS,IAAY,KAAM,CACvF,eAAmB,CAAC,GAAS,EAAI,sBAAwC,GAC7E,eAAmB,MAAQ,uBAAwB,QAA6B,KAAM,CAClF,eAAmB,CAAC,EAAW,CAAI,mBAAJ,CAAI,0BAA2E,IAAQ,eAAmB,CAAC,UAAc,MAC5J,eAAmB,CAAC,EAAW,CAAI,QFhBjB,EEgBiB,SAAJ,CAAI,mCAAwF,EACnI,KAA6D,eAAmB,CAAC,EAAW,CAAI,KAAU,GDvBhF,CCuBgF,CDvB/E,ECuB+E,OAAd,CAAmD,eAAmB,MAAQ,yBAA0B,IAAgB,UAAY,kBAAsB,GAAG,EAAI,EAAG,CACpP,eAAmB,CAAC,GAAS,EAAI,sBAAwC,KACrF,CAAC,iFCtCM,oBACP,QACA,mCACA,iBACA,IACA,gBACA,sBACA,MACA,+BAEA,IACA,CACA,QACA,CACO,oBACP,QACA,mCACA,iBACA,aACA,gBACA,sBACA,MACA,+BAEA,IACA,CACA,QACA,CAEO,cACP,kBAAY,GAAgB,EAC5B,aAAY,GAAc,CAAE,sBAAiB,IAC7C,EAAkB,wBAAkB,IACpC,EAAsB,aAAO,WAC7B,2BAEA,GADU,iBAAW,GAPrB,MAOqB,GAErB","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/MultiLinearWiggleDisplay/components/WiggleDisplayComponent.js","webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/MultiLinearWiggleDisplay/components/RectBg.js","webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/MultiLinearWiggleDisplay/components/ColorLegend.js","webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/MultiLinearWiggleDisplay/components/ScoreLegend.js","webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/MultiLinearWiggleDisplay/components/YScaleBars.js","webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/MultiLinearWiggleDisplay/components/util.js"],"sourcesContent":["import React from 'react';\nimport { BaseLinearDisplayComponent } from '@jbrowse/plugin-linear-genome-view';\nimport { observer } from 'mobx-react';\nimport YScaleBars from './YScaleBars';\nconst MultiLinearWiggleDisplayComponent = observer(function (props) {\n    const { model } = props;\n    return (React.createElement(\"div\", null,\n        React.createElement(BaseLinearDisplayComponent, { ...props }),\n        React.createElement(YScaleBars, { model: model })));\n});\nexport default MultiLinearWiggleDisplayComponent;\n","import React from 'react';\nimport { getFillProps } from '@jbrowse/core/util';\nconst RectBg = (props) => {\n    const { color = 'rgb(255,255,255,0.8)' } = props;\n    return React.createElement(\"rect\", { ...props, ...getFillProps(color) });\n};\nexport default RectBg;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport RectBg from './RectBg';\nconst ColorLegend = observer(function ({ model, rowHeight, labelWidth, exportSVG, }) {\n    const { needsCustomLegend, needsScalebar, needsFullHeightScalebar, rowHeightTooSmallForScalebar, renderColorBoxes, sources, } = model;\n    const svgFontSize = Math.min(rowHeight, 12);\n    const canDisplayLabel = rowHeight > 11;\n    const colorBoxWidth = renderColorBoxes ? 15 : 0;\n    const legendWidth = labelWidth + colorBoxWidth + 5;\n    const svgOffset = exportSVG ? 10 : 0;\n    const extraOffset = svgOffset || (needsScalebar && !rowHeightTooSmallForScalebar ? 50 : 0);\n    return sources ? (React.createElement(React.Fragment, null,\n        needsFullHeightScalebar ? (React.createElement(RectBg, { y: 0, x: extraOffset, width: legendWidth, height: (sources.length + 0.25) * rowHeight })) : null,\n        sources.map((source, idx) => {\n            const boxHeight = Math.min(20, rowHeight);\n            return (React.createElement(React.Fragment, { key: `${source.name}-${idx}` },\n                needsFullHeightScalebar ? null : (React.createElement(RectBg, { y: idx * rowHeight + 1, x: extraOffset, width: legendWidth, height: boxHeight })),\n                source.color ? (React.createElement(RectBg, { y: idx * rowHeight + 1, x: extraOffset, width: colorBoxWidth, height: needsCustomLegend ? rowHeight : boxHeight, color: source.color })) : null,\n                canDisplayLabel ? (React.createElement(\"text\", { y: idx * rowHeight + 13, x: extraOffset + colorBoxWidth + 2, fontSize: svgFontSize }, source.name)) : null));\n        }))) : null;\n});\nexport default ColorLegend;\n","import React from 'react';\nimport { getContainingView, measureText } from '@jbrowse/core/util';\nimport { observer } from 'mobx-react';\nimport RectBg from './RectBg';\nconst ScoreLegend = observer(({ model }) => {\n    const { ticks, scaleType } = model;\n    const { width } = getContainingView(model);\n    const legend = `[${ticks === null || ticks === void 0 ? void 0 : ticks.values[0]}-${ticks === null || ticks === void 0 ? void 0 : ticks.values[1]}]${scaleType === 'log' ? ' (log scale)' : ''}`;\n    const len = measureText(legend, 14);\n    const padding = 25;\n    const xpos = width - len - padding;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(RectBg, { y: 0, x: xpos, width: len + 6, height: 16 }),\n        React.createElement(\"text\", { y: 13, x: xpos }, legend)));\n});\nexport default ScoreLegend;\n","import React from 'react';\nimport { getContainingView, measureText } from '@jbrowse/core/util';\nimport { observer } from 'mobx-react';\nimport ColorLegend from './ColorLegend';\nimport ScoreLegend from './ScoreLegend';\nimport { getOffset } from './util';\nimport YScaleBar from '../../shared/YScaleBar';\nconst Wrapper = observer(function ({ children, model, exportSVG, }) {\n    const { height } = model;\n    return exportSVG ? (children) : (React.createElement(\"svg\", { style: {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            pointerEvents: 'none',\n            height,\n            width: getContainingView(model).width,\n        } }, children));\n});\nexport const YScaleBars = observer(function (props) {\n    const { model, orientation, exportSVG } = props;\n    const { stats, needsCustomLegend, needsFullHeightScalebar, rowHeightTooSmallForScalebar, rowHeight, sources, ticks, } = model;\n    const svgFontSize = Math.min(rowHeight, 12);\n    const canDisplayLabel = rowHeight > 11;\n    const { width: viewWidth } = getContainingView(model);\n    const minWidth = 20;\n    const ready = stats && sources;\n    if (!ready) {\n        return null;\n    }\n    const labelWidth = Math.max(...sources\n        .map(s => measureText(s.name, svgFontSize))\n        .map(width => (canDisplayLabel ? width : minWidth)));\n    return (React.createElement(Wrapper, { ...props }, needsFullHeightScalebar ? (React.createElement(React.Fragment, null,\n        React.createElement(\"g\", { transform: `translate(${!exportSVG ? getOffset(model) : 0},0)` },\n            React.createElement(YScaleBar, { model: model, orientation: orientation })),\n        React.createElement(\"g\", { transform: `translate(${viewWidth - labelWidth - 100},0)` },\n            React.createElement(ColorLegend, { exportSVG: exportSVG, model: model, rowHeight: 12, labelWidth: labelWidth })))) : (React.createElement(React.Fragment, null,\n        React.createElement(ColorLegend, { exportSVG: exportSVG, model: model, rowHeight: model.rowHeight, labelWidth: labelWidth }),\n        rowHeightTooSmallForScalebar || needsCustomLegend ? (React.createElement(ScoreLegend, { ...props })) : (sources.map((_source, idx) => (React.createElement(\"g\", { transform: `translate(0 ${rowHeight * idx})`, key: `${JSON.stringify(ticks)}-${idx}` },\n            React.createElement(YScaleBar, { model: model, orientation: orientation })))))))));\n});\nexport default YScaleBars;\n","import { getConf } from '@jbrowse/core/configuration';\nimport { getContainingTrack, getContainingView, measureText, } from '@jbrowse/core/util';\nexport function moveUp(arr, sel, by = 1) {\n    const idxs = sel\n        .map(l => arr.findIndex(v => v.name === l))\n        .sort((a, b) => a - b);\n    let lastIdx = 0;\n    for (const old of idxs) {\n        const idx = Math.max(lastIdx, old - by);\n        if (idx >= lastIdx) {\n            arr.splice(idx, 0, arr.splice(old, 1)[0]);\n        }\n        lastIdx = lastIdx + 1;\n    }\n    return arr;\n}\nexport function moveDown(arr, sel, by = 1) {\n    const idxs = sel\n        .map(l => arr.findIndex(v => v.name === l))\n        .sort((a, b) => b - a);\n    let lastIdx = arr.length - 1;\n    for (const old of idxs) {\n        const idx = Math.min(lastIdx, old + by);\n        if (idx <= lastIdx) {\n            arr.splice(idx, 0, arr.splice(old, 1)[0]);\n        }\n        lastIdx = lastIdx - 1;\n    }\n    return arr;\n}\nconst trackLabelFontSize = 12.8;\nexport function getOffset(model) {\n    const { prefersOffset } = model;\n    const { trackLabels } = getContainingView(model);\n    const track = getContainingTrack(model);\n    const trackName = getConf(track, 'name');\n    return trackLabels === 'overlapping' && !prefersOffset\n        ? measureText(trackName, trackLabelFontSize) + 100\n        : 10;\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2,3,4,5]}
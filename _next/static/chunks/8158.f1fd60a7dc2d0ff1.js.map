{"version":3,"file":"static/chunks/8158.f1fd60a7dc2d0ff1.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/MultiLinearWiggleDisplay/components/SourcesGrid.js","webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/MultiLinearWiggleDisplay/components/SetColorDialog.js","webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/MultiLinearWiggleDisplay/components/util.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { SanitizedHTML } from '@jbrowse/core/ui';\nimport ColorPicker, { ColorPopover } from '@jbrowse/core/ui/ColorPicker';\nimport { getStr, measureGridWidth } from '@jbrowse/core/util';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown';\nimport KeyboardDoubleArrowUpIcon from '@mui/icons-material/KeyboardDoubleArrowUp';\nimport { Button } from '@mui/material';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { makeStyles } from 'tss-react/mui';\nimport { moveDown, moveUp } from './util';\nconst useStyles = makeStyles()({\n    cell: {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n    },\n});\nfunction SourcesGrid({ rows, onChange, showTips, }) {\n    const { classes } = useStyles();\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [selected, setSelected] = useState([]);\n    const { name: _name, color: _color, baseUri: _baseUri, ...rest } = rows[0];\n    const [widgetColor, setWidgetColor] = useState('blue');\n    const [currSort, setCurrSort] = useState({\n        idx: 0,\n        field: null,\n    });\n    return (_jsxs(\"div\", { children: [_jsx(Button, { disabled: !selected.length, onClick: event => {\n                    setAnchorEl(event.currentTarget);\n                }, children: \"Change color of selected items\" }), _jsxs(Button, { onClick: () => {\n                    onChange(moveUp([...rows], selected));\n                }, disabled: !selected.length, children: [_jsx(KeyboardArrowUpIcon, {}), showTips ? 'Move selected items up' : null] }), _jsxs(Button, { onClick: () => {\n                    onChange(moveDown([...rows], selected));\n                }, disabled: !selected.length, children: [_jsx(KeyboardArrowDownIcon, {}), showTips ? 'Move selected items down' : null] }), _jsxs(Button, { onClick: () => {\n                    onChange(moveUp([...rows], selected, rows.length));\n                }, disabled: !selected.length, children: [_jsx(KeyboardDoubleArrowUpIcon, {}), showTips ? 'Move selected items to top' : null] }), _jsxs(Button, { onClick: () => {\n                    onChange(moveDown([...rows], selected, rows.length));\n                }, disabled: !selected.length, children: [_jsx(KeyboardDoubleArrowDownIcon, {}), showTips ? 'Move selected items to bottom' : null] }), _jsx(ColorPopover, { anchorEl: anchorEl, color: widgetColor, onChange: c => {\n                    setWidgetColor(c);\n                    selected.forEach(id => {\n                        const elt = rows.find(f => f.name === id);\n                        if (elt) {\n                            elt.color = c;\n                        }\n                    });\n                    onChange([...rows]);\n                }, onClose: () => {\n                    setAnchorEl(null);\n                } }), _jsx(\"div\", { style: { height: 400, width: '100%' }, children: _jsx(DataGrid, { getRowId: row => row.name, checkboxSelection: true, disableRowSelectionOnClick: true, onRowSelectionModelChange: arg => {\n                        setSelected(arg);\n                    }, rows: rows, rowHeight: 25, columnHeaderHeight: 33, columns: [\n                        {\n                            field: 'color',\n                            headerName: 'Color',\n                            renderCell: ({ value, id }) => (_jsx(ColorPicker, { color: value || 'blue', onChange: c => {\n                                    const elt = rows.find(f => f.name === id);\n                                    if (elt) {\n                                        elt.color = c;\n                                    }\n                                    onChange([...rows]);\n                                } })),\n                        },\n                        {\n                            field: 'name',\n                            headerName: 'Name',\n                            width: measureGridWidth(rows.map(r => r.name)),\n                        },\n                        ...Object.keys(rest).map(val => ({\n                            field: val,\n                            renderCell: ({ value }) => (_jsx(\"div\", { className: classes.cell, children: _jsx(SanitizedHTML, { html: getStr(value) }) })),\n                            width: measureGridWidth(rows.map(r => `${r[val]}`)),\n                        })),\n                    ], sortModel: [], onSortModelChange: args => {\n                        const sort = args[0];\n                        const idx = (currSort.idx + 1) % 2;\n                        const field = sort.field || currSort.field;\n                        setCurrSort({ idx, field });\n                        onChange(field\n                            ? [...rows].sort((a, b) => {\n                                const aa = getStr(a[field]);\n                                const bb = getStr(b[field]);\n                                return idx === 1\n                                    ? aa.localeCompare(bb)\n                                    : bb.localeCompare(aa);\n                            })\n                            : rows);\n                    } }) })] }));\n}\nexport default SourcesGrid;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport DraggableDialog from '@jbrowse/core/ui/DraggableDialog';\nimport { useLocalStorage } from '@jbrowse/core/util';\nimport { Button, DialogActions, DialogContent } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nimport SourcesGrid from './SourcesGrid';\nconst useStyles = makeStyles()({\n    content: {\n        minWidth: 800,\n    },\n    float: {\n        float: 'right',\n    },\n});\nexport default function SetColorDialog({ model, handleClose, }) {\n    const { classes } = useStyles();\n    const { sources } = model;\n    const [currLayout, setCurrLayout] = useState(structuredClone(sources || []));\n    const [showTips, setShowTips] = useLocalStorage('multiwiggle-showTips', false);\n    return (_jsxs(DraggableDialog, { open: true, onClose: handleClose, maxWidth: \"xl\", title: \"Multi-wiggle color/arrangement editor\", children: [_jsxs(DialogContent, { className: classes.content, children: [_jsx(Button, { variant: \"contained\", className: classes.float, onClick: () => {\n                            setShowTips(!showTips);\n                        }, children: showTips ? 'Hide tips' : 'Show tips' }), _jsx(\"br\", {}), showTips ? (_jsxs(_Fragment, { children: [\"Helpful tips\", _jsxs(\"ul\", { children: [_jsx(\"li\", { children: \"You can select rows in the table with the checkboxes\" }), _jsx(\"li\", { children: \"Multi-select is enabled with shift-click and control-click\" }), _jsx(\"li\", { children: \"The \\\"Move selected items up/down\\\" can re-arrange subtracks\" }), _jsx(\"li\", { children: \"Sorting the data grid itself can also re-arrange subtracks\" }), _jsx(\"li\", { children: \"Changes are applied when you hit Submit\" }), _jsx(\"li\", { children: \"You can click and drag the dialog box to move it on the screen\" }), _jsx(\"li\", { children: \"Columns in the table can be hidden using a vertical '...' menu on the right side of each column\" })] })] })) : null, _jsx(SourcesGrid, { rows: currLayout, onChange: setCurrLayout, showTips: showTips })] }), _jsxs(DialogActions, { children: [_jsx(Button, { variant: \"contained\", type: \"submit\", color: \"inherit\", onClick: () => {\n                            model.clearLayout();\n                            setCurrLayout(model.sources || []);\n                        }, children: \"Clear custom settings\" }), _jsx(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                            handleClose();\n                            setCurrLayout([...(model.sources || [])]);\n                        }, children: \"Cancel\" }), _jsx(Button, { variant: \"contained\", color: \"primary\", type: \"submit\", onClick: () => {\n                            model.setLayout(currLayout);\n                            handleClose();\n                        }, children: \"Submit\" })] })] }));\n}\n","import { getConf } from '@jbrowse/core/configuration';\nimport { getContainingTrack, getContainingView, measureText, } from '@jbrowse/core/util';\nexport function moveUp(arr, sel, by = 1) {\n    const idxs = sel\n        .map(l => arr.findIndex(v => v.name === l))\n        .sort((a, b) => a - b);\n    let lastIdx = 0;\n    for (const old of idxs) {\n        const idx = Math.max(lastIdx, old - by);\n        if (idx >= lastIdx) {\n            arr.splice(idx, 0, arr.splice(old, 1)[0]);\n        }\n        lastIdx = lastIdx + 1;\n    }\n    return arr;\n}\nexport function moveDown(arr, sel, by = 1) {\n    const idxs = sel\n        .map(l => arr.findIndex(v => v.name === l))\n        .sort((a, b) => b - a);\n    let lastIdx = arr.length - 1;\n    for (const old of idxs) {\n        const idx = Math.min(lastIdx, old + by);\n        if (idx <= lastIdx) {\n            arr.splice(idx, 0, arr.splice(old, 1)[0]);\n        }\n        lastIdx = lastIdx - 1;\n    }\n    return arr;\n}\nconst trackLabelFontSize = 12.8;\nexport function getOffset(model) {\n    const { prefersOffset } = model;\n    const { trackLabels } = getContainingView(model);\n    const track = getContainingTrack(model);\n    const trackName = getConf(track, 'name');\n    return trackLabels === 'overlapping' && !prefersOffset\n        ? measureText(trackName, trackLabelFontSize) + 100\n        : 10;\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2]}
{"version":3,"file":"static/chunks/1173.1d892a6e39164923.js","mappings":"sNAQA,iBAA8B,wBAAsB,CACpD,mBACA,aACA,oCACA,sCACA,qCACA,0BACA,qBACA,aAAuB,IAAgB,EACvC,WAAwB,kBAAY,MACpC,wBAA4C,kBAAY,aACxD,wBAA4C,kBAAY,aACxD,wBACA,CAAS,EACT,6CACA,6CACA,gBAA0B,GAAG,UAAG,EAAS,CACzC,CACA,sBAA+B,EAC/B,4CACA,CACA,mBACA,4BACA,CACA,yBAOA,OANA,aACA,6CAEA,MADA,mBACA,CACA,EAAa,EAEb,YAEA,uBAEA,OAAiB,KADjB,4BACiB,CACjB,CACA,qBACA,mBAAgB,UAA6B,MAC7C,MAAe,kBAAY,mDAC3B,CACA,iBACA,2BACA,wBAIA,MAFA,yBACA,mCACA,OACA,uCACA,EACA,SACA,WACA,iBACA,MACA,CACA,iBACA,cAAgB,2BAAwC,MACxD,MAAe,sBAAgB,WAC/B,IAAoB,QAAO,yBAC3B,eAAoB,GAAgB,EACpC,UACA,YACA,UACA,wBACA,oBACY,oBAAc,IAC1B,MAAkB,kBAAY,yEAC9B,qBACA,0BACwB,oBAAc,IACtC,qBAEA,WAAsC,eAAa,CAAC,QAAW,EAC/D,OACA,SACA,WACA,SACA,6BACA,mBACA,YAAqC,QAAQ,GAAG,EAAW,EAC3D,OACA,CAAqB,GACrB,CAAiB,CACjB,WACA,CAAa,GACb,YACA,CAAS,GACT,CACA,iBACA,CACA,6CACA,MAAe","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-bed/esm/BedTabixAdapter/BedTabixAdapter.js"],"sourcesContent":["import BED from '@gmod/bed';\nimport { TabixIndexedFile } from '@gmod/tabix';\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { SimpleFeature, updateStatus } from '@jbrowse/core/util';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { checkStopToken } from '@jbrowse/core/util/stopToken';\nimport { featureData } from '../util';\nclass BedTabixAdapter extends BaseFeatureDataAdapter {\n    constructor(config, getSubAdapter, pluginManager) {\n        super(config, getSubAdapter, pluginManager);\n        const bedGzLoc = this.getConf('bedGzLocation');\n        const type = this.getConf(['index', 'indexType']);\n        const loc = this.getConf(['index', 'location']);\n        const autoSql = this.getConf('autoSql');\n        const pm = this.pluginManager;\n        this.bed = new TabixIndexedFile({\n            filehandle: openLocation(bedGzLoc, pm),\n            csiFilehandle: type === 'CSI' ? openLocation(loc, pm) : undefined,\n            tbiFilehandle: type !== 'CSI' ? openLocation(loc, pm) : undefined,\n            chunkCacheSize: 50 * 2 ** 20,\n        });\n        this.columnNames = this.getConf('columnNames');\n        this.scoreColumn = this.getConf('scoreColumn');\n        this.parser = new BED({ autoSql });\n    }\n    async getRefNames(opts = {}) {\n        return this.bed.getReferenceSequenceNames(opts);\n    }\n    async getHeader(opts) {\n        return this.bed.getHeader(opts);\n    }\n    async getMetadataPre2(_opts) {\n        if (!this.setupP) {\n            this.setupP = this.getMetadataPre().catch((e) => {\n                this.setupP = undefined;\n                throw e;\n            });\n        }\n        return this.setupP;\n    }\n    async getMetadataPre() {\n        const meta = await this.bed.getMetadata();\n        return { meta };\n    }\n    async getMetadata(opts) {\n        const { statusCallback = () => { } } = opts || {};\n        return updateStatus('Downloading index', statusCallback, () => this.getMetadataPre2(opts));\n    }\n    async getNames() {\n        if (this.columnNames.length) {\n            return this.columnNames;\n        }\n        const header = await this.getHeader();\n        const defs = header.split(/\\n|\\r\\n|\\r/).filter(f => !!f);\n        const defline = defs.at(-1);\n        return (defline === null || defline === void 0 ? void 0 : defline.includes('\\t'))\n            ? defline\n                .slice(1)\n                .split('\\t')\n                .map(f => f.trim())\n            : undefined;\n    }\n    getFeatures(query, opts) {\n        const { stopToken, statusCallback = () => { } } = opts || {};\n        return ObservableCreate(async (observer) => {\n            const { meta } = await this.getMetadata();\n            const { columnNumbers } = meta;\n            const colRef = columnNumbers.ref - 1;\n            const colStart = columnNumbers.start - 1;\n            const colEnd = columnNumbers.end - 1;\n            const names = await this.getNames();\n            let start = performance.now();\n            checkStopToken(stopToken);\n            await updateStatus('Downloading features', statusCallback, () => this.bed.getLines(query.refName, query.start, query.end, {\n                lineCallback: (line, fileOffset) => {\n                    if (performance.now() - start > 200) {\n                        checkStopToken(stopToken);\n                        start = performance.now();\n                    }\n                    observer.next(new SimpleFeature(featureData({\n                        line,\n                        colRef,\n                        colStart,\n                        colEnd,\n                        scoreColumn: this.scoreColumn,\n                        parser: this.parser,\n                        uniqueId: `${this.id}-${fileOffset}`,\n                        names,\n                    })));\n                },\n                stopToken,\n            }));\n            observer.complete();\n        }, stopToken);\n    }\n    freeResources() { }\n}\nBedTabixAdapter.capabilities = ['getFeatures', 'getRefNames'];\nexport default BedTabixAdapter;\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
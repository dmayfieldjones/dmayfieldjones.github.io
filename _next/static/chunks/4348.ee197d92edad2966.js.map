{"version":3,"file":"static/chunks/4348.ee197d92edad2966.js","mappings":"gMAMA,iBAA+B,wBAAsB,CACrD,cACA,oBACA,qBACA,CACA,kBACA,MACA,4GACA,MACA,wCAEA,qBAEA,qBAEA,MADA,yBACA,cACA,CACA,iBACA,mBAAgB,QAA0B,cAAc,MACxD,MAAe,sBAAgB,WAC/B,MACA,6BACA,6BACA,8BACA,cACA,QACA,CAAkB,eAAmC,EAGrD,GAFA,kBACA,OACA,QACA,aACA,MACA,CAQA,iBAPA,OAAgC,OAAc,GAC9C,aACA,KACA,QACA,KACA,CAAa,IACb,KAAsB,OAAO,KAC7B,0CACA,mBACA,OAAkB,kBAAY,yBAC9B,YAAiC,aAA0B,MAC3D,0BACwB,oBAAc,IACtC,qBAEA,8BACA,IACA,IACA,IACA,eACA,iBACA,IAEA,oBACA,IAEA,SACA,IAGA,QACA,0BACA,aACA,qBACA,eACA,EACA,WAAsC,eAAa,EACnD,YAAqC,QAAQ,GAAG,IAAQ,EACxD,kBACA,UACA,UACA,OACA,CAAqB,EACrB,CACA,CAAa,EACb,YACA,CAAS,CACT,CACA,iBACA,CACA,iCACA,MAAe","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-gccontent/esm/GCContentAdapter/GCContentAdapter.js"],"sourcesContent":["import { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { SimpleFeature, updateStatus } from '@jbrowse/core/util';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { checkStopToken } from '@jbrowse/core/util/stopToken';\nimport { firstValueFrom } from 'rxjs';\nimport { toArray } from 'rxjs/operators';\nclass GCContentAdapter extends BaseFeatureDataAdapter {\n    constructor() {\n        super(...arguments);\n        this.gcMode = 'content';\n    }\n    async configure() {\n        var _a;\n        const adapter = await ((_a = this.getSubAdapter) === null || _a === void 0 ? void 0 : _a.call(this, this.getConf('sequenceAdapter')));\n        if (!adapter) {\n            throw new Error('Error getting subadapter');\n        }\n        return adapter.dataAdapter;\n    }\n    async getRefNames(opts) {\n        const adapter = await this.configure();\n        return adapter.getRefNames(opts);\n    }\n    getFeatures(query, opts) {\n        const { statusCallback = () => { }, stopToken } = opts || {};\n        return ObservableCreate(async (observer) => {\n            var _a;\n            const sequenceAdapter = await this.configure();\n            const windowSize = this.getConf('windowSize');\n            const windowDelta = this.getConf('windowDelta');\n            const hw = windowSize === 1 ? 1 : windowSize / 2;\n            const f = windowSize === 1;\n            let { start: queryStart, end: queryEnd } = query;\n            queryStart = Math.max(0, queryStart - hw);\n            queryEnd += hw;\n            if (queryEnd < 0 || queryStart > queryEnd) {\n                observer.complete();\n                return;\n            }\n            const feats = await firstValueFrom(sequenceAdapter\n                .getFeatures({\n                ...query,\n                start: queryStart,\n                end: queryEnd,\n            }, opts)\n                .pipe(toArray()));\n            const residues = ((_a = feats[0]) === null || _a === void 0 ? void 0 : _a.get('seq')) || '';\n            let start = performance.now();\n            await updateStatus('Calculating GC', statusCallback, () => {\n                for (let i = hw; i < residues.length - hw; i += windowDelta) {\n                    if (performance.now() - start > 400) {\n                        checkStopToken(stopToken);\n                        start = performance.now();\n                    }\n                    const r = f ? residues[i] : residues.slice(i - hw, i + hw);\n                    let nc = 0;\n                    let ng = 0;\n                    let len = 0;\n                    for (const letter of r) {\n                        if (letter === 'c' || letter === 'C') {\n                            nc++;\n                        }\n                        else if (letter === 'g' || letter === 'G') {\n                            ng++;\n                        }\n                        if (letter !== 'N') {\n                            len++;\n                        }\n                    }\n                    const pos = queryStart;\n                    const score = this.gcMode === 'content'\n                        ? (ng + nc) / (len || 1)\n                        : this.gcMode === 'skew'\n                            ? (ng - nc) / (ng + nc || 1)\n                            : 0;\n                    observer.next(new SimpleFeature({\n                        uniqueId: `${this.id}_${pos + i}`,\n                        refName: query.refName,\n                        start: pos + i,\n                        end: pos + i + windowDelta,\n                        score,\n                    }));\n                }\n            });\n            observer.complete();\n        });\n    }\n    freeResources() { }\n}\nGCContentAdapter.capabilities = ['hasLocalStats'];\nexport default GCContentAdapter;\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
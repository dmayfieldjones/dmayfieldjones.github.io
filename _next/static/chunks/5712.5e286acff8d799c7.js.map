{"version":3,"file":"static/chunks/5712.5e286acff8d799c7.js","mappings":"sNAIe,cACf,IAAY,uBAAqB,EACjC,UAAY,0BAAgC,EAC5C,MAA0B,cAAQ,IAAI,0BAA8C,GACpF,MAA0B,cAAQ,IAAI,0BAA8C,GACpF,0DACA,MAEA,8CACA,MAAY,UAAK,CAAC,QAAM,EAAI,gEAAmF,UAAK,CAAC,GAAa,EAAI,UAAW,SAAI,CAAC,GAAU,EAAI,iCAAmC,IAA8F,KAApF,SAAI,CAAC,GAAU,EAAI,6DAAiE,IAAsH,KAAjG,SAAI,CAAC,GAAU,EAAI,0EAA8E,EAAW,SAAI,CAAC,GAAS,EAAI,qBACxb,iBACA,CAAyB,+BAAkC,EAAG,SAAI,CAAC,GAAS,EAAI,qBAChF,iBACA,CAAyB,+BAAkC,GAAI,EAAG,SAAI,CAAC,GAAa,EAAI,SAAU,SAAI,CAAC,GAAM,EAAI,yDAAiE,cAAgB,0BAClM,kDACA,kDACA,GACA,CAAqB,mBAAsB,EAAG,GAAI,CAClD","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/shared/SetMinMaxDialog.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { Button, DialogActions, DialogContent, TextField, Typography, } from '@mui/material';\nexport default function SetMinMaxDialog(props) {\n    const { model, handleClose } = props;\n    const { minScore, maxScore, scaleType } = model;\n    const [min, setMin] = useState(`${minScore !== Number.MIN_VALUE ? minScore : ''}`);\n    const [max, setMax] = useState(`${maxScore !== Number.MAX_VALUE ? maxScore : ''}`);\n    const ok = min !== '' && max !== '' && !Number.isNaN(+min) && !Number.isNaN(+max)\n        ? +max > +min\n        : true;\n    const logOk = scaleType === 'log' && min !== '' && !Number.isNaN(+min) ? +min > 0 : true;\n    return (_jsxs(Dialog, { open: true, onClose: handleClose, title: \"Set min/max score for track\", children: [_jsxs(DialogContent, { children: [_jsx(Typography, { children: \"Enter min/max score: \" }), !ok ? (_jsx(Typography, { color: \"error\", children: \"Max is greater than or equal to min\" })) : null, !logOk ? (_jsx(Typography, { color: \"error\", children: \"Min score should be greater than 0 for log scale\" })) : null, _jsx(TextField, { value: min, onChange: event => {\n                            setMin(event.target.value);\n                        }, placeholder: \"Enter min score\" }), _jsx(TextField, { value: max, onChange: event => {\n                            setMax(event.target.value);\n                        }, placeholder: \"Enter max score\" })] }), _jsx(DialogActions, { children: _jsx(Button, { variant: \"contained\", color: \"primary\", type: \"submit\", style: { marginLeft: 20 }, disabled: !ok, onClick: () => {\n                        model.setMinScore(min !== '' && !Number.isNaN(+min) ? +min : undefined);\n                        model.setMaxScore(max !== '' && !Number.isNaN(+max) ? +max : undefined);\n                        handleClose();\n                    }, children: \"Submit\" }) })] }));\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
{"version":3,"file":"static/chunks/4660.399bfefaf0dec9f1.js","mappings":"iMAKA,MAAkB,uBAAU,QAC5B,OACA,mBACA,mBACA,CAAK,CACL,QACA,aACA,iBACA,eACA,CAAK,CACL,CAAC,EAUc,kBAA6B,EAAO,EACnD,YAAY,GAAU,IACtB,MAA0B,cAAQ,KAClC,MAAsC,cAAQ,eAAe,YAAY,GACzE,OAAY,eAAmB,CAAC,GAAK,EAAI,kBAA0B,CAC3D,eAAmB,WACf,eAAmB,iEACnB,eAAmB,wFACvB,eAAmB,CAAC,GAAS,EAAI,4IACzC,iBACA,EAAe,EACP,eAAmB,CAAC,GAAM,EAAI,qCAAyC,CAC/E,kCACY,eAAmB,UAAY,oDAAyD,EAAQ,IAM5G,iBALA,0BACA,qBACA,eAzBA,YACA,aAAY,GAAW,2BACvB,OAAW,YAAU,CACrB,CACA,8BACA,gCACA,EACU,uBAAiB,EAAG,OAAY,CAC1C,EAiBA,GACA,cACA,CAAqB,EACrB,QACA,EAAmB,GACX,eAAmB,CAAC,GAAS,EAAI,6CACzC,iBACA,EAAe,EACP,eAAmB,CAAC,GAAM,EAAI,oDACtC,MACA,MAAgC,gBAAU,IAC1C,QAKA,EAJA,OACA,GAA2B,oCAA6C,GAAG,WAAW,EACtF,+BACA,UAEA,IACA,eACA,CACA,SACA,IACA,oBACA,iBACA,cACA,CACA,4BACA,SAA4B,GAC5B,CAA4B,eACJ,4BAAsB,MAC9C,gBACA,UACA,8BACA,OACA,2BACA,SACA,0BACA,KAC6B,CACJ,EACzB,+CAEA,cACwB,+BAAyB,KACjD,eAEA,CACA,SACA,iBACA,iBAA2C,EAAE,IAC7C,CACA,EAAe,WACP,eAAmB,gCACnB,eAAmB,WACf,eAAmB,WAC/B,6FACA,IACgB,eAAmB,gBAAkB,yCAAyC,4BAA4B,+CAA+C,IACzK,IACA,iDACY,eAAmB,+HAC/B","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/MultiWiggleAddTrackWorkflow/AddTrackWorkflow.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { getSession, isElectron, isSessionModelWithWidgets, isSessionWithAddTracks, } from '@jbrowse/core/util';\nimport { storeBlobLocation } from '@jbrowse/core/util/tracks';\nimport { Button, Paper, TextField } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    paper: {\n        margin: theme.spacing(),\n        padding: theme.spacing(),\n    },\n    submit: {\n        marginTop: 25,\n        marginBottom: 100,\n        display: 'block',\n    },\n}));\nfunction makeFileLocation(file) {\n    const { webUtils } = window.require('electron');\n    return isElectron\n        ? {\n            localPath: webUtils.getPathForFile(file),\n            locationType: 'LocalPathLocation',\n        }\n        : storeBlobLocation({ blob: file });\n}\nexport default function MultiWiggleWidget({ model }) {\n    const { classes } = useStyles();\n    const [val, setVal] = useState('');\n    const [trackName, setTrackName] = useState(`MultiWiggle${+Date.now()}`);\n    return (React.createElement(Paper, { className: classes.paper },\n        React.createElement(\"ul\", null,\n            React.createElement(\"li\", null, \"Enter list of URLs for bigwig files in the textbox\"),\n            React.createElement(\"li\", null, \"Or, use the button below the text box to select files from your computer\")),\n        React.createElement(TextField, { multiline: true, fullWidth: true, rows: 10, value: val, placeholder: \"Paste list of URLs here, or use file selector below\", variant: \"outlined\", onChange: event => {\n                setVal(event.target.value);\n            } }),\n        React.createElement(Button, { variant: \"outlined\", component: \"label\" },\n            \"Choose Files from your computer\",\n            React.createElement(\"input\", { type: \"file\", hidden: true, multiple: true, onChange: ({ target }) => {\n                    const res = [...(target.files || [])].map(file => ({\n                        type: 'BigWigAdapter',\n                        bigWigLocation: makeFileLocation(file),\n                        source: file.name,\n                    }));\n                    setVal(JSON.stringify(res, null, 2));\n                } })),\n        React.createElement(TextField, { value: trackName, helperText: \"Track name\", onChange: event => {\n                setTrackName(event.target.value);\n            } }),\n        React.createElement(Button, { variant: \"contained\", className: classes.submit, onClick: () => {\n                var _a;\n                const session = getSession(model);\n                try {\n                    const trackId = [\n                        `${trackName.toLowerCase().replaceAll(' ', '_')}-${Date.now()}`,\n                        session.adminMode ? '' : '-sessionTrack',\n                    ].join('');\n                    let bigWigs;\n                    try {\n                        bigWigs = JSON.parse(val);\n                    }\n                    catch (e) {\n                        bigWigs = val\n                            .split(/\\n|\\r\\n|\\r/)\n                            .map(f => f.trim())\n                            .filter(f => !!f);\n                    }\n                    const obj = typeof bigWigs[0] === 'string'\n                        ? { bigWigs }\n                        : { subadapters: bigWigs };\n                    if (isSessionWithAddTracks(session)) {\n                        session.addTrackConf({\n                            trackId,\n                            type: 'MultiQuantitativeTrack',\n                            name: trackName,\n                            assemblyNames: [model.assembly],\n                            adapter: {\n                                type: 'MultiWiggleAdapter',\n                                ...obj,\n                            },\n                        });\n                        (_a = model.view) === null || _a === void 0 ? void 0 : _a.showTrack(trackId);\n                    }\n                    model.clearData();\n                    if (isSessionModelWithWidgets(session)) {\n                        session.hideWidget(model);\n                    }\n                }\n                catch (e) {\n                    console.error(e);\n                    session.notifyError(`${e}`, e);\n                }\n            } }, \"Submit\"),\n        React.createElement(\"p\", null, \"Additional notes: \"),\n        React.createElement(\"ul\", null,\n            React.createElement(\"li\", null,\n                \"The list of bigwig files in the text box can be a list of URLs, or a list of elements like\",\n                ' ',\n                React.createElement(\"code\", null, `[{\"type\":\"BigWigAdapter\",\"bigWigLocation\":{\"uri\":\"http://host/file.bw\"}, \"color\":\"green\",\"source\":\"name for subtrack\"}]`),\n                ' ',\n                \"to apply e.g. the color attribute to the view\"),\n            React.createElement(\"li\", null, \"Adding local files will update the textbox with JSON contents that are ready to submit with the \\\"Submit\\\" button\"))));\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
{"version":3,"file":"static/chunks/6406.6ebf96df9382da17.js","mappings":"qLAKe,iBAA8B,wBAAsB,CACnE,cACA,oBACA,qBACA,CACA,iBACA,WAAgB,iBAAsB,sBACtC,YACA,SAGA,MADA,qCACA,OACA,uCACA,EACA,SACA,WACA,iBACA,MACA,CACA,uCACA,MACA,aAAgB,GAAW,sBAC3B,OACA,MACA,OAEA,2EACA,MAAiC,IAAY,CAC7C,YAAwB,WAAkB,KAE1C,gBADA,KACA,WACA,YAA4B,WAAiB,KAC7C,SAAoC,QAAQ,GAAG,EAAQ,GAAG,EAAE,GAAG,EAAE,EACjE,KACA,KACA,QACA,cAAiD,EAAE,EACnD,GACA,mBAA0D,eAAa,EACvE,KACA,MACA,UACA,QACA,MACA,QACA,QACA,CAAyB,CACJ,EAErB,CACA,CACA,QACA,CACA,sBAA+B,EAC/B,IAAgB,YAAW,uBAC3B,qBACA,CACA,oBAA6B,EAC7B,yBACA,mCACA,QAA6B,wBAAkB,CAAC,kBAAY,SAC5D,uBACA,0DAGA,MADA,wBAA+C,SAAa,YAC5D,mCACA,KACA,IACA,KAAe,iCAA8C,IAC7D,aAEA,mBACA,KACA,KAAe,WAAkB,KACjC,WACA,iBACA,cACA,OACA,UAEA,YACA,CAEA,OACA,SACA,WACA,YAJA,2BAKA,CACA,CACA,iCAOA,OANA,uBACA,uEAEA,MADA,6BACA,CACA,EAAa,EAEb,sBAEA,mBAA4B,EAO5B,OANA,kBACA,8CAEA,MADA,wBACA,CACA,EAAa,EAEb,iBAEA,kBAAiC,EACjC,MAAe,sBAAgB,WAC/B,UAAoB,mBAAsB,EAC1C,uCACA,sCACA,SACA,CAAa,EACb,YACA,CAAS,CACT,CACA,iBACA","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-bed/esm/BedGraphAdapter/BedGraphAdapter.js"],"sourcesContent":["import IntervalTree from '@flatten-js/interval-tree';\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { SimpleFeature, fetchAndMaybeUnzip } from '@jbrowse/core/util';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nexport default class BedGraphAdapter extends BaseFeatureDataAdapter {\n    constructor() {\n        super(...arguments);\n        this.intervalTrees = {};\n    }\n    async getNames() {\n        const { header, columnNames } = await this.loadData();\n        if (columnNames.length) {\n            return columnNames;\n        }\n        const defs = header.split(/\\n|\\r\\n|\\r/).filter(f => !!f);\n        const defline = defs.at(-1);\n        return (defline === null || defline === void 0 ? void 0 : defline.includes('\\t'))\n            ? defline\n                .slice(1)\n                .split('\\t')\n                .map(field => field.trim())\n            : undefined;\n    }\n    async loadFeatureIntervalTreeHelper(refName) {\n        var _a;\n        const { features } = await this.loadData();\n        const lines = features[refName];\n        if (!lines) {\n            return undefined;\n        }\n        const names = ((_a = (await this.getNames())) === null || _a === void 0 ? void 0 : _a.slice(3)) || [];\n        const intervalTree = new IntervalTree();\n        for (let i = 0; i < lines.length; i++) {\n            const line = lines[i];\n            const [refName, s, e, ...rest] = line.split('\\t');\n            for (let j = 0; j < rest.length; j++) {\n                const uniqueId = `${this.id}-${refName}-${i}-${j}`;\n                const start = +s;\n                const end = +e;\n                const score = +rest[j];\n                const source = names[j] || `col${j}`;\n                if (score) {\n                    intervalTree.insert([start, end], new SimpleFeature({\n                        id: uniqueId,\n                        data: {\n                            refName,\n                            start,\n                            end,\n                            score,\n                            source,\n                        },\n                    }));\n                }\n            }\n        }\n        return intervalTree;\n    }\n    async getRefNames(opts = {}) {\n        const { features } = await this.loadData(opts);\n        return Object.keys(features);\n    }\n    async loadDataP(opts = {}) {\n        const pm = this.pluginManager;\n        const bedLoc = this.getConf('bedGraphLocation');\n        const buffer = await fetchAndMaybeUnzip(openLocation(bedLoc, pm), opts);\n        if (buffer.length > 536870888) {\n            throw new Error('Data exceeds maximum string length (512MB)');\n        }\n        const data = new TextDecoder('utf8', { fatal: true }).decode(buffer);\n        const lines = data.split(/\\n|\\r\\n|\\r/).filter(f => !!f);\n        const headerLines = [];\n        let i = 0;\n        for (; i < lines.length && lines[i].startsWith('#'); i++) {\n            headerLines.push(lines[i]);\n        }\n        const header = headerLines.join('\\n');\n        const features = {};\n        for (; i < lines.length; i++) {\n            const line = lines[i];\n            const tab = line.indexOf('\\t');\n            const refName = line.slice(0, tab);\n            if (!features[refName]) {\n                features[refName] = [];\n            }\n            features[refName].push(line);\n        }\n        const columnNames = this.getConf('columnNames');\n        return {\n            header,\n            features,\n            columnNames,\n        };\n    }\n    async loadFeatureIntervalTree(refName) {\n        if (!this.intervalTrees[refName]) {\n            this.intervalTrees[refName] = this.loadFeatureIntervalTreeHelper(refName).catch((e) => {\n                this.intervalTrees[refName] = undefined;\n                throw e;\n            });\n        }\n        return this.intervalTrees[refName];\n    }\n    async loadData(opts = {}) {\n        if (!this.bedFeatures) {\n            this.bedFeatures = this.loadDataP(opts).catch((e) => {\n                this.bedFeatures = undefined;\n                throw e;\n            });\n        }\n        return this.bedFeatures;\n    }\n    getFeatures(query, _opts = {}) {\n        return ObservableCreate(async (observer) => {\n            const { start, end, refName } = query;\n            const intervalTree = await this.loadFeatureIntervalTree(refName);\n            intervalTree === null || intervalTree === void 0 ? void 0 : intervalTree.search([start, end]).forEach(f => {\n                observer.next(f);\n            });\n            observer.complete();\n        });\n    }\n    freeResources() { }\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
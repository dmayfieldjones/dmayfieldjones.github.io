{"version":3,"file":"static/chunks/2039.7b57a904957578e9.js","mappings":"sPAMA,MAAkB,uBAAU,QAC5B,OACA,qBACA,mBACA,CAAK,CACL,OACA,mBACA,CAAK,CACL,CAAC,EACD,GACA,cACA,6BACA,gBACA,gBACA,sBACA,sBACA,gBACA,iBACA,wBACA,4CACA,mCACA,0BACA,CACA,cACA,SAAY,eAAoB,EAChC,MAAY,UAAK,CAAC,UAAS,EAAI,UAAW,SAAI,CAAC,GAAS,EAAI,mCAC5D,kBACA,EAAmB,gBACnB,aACA,KAA+B,EAAK,GAAG,EAAI,EAC3C,MAAwB,UAAK,QAAU,UAAW,SAAI,UAAY,yCAClE,iBACA,UAGA,YAEA,EAA+B,EAAG,SAAI,UAAY,qBAA8B,GAAI,GACpF,CAAa,GAAI,CACjB,CAwCA,MAvC0B,cAAQ,aAClC,CAsCe,GAtCf,IACA,UAAY,iBAAqB,EACjC,SAAY,GAAU,IACtB,UAAY,GAAW,EACvB,MAA0C,cAAQ,gBAClD,MAA0C,cAAQ,gBAClD,MAA0B,cAAQ,wDAClC,MAAoC,cAAQ,0DAC5C,MAAoC,cAAQ,iBAC5C,kCACA,+DACA,MAAY,SAAI,CAAC,QAAM,EAAI,kDAAqE,UAAK,CAAC,GAAa,EAAI,UAAW,UAAK,CAAC,GAAU,EAAI,kDAAoD,SAAI,CAAC,GAAI,EAAI,kBAA4B,qBAAwB,EAAG,SAAI,CAAC,GAAK,EAAI,8CAAyD,UAAK,QAAU,OAAS,eAAiB,WAAa,UAAK,QAAU,UAAW,SAAI,CAAC,GAAU,EAAI,0CAA4C,EAAG,SAAI,IAAY,iBAA4C,GAAI,EAAG,UAAK,QAAU,UAAW,SAAI,CAAC,GAAU,EAAI,8CAAgD,EAAG,SAAI,IAAY,iBAA4C,GAAI,GAAI,EAAG,EAAG,UAAK,CAAC,GAAK,EAAI,+CAA0D,SAAI,CAAC,GAAU,EAAI,mQAAqQ,EAAG,SAAI,CAAC,GAAS,EAAI,uCAC1kC,iBACA,CAA6B,gHAC7B,WACA,WACA,CAAiC,CACjC,CAA+B,EAAG,SAAI,CAAC,GAAS,EAAI,uCACpD,iBACA,CAA6B,+BAAkC,GAAI,EAAG,UAAK,CAAC,GAAK,EAAI,+CAA0D,SAAI,CAAC,GAAU,EAAI,+BAAiC,EAAG,SAAI,CAAC,GAAS,EAAI,uCACxN,iBACA,CAA6B,+BAAkC,GAAI,EAAG,UAAK,CAAC,GAAa,EAAI,UAAW,SAAI,CAAC,GAAM,EAAI,4EACvH,eACA,cACA,cACA,WACA,iBACA,CACA,MACA,OACA,EACA,MACA,CAAiC,EACjC,GACA,CAA6B,mBAAsB,EAAG,SAAI,CAAC,GAAM,EAAI,mDACrE,GACA,CAA6B,mBAAsB,GAAI,GAAI,EAAG,CAC9D,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/shared/components/FilterByTagDialog.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { Button, DialogActions, DialogContent, Link, Paper, TextField, Typography, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    paper: {\n        padding: theme.spacing(2),\n        margin: theme.spacing(2),\n    },\n    field: {\n        margin: theme.spacing(2),\n    },\n}));\nconst flagNames = [\n    'read paired',\n    'read mapped in proper pair',\n    'read unmapped',\n    'mate unmapped',\n    'read reverse strand',\n    'mate reverse strand',\n    'first in pair',\n    'second in pair',\n    'not primary alignment',\n    'read fails platform/vendor quality checks',\n    'read is PCR or optical duplicate',\n    'supplementary alignment',\n];\nfunction Bitmask(props) {\n    const { flag = 0, setFlag } = props;\n    return (_jsxs(_Fragment, { children: [_jsx(TextField, { type: \"number\", value: flag, onChange: event => {\n                    setFlag(+event.target.value);\n                } }), flagNames.map((name, index) => {\n                const val = flag & (1 << index);\n                const key = `${name}_${val}`;\n                return (_jsxs(\"div\", { children: [_jsx(\"input\", { type: \"checkbox\", checked: Boolean(val), onChange: event => {\n                                if (event.target.checked) {\n                                    setFlag(flag | (1 << index));\n                                }\n                                else {\n                                    setFlag(flag & ~(1 << index));\n                                }\n                            } }), _jsx(\"label\", { htmlFor: key, children: name })] }, key));\n            })] }));\n}\nconst FilterByTagDialog = observer(function (props) {\n    var _a, _b;\n    const { model, handleClose } = props;\n    const { classes } = useStyles();\n    const { filterBy } = model;\n    const [flagInclude, setFlagInclude] = useState(filterBy.flagInclude);\n    const [flagExclude, setFlagExclude] = useState(filterBy.flagExclude);\n    const [tag, setTag] = useState(((_a = filterBy.tagFilter) === null || _a === void 0 ? void 0 : _a.tag) || '');\n    const [tagValue, setTagValue] = useState(((_b = filterBy.tagFilter) === null || _b === void 0 ? void 0 : _b.value) || '');\n    const [readName, setReadName] = useState(filterBy.readName || '');\n    const validTag = /^[A-Za-z][A-Za-z0-9]$/.exec(tag);\n    const site = 'https://broadinstitute.github.io/picard/explain-flags.html';\n    return (_jsx(Dialog, { open: true, onClose: handleClose, title: \"Filter options\", children: _jsxs(DialogContent, { children: [_jsxs(Typography, { children: [\"Set filter bitmask options. Refer to \", _jsx(Link, { href: site, children: site }), ' ', \"for details\"] }), _jsx(Paper, { className: classes.paper, variant: \"outlined\", children: _jsxs(\"div\", { style: { display: 'flex' }, children: [_jsxs(\"div\", { children: [_jsx(Typography, { children: \"Read must have ALL these flags\" }), _jsx(Bitmask, { flag: flagInclude, setFlag: setFlagInclude })] }), _jsxs(\"div\", { children: [_jsx(Typography, { children: \"Read must have NONE of these flags\" }), _jsx(Bitmask, { flag: flagExclude, setFlag: setFlagExclude })] })] }) }), _jsxs(Paper, { className: classes.paper, variant: \"outlined\", children: [_jsx(Typography, { children: \"Filter by tag name and value. Use * in the value field to get all reads containing any value for that tag. Example: filter tag name SA with value * to get all split/supplementary reads. Other examples include HP for haplotype, or RG for read group\" }), _jsx(TextField, { className: classes.field, value: tag, onChange: event => {\n                                setTag(event.target.value);\n                            }, placeholder: \"Enter tag name\", error: tag.length === 2 && !validTag, helperText: tag.length === 2 && !validTag ? 'Not a valid tag' : '', slotProps: {\n                                htmlInput: {\n                                    maxLength: 2,\n                                },\n                            } }), _jsx(TextField, { className: classes.field, value: tagValue, onChange: event => {\n                                setTagValue(event.target.value);\n                            }, placeholder: \"Enter tag value\" })] }), _jsxs(Paper, { className: classes.paper, variant: \"outlined\", children: [_jsx(Typography, { children: \"Filter by read name\" }), _jsx(TextField, { className: classes.field, value: readName, onChange: event => {\n                                setReadName(event.target.value);\n                            }, placeholder: \"Enter read name\" })] }), _jsxs(DialogActions, { children: [_jsx(Button, { variant: \"contained\", color: \"primary\", autoFocus: true, type: \"submit\", onClick: () => {\n                                model.setFilterBy({\n                                    flagInclude,\n                                    flagExclude,\n                                    readName,\n                                    tagFilter: tag !== ''\n                                        ? {\n                                            tag,\n                                            value: tagValue,\n                                        }\n                                        : undefined,\n                                });\n                                handleClose();\n                            }, children: \"Submit\" }), _jsx(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                                handleClose();\n                            }, children: \"Cancel\" })] })] }) }));\n});\nexport default FilterByTagDialog;\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
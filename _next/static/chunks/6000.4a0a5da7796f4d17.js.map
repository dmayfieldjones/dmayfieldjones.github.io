{"version":3,"file":"static/chunks/6000.4a0a5da7796f4d17.js","mappings":"wSCGA,MAAkB,uBAAU,IAC5B,OACA,eACA,CACA,CAAC,EACc,oBAAqB,gCAAqC,EACzE,YAAY,GAAU,IACtB,MAAY,SAAI,CAAC,GAAgB,EAAI,qCAAuD,SAAI,CAAC,GAAQ,EAAI,qBAAsC,UAAiB,CACpK,2BCVO,oBAAsC,aAAoB,EACjE,MACA,sDACA,IAAsB,OAAa,WACnC,iBACA,mBACA,iCACA,gBACA,oBACA,OACA,MACA,aACA,yBACA,kBACA,CACA,CACA,kCACA,gCACA,OACA,MACA,aACA,oBACA,eACA,CACA,CACA,kBAUA,OACA,MACA,aACA,iBACA,oBACA,CAfA,EACA,oBACA,OACA,MACA,aACA,yBACA,gBAEA,CASA,CACO,cACP,kBAAsB,kBAAuB,KAC7C,KACA,oBAAkC,OAAa,KAC/C,EAAK,CACL,CACO,cACP,SAAc,wCAA4C,cCjDnD,+BAAsC,0DAAgF,EAC7H,oBAAY,GAAkB,EAC9B,6BACA,MACA,wBAAoC,GAAc,YAElD,YAAY,iCAAqC,EAA4B,CAC7E,UACA,UACA,CAAK,EAHwE,EAI7E,0BACA,GACA,oCACA,KACA,2BACA,YAAyB,EAAS,GAClC,IADkC,EAClC,CACA,CACA,wBACA,cACA,OAA4B,EAAQ,EACpC,CAAiB,CACjB,CACA,CAHoC,IAGpC,mBACA,cACA,OAA4B,EAAQ,qBACpC,CAAiB,CAEjB,EAAS,EAET,iBAAwB,EAAS,IACjC,GADiC,CACjC,mCACA,mCACA,UACA,iCAEA,oBACA,2BACA,CACA,UACA,cACA,MACA,cACA,CAAa,CACb,CACA,UACA,UACA,UACA,cACA,CAAa,CACb,EACA,2BACA,CACA,UACA,cACA,MACA,cACA,CAAa,CACb,CACA,UACA,UACA,UACA,cACA,CAAa,CACb,EACA,EACA,MAAU,UAAI,qDACd,sBACA,sBACA,yBACA,wBACA,CCjCA,MAhCuC,cAAQ,mBAAa,GAgC7C,WAhC6C,mBAgCf,EAAC,IAhCc,wBAAkE,EAC9H,SAAwC,cAAQ,KAChD,MAAgC,cAAQ,KACxC,MAAY,UAAK,CAAC,QAAM,EAAI,8EAAiG,UAAK,CAA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","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/BreakendMultiLevelOptionDialog.js","webpack://_N_E/./node_modules/@jbrowse/sv-core/esm/Checkbox2.js","webpack://_N_E/./node_modules/@jbrowse/sv-core/esm/util.js","webpack://_N_E/./node_modules/@jbrowse/sv-core/esm/navToMultiLevelBreak.js","webpack://_N_E/./node_modules/@jbrowse/sv-core/esm/BreakendMultiLevelOptionDialog.js","webpack://_N_E/./node_modules/@jbrowse/sv-core/esm/navToSingleLevelBreak.js","webpack://_N_E/./node_modules/@jbrowse/sv-core/esm/BreakendSingleLevelOptionDialog.js","webpack://_N_E/./node_modules/@jbrowse/sv-core/esm/index.js"],"sourcesContent":["export { BreakendMultiLevelOptionDialog as default } from '@jbrowse/sv-core';\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Checkbox, FormControlLabel } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()({\n    block: {\n        display: 'block',\n    },\n});\nexport default function Checkbox2({ checked, disabled, label, onChange, }) {\n    const { classes } = useStyles();\n    return (_jsx(FormControlLabel, { disabled: disabled, className: classes.block, control: _jsx(Checkbox, { checked: checked, onChange: onChange }), label: label }));\n}\n","import { parseBreakend } from '@gmod/vcf';\nexport function getBreakendCoveringRegions({ feature, assembly, }) {\n    var _a;\n    const alt = (_a = feature.get('ALT')) === null || _a === void 0 ? void 0 : _a[0];\n    const bnd = alt ? parseBreakend(alt) : undefined;\n    const startPos = feature.get('start');\n    const refName = feature.get('refName');\n    const f = (ref) => assembly.getCanonicalRefName(ref) || ref;\n    if (alt === '<TRA>') {\n        const INFO = feature.get('INFO');\n        return {\n            pos: startPos,\n            refName: f(refName),\n            mateRefName: f(INFO.CHR2[0]),\n            matePos: INFO.END[0] - 1,\n        };\n    }\n    else if (bnd === null || bnd === void 0 ? void 0 : bnd.MatePosition) {\n        const matePosition = bnd.MatePosition.split(':');\n        return {\n            pos: startPos,\n            refName: f(refName),\n            mateRefName: f(matePosition[0]),\n            matePos: +matePosition[1] - 1,\n        };\n    }\n    else if (feature.get('mate')) {\n        const mate = feature.get('mate');\n        return {\n            pos: startPos,\n            refName: f(refName),\n            mateRefName: f(mate.refName),\n            matePos: mate.start,\n        };\n    }\n    else {\n        return {\n            pos: startPos,\n            refName: f(refName),\n            mateRefName: f(refName),\n            matePos: feature.get('end'),\n        };\n    }\n}\nexport function stripIds(arr) {\n    return arr.map(({ id, displays, ...rest }) => ({\n        ...rest,\n        displays: displays.map(({ id, ...rest }) => rest),\n    }));\n}\nexport function makeTitle(f) {\n    return `${f.get('name') || f.get('id') || 'breakend'} split detail`;\n}\n","import { when } from '@jbrowse/core/util';\nimport { getBreakendCoveringRegions, makeTitle, stripIds } from './util';\nexport async function navToMultiLevelBreak({ stableViewId, feature, assemblyName, session, mirror, tracks: viewTracks = [], }) {\n    const { assemblyManager } = session;\n    const assembly = await assemblyManager.waitForAssembly(assemblyName);\n    if (!assembly) {\n        throw new Error(`assembly ${assemblyName} not found`);\n    }\n    const { refName, pos, mateRefName, matePos } = getBreakendCoveringRegions({\n        feature,\n        assembly: assembly,\n    });\n    let view = session.views.find(f => f.id === stableViewId);\n    if (!view) {\n        view = session.addView('BreakpointSplitView', {\n            id: stableViewId,\n            type: 'BreakpointSplitView',\n            displayName: makeTitle(feature),\n            views: [\n                {\n                    type: 'LinearGenomeView',\n                    hideHeader: true,\n                    tracks: stripIds(viewTracks),\n                },\n                {\n                    type: 'LinearGenomeView',\n                    hideHeader: true,\n                    tracks: stripIds(mirror ? [...viewTracks].reverse() : viewTracks),\n                },\n            ],\n        });\n    }\n    view.setDisplayName(makeTitle(feature));\n    const r1 = assembly.regions.find(r => r.refName === refName);\n    const r2 = assembly.regions.find(r => r.refName === mateRefName);\n    if (!r1 || !r2) {\n        throw new Error(\"can't find regions\");\n    }\n    await Promise.all([\n        view.views[0].navToLocations([\n            {\n                refName,\n                start: r1.start,\n                end: pos,\n                assemblyName,\n            },\n            {\n                refName,\n                start: pos + 1,\n                end: r1.end,\n                assemblyName,\n            },\n        ]),\n        view.views[1].navToLocations([\n            {\n                refName: mateRefName,\n                start: r2.start,\n                end: matePos,\n                assemblyName,\n            },\n            {\n                refName: mateRefName,\n                start: matePos + 1,\n                end: r2.end,\n                assemblyName,\n            },\n        ]),\n    ]);\n    await when(() => view.views[1].initialized && view.views[0].initialized);\n    view.views[1].zoomTo(10);\n    view.views[0].zoomTo(10);\n    view.views[1].centerAt(matePos, mateRefName);\n    view.views[0].centerAt(pos, refName);\n}\n","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { Button, DialogActions, DialogContent } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { getSnapshot } from 'mobx-state-tree';\nimport Checkbox2 from './Checkbox2';\nimport { navToMultiLevelBreak } from './navToMultiLevelBreak';\nconst BreakendMultiLevelOptionDialog = observer(function ({ session, handleClose, feature, assemblyName, stableViewId, view, }) {\n    const [copyTracks, setCopyTracks] = useState(true);\n    const [mirror, setMirror] = useState(true);\n    return (_jsxs(Dialog, { open: true, onClose: handleClose, title: \"Multi-level breakpoint split view options\", children: [_jsxs(DialogContent, { children: [_jsx(\"div\", { children: \"Launch multi-level breakpoint split view\" }), view ? (_jsxs(_Fragment, { children: [_jsx(Checkbox2, { checked: copyTracks, label: \"Copy tracks into the new view\", onChange: event => {\n                                    setCopyTracks(event.target.checked);\n                                } }), copyTracks ? (_jsx(Checkbox2, { checked: mirror, disabled: !copyTracks, label: \"Mirror the copied tracks (only available if copying tracks and using two level)\", onChange: event => {\n                                    setMirror(event.target.checked);\n                                } })) : null] })) : null] }), _jsxs(DialogActions, { children: [_jsx(Button, { onClick: () => {\n                            ;\n                            (async () => {\n                                try {\n                                    await navToMultiLevelBreak({\n                                        stableViewId,\n                                        session,\n                                        tracks: copyTracks && view\n                                            ? getSnapshot(view.tracks)\n                                            : [],\n                                        mirror,\n                                        feature,\n                                        assemblyName,\n                                    });\n                                }\n                                catch (e) {\n                                    console.error(e);\n                                    session.notifyError(`${e}`, e);\n                                }\n                            })();\n                            handleClose();\n                        }, variant: \"contained\", color: \"primary\", autoFocus: true, children: \"OK\" }), _jsx(Button, { color: \"secondary\", variant: \"contained\", onClick: () => {\n                            handleClose();\n                        }, children: \"Cancel\" })] })] }));\n});\nexport default BreakendMultiLevelOptionDialog;\n","import { gatherOverlaps, getSession, when } from '@jbrowse/core/util';\nimport { getSnapshot } from 'mobx-state-tree';\nimport { getBreakendCoveringRegions, makeTitle, stripIds } from './util';\nexport function singleLevelFocusedSnapshotFromBreakendFeature({ feature, session, assemblyName, windowSize = 0, }) {\n    const { assemblyManager } = session;\n    const assembly = assemblyManager.get(assemblyName);\n    if (!assembly) {\n        throw new Error(`assembly ${assemblyName} not found`);\n    }\n    if (!assembly.regions) {\n        throw new Error(`assembly ${assemblyName} regions not loaded`);\n    }\n    const coverage = getBreakendCoveringRegions({\n        feature,\n        assembly,\n    });\n    const { refName, mateRefName } = coverage;\n    const topRegion = assembly.regions.find(f => f.refName === refName);\n    const bottomRegion = assembly.regions.find(f => f.refName === mateRefName);\n    return {\n        coverage,\n        snap: {\n            type: 'BreakpointSplitView',\n            views: [\n                {\n                    type: 'LinearGenomeView',\n                    displayedRegions: gatherOverlaps([\n                        {\n                            ...topRegion,\n                            end: coverage.pos + windowSize,\n                            assemblyName,\n                        },\n                        {\n                            ...bottomRegion,\n                            start: coverage.matePos - windowSize,\n                            assemblyName,\n                        },\n                    ]),\n                },\n            ],\n            displayName: makeTitle(feature),\n        },\n    };\n}\nexport function singleLevelEncompassingSnapshotFromBreakendFeature({ feature, session, assemblyName, }) {\n    const { assemblyManager } = session;\n    const assembly = assemblyManager.get(assemblyName);\n    if (!assembly) {\n        throw new Error(`assembly ${assemblyName} not found`);\n    }\n    if (!assembly.regions) {\n        throw new Error(`assembly ${assemblyName} regions not loaded`);\n    }\n    const coverage = getBreakendCoveringRegions({\n        feature,\n        assembly,\n    });\n    const { refName, mateRefName } = coverage;\n    const topRegion = assembly.regions.find(f => f.refName === refName);\n    const bottomRegion = assembly.regions.find(f => f.refName === mateRefName);\n    return {\n        coverage,\n        snap: {\n            type: 'BreakpointSplitView',\n            views: [\n                {\n                    type: 'LinearGenomeView',\n                    displayedRegions: gatherOverlaps([\n                        { ...topRegion, assemblyName },\n                        { ...bottomRegion, assemblyName },\n                    ]),\n                },\n            ],\n            displayName: makeTitle(feature),\n        },\n    };\n}\nexport async function navToSingleLevelBreak({ stableViewId, feature, assemblyName, session, tracks, windowSize = 0, focusOnBreakends, }) {\n    var _a;\n    const { snap, coverage } = focusOnBreakends\n        ? singleLevelFocusedSnapshotFromBreakendFeature({\n            feature,\n            assemblyName,\n            session,\n            windowSize,\n        })\n        : singleLevelEncompassingSnapshotFromBreakendFeature({\n            feature,\n            assemblyName,\n            session,\n        });\n    const { refName, pos: startPos, mateRefName, matePos: endPos } = coverage;\n    let view = session.views.find(f => f.id === stableViewId);\n    if (!view) {\n        view = session.addView('BreakpointSplitView', {\n            ...snap,\n            views: [\n                {\n                    ...snap.views[0],\n                    tracks: tracks ? stripIds(getSnapshot(tracks)) : [],\n                },\n            ],\n        });\n    }\n    else {\n        (_a = view.views[0]) === null || _a === void 0 ? void 0 : _a.setDisplayedRegions(snap.views[0].displayedRegions);\n        view.setDisplayName(snap.displayName);\n    }\n    const lgv = view.views[0];\n    await when(() => lgv.initialized);\n    const l0 = lgv.bpToPx({\n        coord: Math.max(0, startPos - windowSize),\n        refName,\n    });\n    const r0 = lgv.bpToPx({\n        coord: endPos + windowSize,\n        refName: mateRefName,\n    });\n    if (l0 && r0) {\n        lgv.moveTo({\n            ...l0,\n            offset: l0.offsetPx,\n        }, {\n            ...r0,\n            offset: r0.offsetPx,\n        });\n    }\n    else {\n        getSession(lgv).notify('Unable to navigate to breakpoint');\n    }\n}\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { useLocalStorage } from '@jbrowse/core/util';\nimport { Button, DialogActions, DialogContent, TextField } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport Checkbox2 from './Checkbox2';\nimport { navToSingleLevelBreak } from './navToSingleLevelBreak';\nconst BreakendSingleLevelOptionDialog = observer(function ({ session, handleClose, feature, stableViewId, assemblyName, view, }) {\n    const [copyTracks, setCopyTracks] = useState(true);\n    const [focusOnBreakends, setFocusOnBreakends] = useState(true);\n    const [windowSize, setWindowSize] = useLocalStorage('breakpointWindowSize', '5000');\n    return (_jsxs(Dialog, { open: true, onClose: handleClose, title: \"Single-level breakpoint split view options\", children: [_jsxs(DialogContent, { children: [view ? (_jsx(Checkbox2, { checked: copyTracks, label: \"Copy tracks into the new view\", onChange: event => {\n                            setCopyTracks(event.target.checked);\n                        } })) : null, _jsx(Checkbox2, { checked: copyTracks, label: \"Focus on breakends\", onChange: event => {\n                            setFocusOnBreakends(event.target.checked);\n                        } }), _jsx(TextField, { label: \"Window size (bp)\", value: windowSize, onChange: event => {\n                            setWindowSize(event.target.value);\n                        } })] }), _jsxs(DialogActions, { children: [_jsx(Button, { onClick: () => {\n                            ;\n                            (async () => {\n                                try {\n                                    const { assemblyManager } = session;\n                                    const assembly = await assemblyManager.waitForAssembly(assemblyName);\n                                    if (!assembly) {\n                                        throw new Error(`assembly ${assemblyName} not found`);\n                                    }\n                                    await navToSingleLevelBreak({\n                                        feature,\n                                        assemblyName,\n                                        focusOnBreakends,\n                                        session,\n                                        stableViewId,\n                                        tracks: view === null || view === void 0 ? void 0 : view.tracks,\n                                        windowSize: +windowSize || 0,\n                                    });\n                                }\n                                catch (e) {\n                                    console.error(e);\n                                    session.notifyError(`${e}`, e);\n                                }\n                            })();\n                            handleClose();\n                        }, variant: \"contained\", color: \"primary\", autoFocus: true, children: \"OK\" }), _jsx(Button, { color: \"secondary\", variant: \"contained\", onClick: () => {\n                            handleClose();\n                        }, children: \"Cancel\" })] })] }));\n});\nexport default BreakendSingleLevelOptionDialog;\n","export { default as BreakendMultiLevelOptionDialog } from './BreakendMultiLevelOptionDialog';\nexport { default as BreakendSingleLevelOptionDialog } from './BreakendSingleLevelOptionDialog';\nexport * from './util';\nexport * from './navToSingleLevelBreak';\nexport * from './navToMultiLevelBreak';\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2,3,4,5,6,7]}
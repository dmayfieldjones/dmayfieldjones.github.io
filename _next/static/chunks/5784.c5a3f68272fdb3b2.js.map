{"version":3,"file":"static/chunks/5784.c5a3f68272fdb3b2.js","mappings":"0FAGA,IAAsB,CAItB,YACA,SACA,WAA0B,SAAa;AAAA,EAAI,MAJ3C,eAAoC,KAAK,sBAI8B,GACvE,UACA,iICPA,MAAeA,CAAAA,EAAAA,SAAAA,CAAAA,CAAaA,CAAC,CAAaC,EAAAA,EAAAA,GAAAA,CAAIA,CAAC,CAAP,MAAe,CACrDC,EAAG,qCACL,GAAI,SAAS,EAAC,yJCOd,MAAkB,uBAAU,IAC5B,eACA,YACA,CAAK,CACL,cACA,wBACA,CAAK,CACL,IACA,aACA,CAAK,CACJ,EACD,sBACA,MAAoB,gBAAU,IAC9B,YAAY,iBAA0B,EACtC,UACA,oDAEA,mCACA,oEAEA,eAAY,qBAA8B,EAC1C,qCACA,WACA,MACA,wBAAoC,GAAc,YAElD,MAA0B,aAAO,2BACjC,gBACA,mCACA,gBACA,UACA,WACA,CAAK,CACL,CAiFA,MAhF0B,cAAQ,gBAgFnB,CAhFgC,gBAAqB,EACpE,IAAY,WAAU,IACtB,MAA8B,cAAQ,GACtC,MAAgD,cAAQ,GACxD,MAA8B,cAAQ,KACtC,MAAgC,cAAQ,KACxC,MAAkC,cAAQ,KAC1C,YAAY,iBAA0B,EACtC,aACI,eAAS,MACb,0BAeA,MAdA,WACA,IACA,gCACA,gBACA,gDAEA,mBACA,IACA,CACA,SACA,iBACA,IACA,CACA,EAAS,GACT,KACA,SACA,CACA,CAAK,UACL,QACU,QAAc,WACxB,mBACA,mBACA,mBACA,eACA,KAA2B,EAAa,GAAG,EAAW,GAAG,EAAS,EAClE,qCACA,eAAmC,GAAK,WAAW,2BAAkC,kCAAkC,uBAAyC,GAQhK,OANA,GACA,GAA2B,aAAO,KAElC,GACA,GAA2B,gBAAU,KAErC,CACA,sCACA,KACA,CACA,CAAS,GACT,GACA,oBACA,MAAY,UAAK,CAAC,QAAM,EAAI,mCAC5B,IACA,cACA,CAAS,sCAA0C,UAAK,CAAC,GAAa,EAAI,YAAoB,SAAI,CAAC,GAAU,EAAI,0BAA6B,EAAM,EAAG,IAAgB,UAAK,CAAC,GAAS,EAAI,6CAA+C,SAAI,CAAC,GAAgB,EAAI,wCAAsD,GAAI,OAAW,SAAI,CAAC,GAAS,EAAI,mJACzV,yEACA,aACA,OACA,YACA,SACA,qBACiC,CACJ,CAC7B,CAA2B,EAAG,UAAK,CAAC,GAAS,EAAI,UAAW,SAAI,CAAC,GAAgB,EAAI,QAAS,SAAI,CAAC,GAAQ,EAAI,qBAC/G,mBACA,EAAuC,2BAA8B,EAAG,SAAI,CAAC,GAAgB,EAAI,QAAS,SAAI,CAAC,GAAQ,EAAI,qBAC3H,mBACA,EAAuC,8BAAiC,GAAI,EAAG,SAAI,CAAC,GAAU,EAAI,OAAS,UAAY,gEAAqE,GAAI,EAAG,UAAK,CAAC,GAAa,EAAI,UAAW,SAAI,CAAC,GAAM,EAAI,aACxN,IAAI,GAChC,MACA,cAFgC,EAGhC,KACA,CAA6B,KAC7B,CAAyB,8CAAiF,SAAI,CAAC,aAAe,GAAI,0CAAsD,EAAG,SAAI,CAAC,GAAM,EAAI,aAC9K,YAAM,mBAClC,mBAAoD,cACpD,CAA6B,uBAC7B,CAAyB,2CAA6D,SAAI,CAAC,EAAU,EAAI,EAAJ,SAAI,iBAA+B,EAAG,SAAI,CAAC,GAAM,EAAI,+CAA+D,GAAI,GAAI,CACjO,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/core/util/formatFastaStrings.js","webpack://_N_E/./node_modules/@mui/icons-material/esm/GetApp.js","webpack://_N_E/./node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearGenomeView/components/GetSequenceDialog.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.formatFastaLines = formatFastaLines;\nexports.formatSeqFasta = formatSeqFasta;\nfunction formatFastaLines(seqString) {\n    return seqString.replaceAll(/(.{1,80})/g, '$1\\n').trimEnd();\n}\nfunction formatSeqFasta(chunks) {\n    return chunks\n        .map(chunk => `>${chunk.header}\\n${formatFastaLines(chunk.seq)}`)\n        .join('\\n');\n}\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 9h-4V3H9v6H5l7 7zM5 18v2h14v-2z\"\n}), 'GetApp');","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { getConf } from '@jbrowse/core/configuration';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { ContentCopy as ContentCopyIcon } from '@jbrowse/core/ui/Icons';\nimport { complement, getSession, reverse } from '@jbrowse/core/util';\nimport { formatSeqFasta } from '@jbrowse/core/util/formatFastaStrings';\nimport GetAppIcon from '@mui/icons-material/GetApp';\nimport { Button, Checkbox, CircularProgress, Container, DialogActions, DialogContent, FormControlLabel, FormGroup, TextField, Typography, } from '@mui/material';\nimport copy from 'copy-to-clipboard';\nimport { saveAs } from 'file-saver';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()({\n    dialogContent: {\n        width: '80em',\n    },\n    textAreaFont: {\n        fontFamily: 'Courier New',\n    },\n    ml: {\n        marginLeft: 10,\n    },\n});\nasync function fetchSequence(model, regions) {\n    const session = getSession(model);\n    const { leftOffset, rightOffset } = model;\n    if (!leftOffset || !rightOffset) {\n        throw new Error('no offsets on model to use for range');\n    }\n    if (leftOffset.assemblyName !== rightOffset.assemblyName) {\n        throw new Error('not able to fetch sequences from multiple assemblies');\n    }\n    const { rpcManager, assemblyManager } = session;\n    const assemblyName = leftOffset.assemblyName || rightOffset.assemblyName || '';\n    const assembly = assemblyManager.get(assemblyName);\n    if (!assembly) {\n        throw new Error(`assembly ${assemblyName} not found`);\n    }\n    const adapterConfig = getConf(assembly, ['sequence', 'adapter']);\n    const sessionId = 'getSequence';\n    return rpcManager.call(sessionId, 'CoreGetFeatures', {\n        adapterConfig,\n        regions,\n        sessionId,\n    });\n}\nconst GetSequenceDialog = observer(function ({ model, handleClose, }) {\n    const { classes } = useStyles();\n    const [error, setError] = useState();\n    const [sequenceChunks, setSequenceChunks] = useState();\n    const [rev, setReverse] = useState(false);\n    const [copied, setCopied] = useState(false);\n    const [comp, setComplement] = useState(false);\n    const { leftOffset, rightOffset } = model;\n    const loading = Boolean(sequenceChunks === undefined);\n    useEffect(() => {\n        const controller = new AbortController();\n        (async () => {\n            try {\n                const selection = model.getSelectedRegions(leftOffset, rightOffset);\n                if (selection.length === 0) {\n                    throw new Error('Selected region is out of bounds');\n                }\n                const chunks = await fetchSequence(model, selection);\n                setSequenceChunks(chunks);\n            }\n            catch (e) {\n                console.error(e);\n                setError(e);\n            }\n        })();\n        return () => {\n            controller.abort();\n        };\n    }, [model, leftOffset, rightOffset]);\n    const sequence = sequenceChunks\n        ? formatSeqFasta(sequenceChunks.map(chunk => {\n            let chunkSeq = chunk.get('seq');\n            const chunkRefName = chunk.get('refName');\n            const chunkStart = chunk.get('start') + 1;\n            const chunkEnd = chunk.get('end');\n            const loc = `${chunkRefName}:${chunkStart}-${chunkEnd}`;\n            if ((chunkSeq === null || chunkSeq === void 0 ? void 0 : chunkSeq.length) !== chunkEnd - chunkStart + 1) {\n                throw new Error(`${loc} returned ${chunkSeq.length.toLocaleString()} bases, but should have returned ${(chunkEnd - chunkStart).toLocaleString()}`);\n            }\n            if (rev) {\n                chunkSeq = reverse(chunkSeq);\n            }\n            if (comp) {\n                chunkSeq = complement(chunkSeq);\n            }\n            return {\n                header: loc + (rev ? '-rev' : '') + (comp ? '-comp' : ''),\n                seq: chunkSeq,\n            };\n        }))\n        : '';\n    const sequenceTooLarge = sequence ? sequence.length > 1000000 : false;\n    return (_jsxs(Dialog, { maxWidth: \"xl\", open: true, onClose: () => {\n            handleClose();\n            model.setOffsets();\n        }, title: \"Reference sequence\", children: [_jsxs(DialogContent, { children: [error ? (_jsx(Typography, { color: \"error\", children: `${error}` })) : loading ? (_jsxs(Container, { children: [\"Retrieving reference sequence...\", _jsx(CircularProgress, { className: classes.ml, size: 20, disableShrink: true })] })) : null, _jsx(TextField, { \"data-testid\": \"rubberband-sequence\", variant: \"outlined\", multiline: true, minRows: 5, maxRows: 10, disabled: sequenceTooLarge, className: classes.dialogContent, fullWidth: true, value: sequenceTooLarge\n                            ? 'Reference sequence too large to display, use the download FASTA button'\n                            : sequence, slotProps: {\n                            input: {\n                                readOnly: true,\n                                classes: {\n                                    input: classes.textAreaFont,\n                                },\n                            },\n                        } }), _jsxs(FormGroup, { children: [_jsx(FormControlLabel, { control: _jsx(Checkbox, { value: rev, onChange: event => {\n                                        setReverse(event.target.checked);\n                                    } }), label: \"Reverse sequence\" }), _jsx(FormControlLabel, { control: _jsx(Checkbox, { value: comp, onChange: event => {\n                                        setComplement(event.target.checked);\n                                    } }), label: \"Complement sequence\" })] }), _jsx(Typography, { style: { margin: 10 }, children: \"Note: Check both boxes for the \\\"reverse complement\\\"\" })] }), _jsxs(DialogActions, { children: [_jsx(Button, { onClick: () => {\n                            copy(sequence);\n                            setCopied(true);\n                            setTimeout(() => {\n                                setCopied(false);\n                            }, 500);\n                        }, disabled: loading || !!error || sequenceTooLarge, color: \"primary\", startIcon: _jsx(ContentCopyIcon, {}), children: copied ? 'Copied' : 'Copy to clipboard' }), _jsx(Button, { onClick: () => {\n                            saveAs(new Blob([sequence || ''], {\n                                type: 'text/x-fasta;charset=utf-8',\n                            }), 'jbrowse_ref_seq.fa');\n                        }, disabled: loading || !!error, color: \"primary\", startIcon: _jsx(GetAppIcon, {}), children: \"Download FASTA\" }), _jsx(Button, { onClick: handleClose, variant: \"contained\", children: \"Close\" })] })] }));\n});\nexport default GetSequenceDialog;\n"],"names":["createSvgIcon","_jsx","d"],"sourceRoot":"","ignoreList":[0,1,2]}
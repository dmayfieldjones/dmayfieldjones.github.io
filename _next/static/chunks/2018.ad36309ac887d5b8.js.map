{"version":3,"file":"static/chunks/2018.ad36309ac887d5b8.js","mappings":"+LAMA,iBAA4B,wBAAsB,CAClD,kBACA,mBAAgB,UAA6B,MAC7C,qBACA,MAA2B,GAAM,EACjC,WAAwB,kBAAY,kCACpC,CAAS,EACT,QAA6B,kBAAY,mDACzC,cAAiB,WACjB,CACA,eAOA,OANA,aACA,wCAEA,MADA,mBACA,CACA,EAAa,EAEb,YAEA,qBACA,WAAgB,GAAS,oBACzB,gCACA,CACA,qBACA,MACA,IAAgB,UAAS,mBACzB,6DACA,CACA,wBACA,WAAgB,GAAS,oBACzB,MAAe,kBAAY,gBAC3B,CACA,kBAAiC,EACjC,YAAgB,iBAAsB,EACtC,SAAgB,sDAAkE,EAAI,EACtF,MAAe,sBAAgB,WAC/B,6BACA,6BACA,uCACA,QAAoB,GAAS,oBAK7B,YAJA,4BACA,KACA,kBACA,EAAa,EACb,CACA,GACA,aAEA,SAAoC,EAAO,GAAG,UAAe,GAAG,QAAW,GAAG,MAAS,EACvF,YACA,aACA,QACA,YACA,SACA,YACA,CAAiB,CACjB,CACA,YACA,CAAS,GACT,CACA,2CACA,OAAiB,iBACjB,CACA,iBACA,CACA,gBACA,gBACA,gBACA,iBACA,CACA,MAAe","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/BigWigAdapter/BigWigAdapter.js"],"sourcesContent":["import { BigWig } from '@gmod/bbi';\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { updateStatus } from '@jbrowse/core/util';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { rectifyStats } from '@jbrowse/core/util/stats';\nclass BigWigAdapter extends BaseFeatureDataAdapter {\n    async setupPre(opts) {\n        const { statusCallback = () => { } } = opts || {};\n        const pm = this.pluginManager;\n        const bigwig = new BigWig({\n            filehandle: openLocation(this.getConf('bigWigLocation'), pm),\n        });\n        const header = await updateStatus('Downloading bigwig header', statusCallback, () => bigwig.getHeader(opts));\n        return { bigwig, header };\n    }\n    async setup(opts) {\n        if (!this.setupP) {\n            this.setupP = this.setupPre(opts).catch((e) => {\n                this.setupP = undefined;\n                throw e;\n            });\n        }\n        return this.setupP;\n    }\n    async getRefNames(opts) {\n        const { header } = await this.setup(opts);\n        return Object.keys(header.refsByName);\n    }\n    async refIdToName(refId) {\n        var _a;\n        const { header } = await this.setup();\n        return (_a = header.refsByNumber[refId]) === null || _a === void 0 ? void 0 : _a.name;\n    }\n    async getGlobalStats(opts) {\n        const { header } = await this.setup(opts);\n        return rectifyStats(header.totalSummary);\n    }\n    getFeatures(region, opts = {}) {\n        const { refName, start, end } = region;\n        const { bpPerPx = 0, stopToken, resolution = 1, statusCallback = () => { }, } = opts;\n        return ObservableCreate(async (observer) => {\n            statusCallback('Downloading bigwig data');\n            const source = this.getConf('source');\n            const resolutionMultiplier = this.getConf('resolutionMultiplier');\n            const { bigwig } = await this.setup(opts);\n            const feats = await bigwig.getFeatures(refName, start, end, {\n                ...opts,\n                basesPerSpan: (bpPerPx / resolution) * resolutionMultiplier,\n            });\n            for (const data of feats) {\n                if (source) {\n                    data.source = source;\n                }\n                const uniqueId = `${source}:${region.refName}:${data.start}-${data.end}`;\n                data.refName = refName;\n                data.uniqueId = uniqueId;\n                observer.next({\n                    get: (str) => data[str],\n                    id: () => uniqueId,\n                    toJSON: () => data,\n                });\n            }\n            observer.complete();\n        }, stopToken);\n    }\n    async getMultiRegionFeatureDensityStats(_regions) {\n        return { featureDensity: 0 };\n    }\n    freeResources() { }\n}\nBigWigAdapter.capabilities = [\n    'hasResolution',\n    'hasLocalStats',\n    'hasGlobalStats',\n];\nexport default BigWigAdapter;\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
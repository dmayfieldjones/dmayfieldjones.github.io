{"version":3,"file":"static/chunks/7239.37bdc92ed6cd8c1b.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/AnnotGrid.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/VariantAnnotationTable.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/VariantSampleGrid.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/variantFieldDescriptions.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/VariantFeatureWidget.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { measureGridWidth } from '@jbrowse/core/util';\nimport { Checkbox, FormControlLabel, Typography } from '@mui/material';\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\nexport default function VariantAnnotPanel({ rows, columns, }) {\n    const [checked, setChecked] = useState(false);\n    const widths = columns.map(e => measureGridWidth(rows.map(r => r[e.field])));\n    return rows.length ? (React.createElement(\"div\", null,\n        React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: checked, onChange: event => {\n                    setChecked(event.target.checked);\n                } }), label: React.createElement(Typography, { variant: \"body2\" }, \"Show options\") }),\n        React.createElement(DataGrid, { rowHeight: 25, rows: rows, columns: columns.map((c, i) => ({ ...c, width: widths[i] })), slots: { toolbar: checked ? GridToolbar : null } }))) : null;\n}\n","import React from 'react';\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard';\nimport AnnotGrid from './AnnotGrid';\nexport default function VariantAnnotationTable({ data, fields, title, }) {\n    return data.length ? (React.createElement(BaseCard, { title: title },\n        React.createElement(AnnotGrid, { rows: data.map((elt, id) => ({\n                id,\n                ...Object.fromEntries(elt.split('|').map((e, i) => [fields[i], e])),\n            })), columns: fields.map(c => ({ field: c })) }))) : null;\n}\n","import React, { useState } from 'react';\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard';\nimport { measureGridWidth } from '@jbrowse/core/util';\nimport { Checkbox, FormControlLabel, TextField, Typography, } from '@mui/material';\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\nfunction SampleFilters({ columns, filter, setFilter, }) {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Typography, null, \"These filters can use a plain text search or regex style query, e.g. in the genotype field, entering 1 will query for all genotypes that include the first alternate allele e.g. 0|1 or 1|1, entering [1-9]\\\\d* will find any non-zero allele e.g. 0|2 or 2/33\"),\n        columns.map(({ field }) => (React.createElement(TextField, { key: `filter-${field}`, placeholder: `Filter ${field}`, value: filter[field] || '', onChange: event => {\n                setFilter({ ...filter, [field]: event.target.value });\n            } })))));\n}\nexport default function VariantSamples(props) {\n    var _a;\n    const { feature, descriptions = {} } = props;\n    const [filter, setFilter] = useState({});\n    const samples = (feature.samples || {});\n    const preFilteredRows = Object.entries(samples);\n    let error;\n    let rows = [];\n    const filters = Object.keys(filter);\n    try {\n        rows = preFilteredRows\n            .map(row => {\n            return {\n                ...Object.fromEntries(Object.entries(row[1]).map(e => [e[0], `${e[1]}`])),\n                sample: row[0],\n                id: row[0],\n            };\n        })\n            .filter(row => filters.length\n            ? filters.every(key => {\n                const currFilter = filter[key];\n                return currFilter\n                    ? new RegExp(currFilter, 'i').exec(row[key])\n                    : true;\n            })\n            : true);\n    }\n    catch (e) {\n        error = e;\n    }\n    const [checked, setChecked] = useState(false);\n    const keys = ['sample', ...Object.keys(((_a = preFilteredRows[0]) === null || _a === void 0 ? void 0 : _a[1]) || {})];\n    const widths = keys.map(e => measureGridWidth(rows.map(r => r[e])));\n    const columns = keys.map((field, index) => {\n        var _a, _b;\n        return ({\n            field,\n            description: (_b = (_a = descriptions === null || descriptions === void 0 ? void 0 : descriptions.FORMAT) === null || _a === void 0 ? void 0 : _a[field]) === null || _b === void 0 ? void 0 : _b.Description,\n            width: widths[index],\n        });\n    });\n    return !preFilteredRows.length ? null : (React.createElement(BaseCard, { ...props, title: \"Samples\" },\n        error ? React.createElement(Typography, { color: \"error\" }, `${error}`) : null,\n        React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: checked, onChange: event => {\n                    setChecked(event.target.checked);\n                } }), label: React.createElement(Typography, { variant: \"body2\" }, \"Show options\") }),\n        checked ? (React.createElement(SampleFilters, { setFilter: setFilter, columns: columns, filter: filter })) : null,\n        React.createElement(\"div\", { style: { display: 'flex', flexDirection: 'column' } },\n            React.createElement(DataGrid, { rows: rows, hideFooter: rows.length < 100, columns: columns, disableRowSelectionOnClick: true, rowHeight: 25, columnHeaderHeight: 35, disableColumnMenu: true, slots: { toolbar: checked ? GridToolbar : null }, slotProps: {\n                    toolbar: {\n                        printOptions: {\n                            disableToolbarButton: true,\n                        },\n                    },\n                } }))));\n}\n","export const variantFieldDescriptions = {\n    CHROM: 'chromosome: An identifier from the reference genome',\n    POS: 'position: The reference position, with the 1st base having position 1',\n    ID: 'identifier: Semi-colon separated list of unique identifiers where available',\n    REF: 'reference base(s): Each base must be one of A,C,G,T,N (case insensitive).',\n    ALT: 'alternate base(s): Comma-separated list of alternate non-reference alleles',\n    QUAL: 'quality: Phred-scaled quality score for the assertion made in ALT',\n    FILTER: 'filter status: PASS if this position has passed all filters, otherwise a semicolon-separated list of codes for filters that fail',\n};\n","import React, { Suspense, lazy } from 'react';\nimport { parseBreakend } from '@gmod/vcf';\nimport FeatureDetails from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/FeatureDetails';\nimport { Paper } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport VariantAnnotationTable from './VariantAnnotationTable';\nimport VariantSampleGrid from './VariantSampleGrid';\nimport { variantFieldDescriptions } from './variantFieldDescriptions';\nconst LaunchBreakendPanel = lazy(() => import('./LaunchBreakendPanel'));\nfunction AnnPanel({ descriptions, feature, }) {\n    var _a, _b, _c, _d, _e;\n    const annDesc = (_b = (_a = descriptions === null || descriptions === void 0 ? void 0 : descriptions.INFO) === null || _a === void 0 ? void 0 : _a.ANN) === null || _b === void 0 ? void 0 : _b.Description;\n    const annFields = ((_d = (_c = annDesc === null || annDesc === void 0 ? void 0 : annDesc.match(/.*Functional annotations:'(.*)'$/)) === null || _c === void 0 ? void 0 : _c[1]) === null || _d === void 0 ? void 0 : _d.split('|')) || [];\n    const ann = ((_e = feature.INFO) === null || _e === void 0 ? void 0 : _e.ANN) || [];\n    return (React.createElement(VariantAnnotationTable, { fields: annFields, data: ann, title: \"Variant ANN field\" }));\n}\nfunction CsqPanel({ descriptions, feature, }) {\n    var _a, _b, _c, _d, _e;\n    const csqDescription = (_b = (_a = descriptions === null || descriptions === void 0 ? void 0 : descriptions.INFO) === null || _a === void 0 ? void 0 : _a.CSQ) === null || _b === void 0 ? void 0 : _b.Description;\n    const csqFields = ((_d = (_c = csqDescription === null || csqDescription === void 0 ? void 0 : csqDescription.match(/.*Format: (.*)/)) === null || _c === void 0 ? void 0 : _c[1]) === null || _d === void 0 ? void 0 : _d.split('|')) || [];\n    const csq = ((_e = feature.INFO) === null || _e === void 0 ? void 0 : _e.CSQ) || [];\n    return (React.createElement(VariantAnnotationTable, { fields: csqFields, data: csq, title: \"Variant CSQ field\" }));\n}\nconst VariantFeatureWidget = observer(function (props) {\n    const { model } = props;\n    const { featureData, descriptions } = model;\n    const feat = JSON.parse(JSON.stringify(featureData));\n    const { samples, ALT, type = '', ...rest } = feat;\n    return (React.createElement(Paper, { \"data-testid\": \"variant-side-drawer\" },\n        React.createElement(FeatureDetails, { feature: rest, descriptions: { ...variantFieldDescriptions, ...descriptions }, ...props }),\n        React.createElement(CsqPanel, { feature: rest, descriptions: descriptions }),\n        React.createElement(AnnPanel, { feature: rest, descriptions: descriptions }),\n        React.createElement(Suspense, { fallback: null },\n            type === 'breakend' ? (React.createElement(LaunchBreakendPanel, { feature: feat, locStrings: feat.ALT.map((alt) => { var _a; return ((_a = parseBreakend(alt)) === null || _a === void 0 ? void 0 : _a.MatePosition) || ''; }), model: model })) : null,\n            type === 'translocation' ? (React.createElement(LaunchBreakendPanel, { feature: feat, model: model, locStrings: [`${feat.INFO.CHR2[0]}:${feat.INFO.END}`] })) : null,\n            type === 'paired_feature' ? (React.createElement(LaunchBreakendPanel, { feature: feat, model: model, locStrings: [`${feat.mate.refName}:${feat.mate.start}`] })) : null,\n            type.includes('inversion') ||\n                type.includes('deletion') ||\n                type.includes('duplication') ||\n                type.includes('cnv') ||\n                type.includes('sv') ? (React.createElement(LaunchBreakendPanel, { feature: {\n                    uniqueId: 'random',\n                    refName: feat.refName,\n                    start: feat.start,\n                    end: feat.start + 1,\n                    mate: {\n                        refName: feat.refName,\n                        start: feat.end,\n                        end: feat.end + 1,\n                    },\n                }, model: model, locStrings: [`${feat.refName}:${feat.end}`] })) : null),\n        React.createElement(VariantSampleGrid, { feature: feat, ...props, descriptions: descriptions })));\n});\nexport default VariantFeatureWidget;\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2,3,4]}
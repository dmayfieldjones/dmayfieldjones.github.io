{"version":3,"file":"static/chunks/3516.2fd5b7cdbdedb5aa.js","mappings":"kMAKO,sBACP,WAAY,QAAa,EACzB,gBAAY,GAAiB,EAE7B,CAAY,2CAAsD,CADjD,sBAAiB,IAElC,oCACA,MAA2B,GAAU,SACrC,UACA,QACA,CAAS,EACT,mCACA,4BACA,KACA,OACA,EACA,CACA,aAAmC,UAAK,CAAC,UAAS,EAAI,UAAW,SAAI,SAAW,sCAAoD,EAAG,SAAI,SAAW,oBAA+C,GAAI,CACzM,CAAiB,CACjB,CAEA,eAAgB,6CAAoD,CAAE,MAAe,MACrF,OACA,EACA,0BACA,KACA,KACA,WAA4B,mBAAa,OACzC,YACA,uBACa,EACb,CACK,GACL,MAAY,SAAI,CAAC,UAAS,EAAI,2BAC9B,aAAoB,aAAoB,EAExC,EAA2B,QAAK,MAChC,MAAoB,UAAK,CAAC,UAAQ,EAAI,UAAW,SAAI,SAAW,SAAU,SAAI,aAAe,cAAsB,SAAI,SAAW,4BAA8D,EAAG,EAAG,EAAG,SAAI,MAAQ,uBAAwB,EAF7O,EAE6O,CAAQ,aAAe,SAAI,MAAQ,iBAAkB,EAAO,YAAc,SAAI,CAAC,gBAAc,EAAI,YAAsB,EAAG,EAAG,GAAI,SAAU,EAAM,EAC9X,CAAS,EAAG,CACZ","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-linear-genome-view/esm/BaseLinearDisplay/models/renderSvg.js"],"sourcesContent":["import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment } from 'react';\nimport { ReactRendering, getContainingView, getViewParams, } from '@jbrowse/core/util';\nimport BlockState, { renderBlockData } from './serverSideRenderedBlock';\nimport { getId } from './util';\nexport async function renderBaseLinearDisplaySvg(self, opts) {\n    const { height, id } = self;\n    const { overrideHeight } = opts;\n    const view = getContainingView(self);\n    const { offsetPx: viewOffsetPx, roundedDynamicBlocks, width } = view;\n    const renderings = await Promise.all(roundedDynamicBlocks.map(async (block) => {\n        const blockState = BlockState.create({\n            key: block.key,\n            region: block,\n        });\n        const cannotBeRenderedReason = self.regionCannotBeRenderedText(block) ||\n            self.regionCannotBeRendered(block);\n        if (cannotBeRenderedReason) {\n            return [\n                block,\n                {\n                    reactElement: (_jsxs(_Fragment, { children: [_jsx(\"rect\", { x: 0, y: 0, width: width, height: 20, fill: \"#aaa\" }), _jsx(\"text\", { x: 0, y: 15, children: cannotBeRenderedReason })] })),\n                },\n            ];\n        }\n        const { rpcManager, renderArgs, renderProps, rendererType } = renderBlockData(blockState, self);\n        return [\n            block,\n            await rendererType.renderInClient(rpcManager, {\n                ...renderArgs,\n                ...renderProps,\n                viewParams: getViewParams(self, true),\n                exportSVG: opts,\n                theme: opts.theme || renderProps.theme,\n            }),\n        ];\n    }));\n    return (_jsx(_Fragment, { children: renderings.map(([block, rendering], index) => {\n            const { offsetPx, widthPx } = block;\n            const offset = offsetPx - viewOffsetPx;\n            const clipid = getId(id, index);\n            return (_jsxs(Fragment, { children: [_jsx(\"defs\", { children: _jsx(\"clipPath\", { id: clipid, children: _jsx(\"rect\", { x: 0, y: 0, width: widthPx, height: overrideHeight || height }) }) }), _jsx(\"g\", { transform: `translate(${offset} 0)`, children: _jsx(\"g\", { clipPath: `url(#${clipid})`, children: _jsx(ReactRendering, { rendering: rendering }) }) })] }, `frag-${index}`));\n        }) }));\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
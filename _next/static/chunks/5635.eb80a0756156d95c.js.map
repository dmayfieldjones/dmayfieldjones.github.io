{"version":3,"file":"static/chunks/5635.eb80a0756156d95c.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/DraggableDialog.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/util.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/SourcesGrid.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/BulkEditPanel.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/RowPalettizer.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/SetColorDialog.js"],"sourcesContent":["import React, { useRef } from 'react';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { Dialog, DialogTitle, Divider, IconButton, Paper, ScopedCssBaseline, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport Draggable from 'react-draggable';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    closeButton: {\n        position: 'absolute',\n        right: theme.spacing(1),\n        top: theme.spacing(1),\n        color: theme.palette.grey[500],\n    },\n}));\nfunction PaperComponent(props) {\n    const ref = useRef(null);\n    return (React.createElement(Draggable, { nodeRef: ref, cancel: '[class*=\"MuiDialogContent-root\"]', onStart: arg => { var _a, _b; return (_b = (_a = arg.target) === null || _a === void 0 ? void 0 : _a.className) === null || _b === void 0 ? void 0 : _b.includes('MuiDialogTitle'); } },\n        React.createElement(Paper, { ref: ref, ...props })));\n}\nconst DraggableDialog = observer(function DraggableDialog(props) {\n    const { classes } = useStyles();\n    const { title, children, onClose } = props;\n    return (React.createElement(Dialog, { ...props, PaperComponent: PaperComponent },\n        React.createElement(ScopedCssBaseline, null,\n            React.createElement(DialogTitle, { style: { cursor: 'move' } },\n                title,\n                onClose ? (React.createElement(IconButton, { className: classes.closeButton, onClick: () => {\n                        onClose();\n                    } },\n                    React.createElement(CloseIcon, null))) : null),\n            React.createElement(Divider, null),\n            children)));\n});\nexport default DraggableDialog;\n","export function moveUp(arr, sel, by = 1) {\n    const idxs = sel\n        .map(l => arr.findIndex(v => v.name === l))\n        .sort((a, b) => a - b);\n    let lastIdx = 0;\n    for (const old of idxs) {\n        const idx = Math.max(lastIdx, old - by);\n        if (idx >= lastIdx) {\n            arr.splice(idx, 0, arr.splice(old, 1)[0]);\n        }\n        lastIdx = lastIdx + 1;\n    }\n    return arr;\n}\nexport function moveDown(arr, sel, by = 1) {\n    const idxs = sel\n        .map(l => arr.findIndex(v => v.name === l))\n        .sort((a, b) => b - a);\n    let lastIdx = arr.length - 1;\n    for (const old of idxs) {\n        const idx = Math.min(lastIdx, old + by);\n        if (idx <= lastIdx) {\n            arr.splice(idx, 0, arr.splice(old, 1)[0]);\n        }\n        lastIdx = lastIdx - 1;\n    }\n    return arr;\n}\n","import React, { useState } from 'react';\nimport { SanitizedHTML } from '@jbrowse/core/ui';\nimport ColorPicker, { ColorPopover } from '@jbrowse/core/ui/ColorPicker';\nimport { getStr, measureGridWidth } from '@jbrowse/core/util';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown';\nimport KeyboardDoubleArrowUpIcon from '@mui/icons-material/KeyboardDoubleArrowUp';\nimport { Button } from '@mui/material';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { makeStyles } from 'tss-react/mui';\nimport { moveDown, moveUp } from './util';\nconst useStyles = makeStyles()({\n    cell: {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n    },\n});\nfunction SourcesGrid({ rows, onChange, showTips, }) {\n    const { classes } = useStyles();\n    const [selected, setSelected] = useState([]);\n    const { name: _name, color: _color, baseUri: _baseUri, ...rest } = rows[0];\n    const [currSort, setCurrSort] = useState({\n        idx: 0,\n        field: null,\n    });\n    return (React.createElement(\"div\", null,\n        React.createElement(GridHeader, { selected: selected, rows: rows, showTips: showTips, onChange: onChange }),\n        React.createElement(\"div\", { style: { height: 400, width: '100%' } },\n            React.createElement(DataGrid, { getRowId: row => row.name, checkboxSelection: true, disableRowSelectionOnClick: true, onRowSelectionModelChange: arg => {\n                    setSelected(arg);\n                }, rows: rows, rowHeight: 25, columnHeaderHeight: 33, columns: [\n                    {\n                        field: 'color',\n                        headerName: 'Color',\n                        renderCell: params => {\n                            const { value, id } = params;\n                            return (React.createElement(ColorPicker, { color: value || 'blue', onChange: c => {\n                                    const elt = rows.find(f => f.name === id);\n                                    if (elt) {\n                                        elt.color = c;\n                                    }\n                                    onChange([...rows]);\n                                } }));\n                        },\n                    },\n                    {\n                        field: 'name',\n                        headerName: 'Name',\n                        width: measureGridWidth(rows.map(r => r.name)),\n                    },\n                    ...Object.keys(rest).map(val => ({\n                        field: val,\n                        renderCell: ({ value }) => (React.createElement(\"div\", { className: classes.cell },\n                            React.createElement(SanitizedHTML, { html: getStr(value) }))),\n                        width: measureGridWidth(rows.map(r => `${r[val]}`)),\n                    })),\n                ], sortModel: [], onSortModelChange: args => {\n                    const sort = args[0];\n                    const idx = (currSort.idx + 1) % 2;\n                    const field = sort.field || currSort.field;\n                    setCurrSort({ idx, field });\n                    onChange(field\n                        ? [...rows].sort((a, b) => {\n                            const aa = getStr(a[field]);\n                            const bb = getStr(b[field]);\n                            return idx === 1\n                                ? aa.localeCompare(bb)\n                                : bb.localeCompare(aa);\n                        })\n                        : rows);\n                } }))));\n}\nfunction GridHeader({ selected, onChange, rows, showTips, }) {\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [widgetColor, setWidgetColor] = useState('blue');\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Button, { disabled: !selected.length, onClick: event => {\n                setAnchorEl(event.currentTarget);\n            } }, \"Change color of selected items\"),\n        React.createElement(Button, { onClick: () => {\n                onChange(moveUp([...rows], selected));\n            }, disabled: !selected.length },\n            React.createElement(KeyboardArrowUpIcon, null),\n            showTips ? 'Move selected items up' : null),\n        React.createElement(Button, { onClick: () => {\n                onChange(moveDown([...rows], selected));\n            }, disabled: !selected.length },\n            React.createElement(KeyboardArrowDownIcon, null),\n            showTips ? 'Move selected items down' : null),\n        React.createElement(Button, { onClick: () => {\n                onChange(moveUp([...rows], selected, rows.length));\n            }, disabled: !selected.length },\n            React.createElement(KeyboardDoubleArrowUpIcon, null),\n            showTips ? 'Move selected items to top' : null),\n        React.createElement(Button, { onClick: () => {\n                onChange(moveDown([...rows], selected, rows.length));\n            }, disabled: !selected.length },\n            React.createElement(KeyboardDoubleArrowDownIcon, null),\n            showTips ? 'Move selected items to bottom' : null),\n        React.createElement(ColorPopover, { anchorEl: anchorEl, color: widgetColor, onChange: c => {\n                setWidgetColor(c);\n                selected.forEach(id => {\n                    const elt = rows.find(f => f.name === id);\n                    if (elt) {\n                        elt.color = c;\n                    }\n                });\n                onChange([...rows]);\n            }, onClose: () => {\n                setAnchorEl(null);\n            } })));\n}\nexport default SourcesGrid;\n","import React, { useState } from 'react';\nimport { ErrorMessage } from '@jbrowse/core/ui';\nimport { Button, TextField, Typography } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()({\n    textAreaFont: {\n        fontFamily: 'Courier New',\n    },\n});\nexport default function BulkEditPanel({ setCurrLayout, currLayout, }) {\n    const { classes } = useStyles();\n    const [val, setVal] = useState('');\n    const [error, setError] = useState();\n    return (React.createElement(\"div\", null,\n        React.createElement(Typography, null, \"Paste CSV or TSV. If a header column is present. First line is a header. If a column called \\\"name\\\" is present, it uses that to connect to IDs in the table, otherwise it uses the first column no.\"),\n        React.createElement(TextField, { variant: \"outlined\", multiline: true, minRows: 5, placeholder: 'name,population\\nHG00098,GBR\\nHG00101,GBR\\nHG00459,CHS\\n...', maxRows: 10, fullWidth: true, value: val, onChange: event => {\n                setVal(event.target.value);\n            }, slotProps: {\n                input: {\n                    classes: {\n                        input: classes.textAreaFont,\n                    },\n                },\n            } }),\n        React.createElement(Button, { variant: \"contained\", onClick: () => {\n                const lines = val\n                    .split('\\n')\n                    .map(f => f.trim())\n                    .filter(f => !!f);\n                const fields = lines[0].split(/[,\\t]/gm);\n                if (fields.includes('name')) {\n                    setError('');\n                    const oldLayout = currLayout.map(record => [record.name, record]);\n                    const newData = Object.fromEntries(lines.slice(1).map(line => {\n                        const cols = line.split(/[,\\t]/gm);\n                        const newRecord = Object.fromEntries(cols.map((col, idx) => [fields[idx], col]));\n                        return [\n                            newRecord.name,\n                            { ...newRecord, ...oldLayout[newRecord.name] },\n                        ];\n                    }));\n                    setCurrLayout(currLayout.map(record => ({\n                        ...record,\n                        ...newData[record.name],\n                    })));\n                }\n                else {\n                    setError(new Error('No \"name\" column found on line 1'));\n                }\n            } }, \"Update rows\"),\n        React.createElement(Button, { variant: \"contained\", onClick: () => {\n                const lines = val\n                    .split('\\n')\n                    .map(f => f.trim())\n                    .filter(f => !!f);\n                const fields = lines[0].split(/[,\\t]/gm);\n                if (fields.includes('name')) {\n                    setError('');\n                    const oldLayout = currLayout.map(record => [record.name, record]);\n                    const newData = Object.fromEntries(lines.slice(1).map(line => {\n                        const cols = line.split(/[,\\t]/gm);\n                        const newRecord = Object.fromEntries(cols.map((col, idx) => [fields[idx], col]));\n                        return [\n                            newRecord.name,\n                            { ...newRecord, ...oldLayout[newRecord.name] },\n                        ];\n                    }));\n                    setCurrLayout(currLayout.map(record => ({\n                        ...newData[record.name],\n                    })));\n                }\n                else {\n                    setError(new Error('No \"name\" column found on line 1'));\n                }\n            } }, \"Replace rows\"),\n        error ? React.createElement(ErrorMessage, { error: error }) : null));\n}\n","import React from 'react';\nimport { set1 } from '@jbrowse/core/ui/colors';\nimport { Button } from '@mui/material';\nimport { randomColor } from '../util';\nexport default function RowPalettizer({ setCurrLayout, currLayout, }) {\n    var _a;\n    return (React.createElement(\"div\", null, Object.keys((_a = currLayout[0]) !== null && _a !== void 0 ? _a : [])\n        .filter(f => f !== 'name' && f !== 'color')\n        .map(r => {\n        return (React.createElement(Button, { key: r, onClick: () => {\n                const map = new Map();\n                for (const row of currLayout) {\n                    const val = map.get(row[r]);\n                    if (!val) {\n                        map.set(row[r], 1);\n                    }\n                    else {\n                        map.set(row[r], val + 1);\n                    }\n                }\n                const ret = Object.fromEntries([...map.entries()]\n                    .sort((a, b) => a[1] - b[1])\n                    .map((r, idx) => [r[0], set1[idx] || randomColor(r[0])]));\n                setCurrLayout(currLayout.map(row => ({\n                    ...row,\n                    color: ret[row[r]],\n                })));\n            } },\n            \"Palettize \",\n            r));\n    })));\n}\n","import React, { useState } from 'react';\nimport { useLocalStorage } from '@jbrowse/core/util';\nimport { Button, DialogActions, DialogContent } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nimport DraggableDialog from './DraggableDialog';\nimport SourcesGrid from './SourcesGrid';\nimport BulkEditPanel from './BulkEditPanel';\nimport RowPalettizer from './RowPalettizer';\nconst useStyles = makeStyles()({\n    content: {\n        minWidth: 800,\n    },\n    fr: {\n        float: 'right',\n    },\n    textAreaFont: {\n        fontFamily: 'Courier New',\n    },\n});\nexport default function SetColorDialog({ model, handleClose, }) {\n    const { classes } = useStyles();\n    const { sources } = model;\n    const [showBulkEditor, setShowBulkEditor] = useState(false);\n    const [currLayout, setCurrLayout] = useState(sources || []);\n    const [showTips, setShowTips] = useLocalStorage('multivariant-showTips', false);\n    return (React.createElement(DraggableDialog, { open: true, onClose: handleClose, maxWidth: \"xl\", title: \"Multi-variant color/arrangement editor\" },\n        React.createElement(DialogContent, { className: classes.content },\n            React.createElement(\"div\", { className: classes.fr },\n                React.createElement(Button, { variant: \"contained\", onClick: () => {\n                        setShowTips(!showTips);\n                    } }, showTips ? 'Hide tips' : 'Show tips'),\n                React.createElement(Button, { color: \"secondary\", variant: \"contained\", onClick: () => {\n                        setShowBulkEditor(!showBulkEditor);\n                    } }, showBulkEditor ? 'Hide bulk row editor' : 'Show Bulk row editor')),\n            React.createElement(\"br\", null),\n            showTips ? React.createElement(HelpfulTips, null) : null,\n            showBulkEditor ? (React.createElement(BulkEditPanel, { currLayout: currLayout, setCurrLayout: setCurrLayout })) : null,\n            React.createElement(RowPalettizer, { currLayout: currLayout, setCurrLayout: setCurrLayout }),\n            React.createElement(SourcesGrid, { rows: currLayout, onChange: setCurrLayout, showTips: showTips })),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { variant: \"contained\", type: \"submit\", color: \"inherit\", onClick: () => {\n                    model.clearLayout();\n                    setCurrLayout(model.sources || []);\n                } }, \"Clear custom settings\"),\n            React.createElement(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                    handleClose();\n                    setCurrLayout([...(model.sources || [])]);\n                } }, \"Cancel\"),\n            React.createElement(Button, { variant: \"contained\", color: \"primary\", type: \"submit\", onClick: () => {\n                    model.setLayout(currLayout);\n                    handleClose();\n                } }, \"Submit\"))));\n}\nfunction HelpfulTips() {\n    return (React.createElement(React.Fragment, null,\n        \"Helpful tips\",\n        React.createElement(\"ul\", null,\n            React.createElement(\"li\", null, \"You can select rows in the table with the checkboxes\"),\n            React.createElement(\"li\", null, \"Multi-select is enabled with shift-click and control-click\"),\n            React.createElement(\"li\", null, \"The \\\"Move selected items up/down\\\" can re-arrange subtracks\"),\n            React.createElement(\"li\", null, \"Sorting the data grid itself can also re-arrange subtracks\"),\n            React.createElement(\"li\", null, \"Changes are applied when you hit Submit\"),\n            React.createElement(\"li\", null, \"You can click and drag the dialog box to move it on the screen\"),\n            React.createElement(\"li\", null, \"Columns in the table can be hidden using a vertical '...' menu on the right side of each column\"))));\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2,3,4,5]}
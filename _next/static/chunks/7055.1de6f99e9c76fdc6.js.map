{"version":3,"file":"static/chunks/7055.1de6f99e9c76fdc6.js","mappings":"uNAOA,MAAkB,uBAAU,QAC5B,OACA,mBACA,mBACA,CAAK,CACL,QACA,aACA,iBACA,eACA,CAAK,CACL,CAAC,EAsED,EAlBoC,cAAQ,cAkB7B,GAlB0C,EAAQ,EACjE,IAAY,WAAU,IACtB,MAA0B,cAAQ,KAClC,MAAsC,cAAQ,eAAe,YAAY,GACzE,MAAY,UAAK,CAAC,GAAK,EAAI,4BAAqC,UAAK,OAAS,UAAW,SAAI,OAAS,8DAAgE,EAAG,SAAI,OAAS,oFAAsF,GAAI,EAAG,SAAI,CAAC,GAAS,EAAI,4IACrS,iBACA,EAAmB,EAAG,UAAK,CAAC,GAAM,EAAI,iFAAuF,SAAI,UAAY,oDAAyD,EAAQ,IAC9M,2CACA,qBACA,eA5DA,YACA,aAAY,GAAW,2BACvB,OAAW,YAAU,CACrB,CACA,8BACA,gCACA,EACU,uBAAiB,EAAG,OAAY,CAC1C,EAoDA,GACA,cACA,CAA6B,UAC7B,EAA2B,GAAI,EAAG,SAAI,CAAC,GAAS,EAAI,6CACpD,iBACA,EAAmB,EAAG,SAAI,CAAC,GAAM,EAAI,qDACrC,SAzDA,WAAoB,gBAAwB,EAC5C,MACA,MAAoB,gBAAU,IAC9B,QAKA,EAJA,OACA,GAAe,oCAA6C,GAAG,WAAW,EAC1E,+BACA,UAEA,IACA,eACA,CACA,SACA,IACA,oBACA,iBACA,cACA,CACA,qCAAuD,GAAU,CAAI,eACzD,4BAAsB,MAClC,gBACA,UACA,8BACA,OACA,2BACA,SACA,0BACA,IACA,CAAiB,CACJ,EACb,+CAEA,cACY,+BAAyB,KACrC,eAEA,CACA,SACA,iBACA,iBAA+B,EAAE,IACjC,CACA,EAgBA,CAA+B,0BAAuB,CACtD,CAAiB,mBAAsB,EAAG,SAAI,MAAQ,8BAAgC,EAAG,UAAK,OAAS,UAAW,UAAK,OAAS,2GAA8G,SAAI,SAAW,YAAa,yCAAyC,4BAA4B,+CAA+C,GAAI,uDAA0D,EAAG,SAAI,OAAS,2HAA+H,GAAI,GAAI,CACnlB,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/MultiWiggleAddTrackWorkflow/AddTrackWorkflow.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { getSession, isElectron, isSessionModelWithWidgets, isSessionWithAddTracks, } from '@jbrowse/core/util';\nimport { storeBlobLocation } from '@jbrowse/core/util/tracks';\nimport { Button, Paper, TextField } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    paper: {\n        margin: theme.spacing(),\n        padding: theme.spacing(),\n    },\n    submit: {\n        marginTop: 25,\n        marginBottom: 100,\n        display: 'block',\n    },\n}));\nfunction makeFileLocation(file) {\n    const { webUtils } = window.require('electron');\n    return isElectron\n        ? {\n            localPath: webUtils.getPathForFile(file),\n            locationType: 'LocalPathLocation',\n        }\n        : storeBlobLocation({ blob: file });\n}\nfunction doSubmit({ trackName, val, model, }) {\n    var _a;\n    const session = getSession(model);\n    try {\n        const trackId = [\n            `${trackName.toLowerCase().replaceAll(' ', '_')}-${Date.now()}`,\n            session.adminMode ? '' : '-sessionTrack',\n        ].join('');\n        let bigWigs;\n        try {\n            bigWigs = JSON.parse(val);\n        }\n        catch (e) {\n            bigWigs = val\n                .split(/\\n|\\r\\n|\\r/)\n                .map(f => f.trim())\n                .filter(f => !!f);\n        }\n        const obj = typeof bigWigs[0] === 'string' ? { bigWigs } : { subadapters: bigWigs };\n        if (isSessionWithAddTracks(session)) {\n            session.addTrackConf({\n                trackId,\n                type: 'MultiQuantitativeTrack',\n                name: trackName,\n                assemblyNames: [model.assembly],\n                adapter: {\n                    type: 'MultiWiggleAdapter',\n                    ...obj,\n                },\n            });\n            (_a = model.view) === null || _a === void 0 ? void 0 : _a.showTrack(trackId);\n        }\n        model.clearData();\n        if (isSessionModelWithWidgets(session)) {\n            session.hideWidget(model);\n        }\n    }\n    catch (e) {\n        console.error(e);\n        session.notifyError(`${e}`, e);\n    }\n}\nconst MultiWiggleAddTrackWorkflow = observer(function ({ model, }) {\n    const { classes } = useStyles();\n    const [val, setVal] = useState('');\n    const [trackName, setTrackName] = useState(`MultiWiggle${+Date.now()}`);\n    return (_jsxs(Paper, { className: classes.paper, children: [_jsxs(\"ul\", { children: [_jsx(\"li\", { children: \"Enter list of URLs for bigwig files in the textbox\" }), _jsx(\"li\", { children: \"Or, use the button below the text box to select files from your computer\" })] }), _jsx(TextField, { multiline: true, fullWidth: true, rows: 10, value: val, placeholder: \"Paste list of URLs here, or use file selector below\", variant: \"outlined\", onChange: event => {\n                    setVal(event.target.value);\n                } }), _jsxs(Button, { variant: \"outlined\", component: \"label\", children: [\"Choose Files from your computer\", _jsx(\"input\", { type: \"file\", hidden: true, multiple: true, onChange: ({ target }) => {\n                            setVal(JSON.stringify([...(target.files || [])].map(file => ({\n                                type: 'BigWigAdapter',\n                                bigWigLocation: makeFileLocation(file),\n                                source: file.name,\n                            })), null, 2));\n                        } })] }), _jsx(TextField, { value: trackName, helperText: \"Track name\", onChange: event => {\n                    setTrackName(event.target.value);\n                } }), _jsx(Button, { variant: \"contained\", className: classes.submit, onClick: () => {\n                    doSubmit({ trackName, val, model });\n                }, children: \"Submit\" }), _jsx(\"p\", { children: \"Additional notes: \" }), _jsxs(\"ul\", { children: [_jsxs(\"li\", { children: [\"The list of bigwig files in the text box can be a list of URLs, or a list of elements like\", ' ', _jsx(\"code\", { children: `[{\"type\":\"BigWigAdapter\",\"bigWigLocation\":{\"uri\":\"http://host/file.bw\"}, \"color\":\"green\",\"source\":\"name for subtrack\"}]` }), ' ', \"to apply e.g. the color attribute to the view\"] }), _jsx(\"li\", { children: \"Adding local files will update the textbox with JSON contents that are ready to submit with the \\\"Submit\\\" button\" })] })] }));\n});\nexport default MultiWiggleAddTrackWorkflow;\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
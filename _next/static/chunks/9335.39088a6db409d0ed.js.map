{"version":3,"file":"static/chunks/9335.39088a6db409d0ed.js","mappings":"2SAIe,0BAA8B,uCAAmE,EAChH,MAAoB,gBAAU,IAC9B,CAAY,iBAAgB,CAAE,WAAM,IACpC,iBAAY,GAAkB,EAC9B,wCACA,WACA,MACA,wBAAoC,GAAc,YAElD,cACA,wBAAoC,GAAc,qBAWlD,oBACA,MACA,IACA,sFACA,GACA,2BACA,oBAGA,2BAEA,CACA,SACA,gBACA,YAA8B,EAAE,YAChC,CACA,CACA,OAAY,eAAmB,CAAC,GAAc,EAAI,UAAW,GAAK,CAAE,CAC5D,eAAmB,CAAC,GAAK,MACrB,eAAmB,CAAC,GAAS,MACzB,eAAmB,CAAC,GAAQ,MACxB,eAAmB,CAAC,GAAS,cAC7B,eAAmB,CAAC,GAAS,EAAI,cAAgB,aACjD,eAAmB,CAAC,GAAS,EAAI,cAAgB,UACjD,eAAmB,CAAC,GAAS,EAAI,cAAgB,IACzD,eAAmB,CAAC,GAAS,eAAqC,eAAmB,CAAC,GAAQ,EAAI,cAAqB,CACnH,eAAmB,CAAC,GAAS,EAAI,2BAA+B,eAChE,eAAmB,CAAC,GAAS,EAAI,cAAgB,kBACjD,eAAmB,CAAC,GAAS,EAAI,cAAgB,CArCjE,YACA,MACA,MACA,2CACA,EAAkC,uBAAiB,GAAS,aAAO,OACnE,uEACA,CACA,QACA,EA6BiE,wBACjD,eAAmB,CAAC,GAAS,EAAI,cAAgB,CAC7C,eAAmB,CAAC,GAAM,EAAI,kBAClD,IACA,uCACA,qBACA,GACA,cAEA,CACA,SACA,iBACA,iBAAuD,EAAE,IACzD,CACA,GACA,CAAyB,qCAA0C,YACnE,CCjEe,kBAA+B,6DAA+D,EAC7G,OAAY,eAAmB,CAAC,QAAM,EAAI,uDAA2E,CAC7G,eAAmB,CAAC,GAAa,gCAEoB,eAAmB,CAAC,UAAc,MACnF,eAAmB,CAAC,GAAU,MAC1C,uBACgB,eAAmB,cACvB,eAAmB,CAAC,EAAkB,CAAI,eAAJ,KAAI,iCAAkG,GANd,eAAmB,CAAC,GAAU,MACxK,wBACY,eAAmB,eAKvB,eAAmB,CAAC,GAAO,OAC3B,eAAmB,CAAC,GAAa,MAC7B,eAAmB,CAAC,GAAM,EAAI,aAC1C,GACA,CAAiB,iBAAoB,YACrC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearGenomeView/components/SearchResultsTable.js","webpack://_N_E/./node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearGenomeView/components/SearchResultsDialog.js"],"sourcesContent":["import React from 'react';\nimport { getEnv, getSession } from '@jbrowse/core/util';\nimport { Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, } from '@mui/material';\nimport { getRoot, resolveIdentifier } from 'mobx-state-tree';\nexport default function SearchResultsTable({ searchResults, assemblyName: optAssemblyName, model, handleClose, }) {\n    const session = getSession(model);\n    const { pluginManager } = getEnv(session);\n    const { assemblyManager } = session;\n    const assemblyName = optAssemblyName || model.displayedRegions[0].assemblyName;\n    const assembly = assemblyManager.get(assemblyName);\n    if (!assembly) {\n        throw new Error(`assembly ${assemblyName} not found`);\n    }\n    if (!assembly.regions) {\n        throw new Error(`assembly ${assemblyName} regions not loaded`);\n    }\n    function getTrackName(trackId) {\n        var _a;\n        if (trackId) {\n            const schema = pluginManager.pluggableConfigSchemaType('track');\n            const configuration = resolveIdentifier(schema, getRoot(model), trackId);\n            return ((_a = configuration === null || configuration === void 0 ? void 0 : configuration.name) === null || _a === void 0 ? void 0 : _a.value) || '';\n        }\n        return '';\n    }\n    async function handleClick(location) {\n        var _a;\n        try {\n            const newRegion = (_a = assembly === null || assembly === void 0 ? void 0 : assembly.regions) === null || _a === void 0 ? void 0 : _a.find(region => location === region.refName);\n            if (newRegion) {\n                model.setDisplayedRegions([newRegion]);\n                model.showAllRegions();\n            }\n            else {\n                await model.navToLocString(location, assemblyName);\n            }\n        }\n        catch (e) {\n            console.warn(e);\n            session.notify(`${e}`, 'warning');\n        }\n    }\n    return (React.createElement(TableContainer, { component: Paper },\n        React.createElement(Table, null,\n            React.createElement(TableHead, null,\n                React.createElement(TableRow, null,\n                    React.createElement(TableCell, null, \"Name\"),\n                    React.createElement(TableCell, { align: \"right\" }, \"Location\"),\n                    React.createElement(TableCell, { align: \"right\" }, \"Track\"),\n                    React.createElement(TableCell, { align: \"right\" }))),\n            React.createElement(TableBody, null, searchResults.map(result => (React.createElement(TableRow, { key: result.getId() },\n                React.createElement(TableCell, { component: \"th\", scope: \"row\" }, result.getLabel()),\n                React.createElement(TableCell, { align: \"right\" }, result.getLocation()),\n                React.createElement(TableCell, { align: \"right\" }, getTrackName(result.getTrackId()) || 'N/A'),\n                React.createElement(TableCell, { align: \"right\" },\n                    React.createElement(Button, { onClick: async () => {\n                            try {\n                                await handleClick(result.getLocation() || result.getLabel());\n                                const resultTrackId = result.getTrackId();\n                                if (resultTrackId) {\n                                    model.showTrack(resultTrackId);\n                                }\n                            }\n                            catch (e) {\n                                console.error(e);\n                                session.notifyError(`${e}`, e);\n                            }\n                            handleClose();\n                        }, color: \"primary\", variant: \"contained\" }, \"Go\")))))))));\n}\n","import React from 'react';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { Button, DialogActions, DialogContent, Divider, Typography, } from '@mui/material';\nimport SearchResultsTable from './SearchResultsTable';\nexport default function SearchResultsDialog({ model, assemblyName, searchQuery, searchResults, handleClose, }) {\n    return (React.createElement(Dialog, { open: true, maxWidth: \"xl\", onClose: handleClose, title: \"Search results\" },\n        React.createElement(DialogContent, null, !(searchResults === null || searchResults === void 0 ? void 0 : searchResults.length) ? (React.createElement(Typography, null,\n            \"No results found for \",\n            React.createElement(\"b\", null, searchQuery))) : (React.createElement(React.Fragment, null,\n            React.createElement(Typography, null,\n                \"Showing results for \",\n                React.createElement(\"b\", null, searchQuery)),\n            React.createElement(SearchResultsTable, { model: model, handleClose: handleClose, assemblyName: assemblyName, searchResults: searchResults })))),\n        React.createElement(Divider, null),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { onClick: () => {\n                    handleClose();\n                }, color: \"primary\" }, \"Cancel\"))));\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0,1]}
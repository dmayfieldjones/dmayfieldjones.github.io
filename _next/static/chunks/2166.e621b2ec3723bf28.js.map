{"version":3,"file":"static/chunks/2166.e621b2ec3723bf28.js","mappings":"0QASA,MAAkB,uBAAU,QAC5B,cACA,wBACA,CAAK,CACL,MACA,eACA,uBACA,gBACA,CAAK,CACL,CAAC,EACc,kBAA+B,gBAAqB,EACnE,YAAY,GAAU,IACtB,MAAkC,cAAQ,GAC1C,MAA8B,cAAQ,GACtC,MAA8B,cAAQ,KAsCtC,MArCI,eAAS,MAEb,WACA,IACA,UACA,MAA6B,uBAAiB,IAC9C,kBACA,OAEA,eAAwB,GAAe,gBAAU,IACjD,SAAwB,+BAAoC,EAC5D,EAAkC,qBAAe,IACjD,kDACA,sCACA,UACA,YACA,YACA,eACA,CAAiB,EACjB,mBACA,iBACA;AACA,wBAAwB;AACxB,SAAS,SAAe;AACxB,2BAA2B,aAAoB,EAAI,cAAc;AACjE;AACA,qCACA,IACA,CACA,SACA,CAAqB,sBAAgB,KAAO,aAAO,MACnD,iBACA,KAEA,CACA,EAAS,EACT,CAAK,MACO,eAAmB,CAAC,QAAM,EAAI,8CAAgE,CAClG,eAAmB,CAAC,GAAa,MAC7B,eAAmB,QAAU,iBAAyB,CAClD,eAAmB,CAAC,GAAU,mIAC9B,eAAmB,CAAC,GAAU,kFAC9C,EAA2B,eAAmB,YAC1B,eAAmB,YACvC,UACA,IACwB,eAAmB,CAAC,GAAM,EAAI,iCACtB,YAAM,mBACtC,iBAAsD,cACtD,CAAiC,cACjC,EAA+B,qBAC/B,IACA,KACA,IACwB,eAAmB,CAAC,GAAM,EAAI,iCACtB,IAAI,MACpC,EAA+B,8BACP,cAFY,CAEO,YACf,eAAmB,CAAC,GAAS,EAAI,iMAC7D,iBACA,CAAiC,YACjC,OACA,SACA,qBACyC,CACJ,CACrC,CAAmC,KAAS,eAAmB,CAAC,iBAAe,EAAI,gDAAoD,EACvI,EAAwB,eAAmB,CAAC,cAAY,EAAI,QAAc,SAClE,eAAmB,CAAC,GAAa,MAC7B,eAAmB,CAAC,GAAM,EAAI,6CAC1C,YAA4B,GAAU,EACtC,KACA,IACA,cACA,YACA,iBACA,eACA,WACA,QACA,aACA,MACA,gCAAwE,EAAI,GAE5E,QACA,CAA6B,EAC7B,CACA,SACA,iBACA,IACA,CAEA,GACA,EAAmB,qBACP,eAAmB,CAAC,GAAM,EAAI,mDAC1C,GACA,EAAmB,YACnB","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/ClusterDialog.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Dialog, ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui';\nimport { getContainingView, getSession, isAbortException, } from '@jbrowse/core/util';\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks';\nimport { Button, DialogActions, DialogContent, TextField, Typography, } from '@mui/material';\nimport copy from 'copy-to-clipboard';\nimport { saveAs } from 'file-saver';\nimport { isAlive } from 'mobx-state-tree';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    textAreaFont: {\n        fontFamily: 'Courier New',\n    },\n    mgap: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing(4),\n    },\n}));\nexport default function HierarchicalCluster({ model, handleClose, }) {\n    const { classes } = useStyles();\n    const [results, setResults] = useState();\n    const [error, setError] = useState();\n    const [paste, setPaste] = useState('');\n    useEffect(() => {\n        ;\n        (async () => {\n            try {\n                setError(undefined);\n                const view = getContainingView(model);\n                if (!view.initialized) {\n                    return;\n                }\n                const { rpcManager } = getSession(model);\n                const { sources, mafFilter, adapterConfig } = model;\n                const sessionId = getRpcSessionId(model);\n                const ret = (await rpcManager.call(sessionId, 'MultiVariantGetGenotypeMatrix', {\n                    regions: view.dynamicBlocks.contentBlocks,\n                    sources,\n                    mafFilter,\n                    sessionId,\n                    adapterConfig,\n                }));\n                const entries = Object.values(ret);\n                const keys = Object.keys(ret);\n                const text = `try(library(fastcluster), silent=TRUE)\ninputMatrix<-matrix(c(${entries.map(val => val.genotypes.join(',')).join(',\\n')}\n),nrow=${entries.length},byrow=TRUE)\nrownames(inputMatrix)<-c(${keys.map(key => `'${key}'`).join(',')})\nresultClusters<-hclust(dist(inputMatrix), method='single')\ncat(resultClusters$order,sep='\\\\n')`;\n                setResults(text);\n            }\n            catch (e) {\n                if (!isAbortException(e) && isAlive(model)) {\n                    console.error(e);\n                    setError(e);\n                }\n            }\n        })();\n    }, [model]);\n    return (React.createElement(Dialog, { open: true, title: \"Cluster by genotype\", onClose: handleClose },\n        React.createElement(DialogContent, null,\n            React.createElement(\"div\", { className: classes.mgap },\n                React.createElement(Typography, null, \"This page will produce an R script that will perform hierarchical clustering on the visible genotype data using `hclust`.\"),\n                React.createElement(Typography, null, \"You can then paste the results in this form to specify the row ordering.\"),\n                results ? (React.createElement(\"div\", null,\n                    React.createElement(\"div\", null,\n                        \"Step 1:\",\n                        ' ',\n                        React.createElement(Button, { variant: \"contained\", onClick: () => {\n                                saveAs(new Blob([results || ''], {\n                                    type: 'text/plain;charset=utf-8',\n                                }), 'cluster.R');\n                            } }, \"Download Rscript\"),\n                        ' ',\n                        \"or\",\n                        ' ',\n                        React.createElement(Button, { variant: \"contained\", onClick: () => {\n                                copy(results || '');\n                            } }, \"Copy Rscript to clipboard\"),\n                        React.createElement(\"div\", null,\n                            React.createElement(TextField, { multiline: true, fullWidth: true, variant: \"outlined\", placeholder: \"Step 2. Paste results from Rscript here (sequence of numbers, one per line, specifying the new ordering)\", rows: 10, value: paste, onChange: event => {\n                                    setPaste(event.target.value);\n                                }, slotProps: {\n                                    input: {\n                                        classes: {\n                                            input: classes.textAreaFont,\n                                        },\n                                    },\n                                } }))))) : (React.createElement(LoadingEllipses, { variant: \"h6\", title: \"Generating genotype matrix\" })),\n                error ? React.createElement(ErrorMessage, { error: error }) : null)),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { disabled: !results, variant: \"contained\", onClick: () => {\n                    const { sources } = model;\n                    if (sources) {\n                        try {\n                            model.setLayout(paste\n                                .split('\\n')\n                                .map(t => t.trim())\n                                .filter(f => !!f)\n                                .map(r => +r)\n                                .map(idx => {\n                                const ret = sources[idx - 1];\n                                if (!ret) {\n                                    throw new Error(`out of bounds at ${idx}`);\n                                }\n                                return ret;\n                            }));\n                        }\n                        catch (e) {\n                            console.error(e);\n                            setError(e);\n                        }\n                    }\n                    handleClose();\n                } }, \"Apply clustering\"),\n            React.createElement(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                    handleClose();\n                } }, \"Cancel\"))));\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
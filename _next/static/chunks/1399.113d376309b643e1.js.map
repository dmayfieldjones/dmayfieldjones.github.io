{"version":3,"file":"static/chunks/1399.113d376309b643e1.js","mappings":"4OA4BA,MAtBuB,qBAAQ,OAsBhB,GAtBgB,OAA2B,IAsB7B,EAAC,QAtB4B,EAAqB,EAC/E,SAAgC,cAAQ,KACxC,MAAY,UAAK,CAAC,QAAM,EAAI,8CAAiE,UAAK,CAAC,GAAa,EAAI,UAAW,SAAI,CAAC,GAAU,EAAI,yJAA2J,EAAG,SAAI,CAAC,GAAgB,EAAI,wBACzU,KACA,CAAyB,SAAW,SAAI,CAAC,GAAK,GAAI,wBAA2B,EAAG,SAAI,CAAC,GAAgB,EAAI,uBACzG,KACA,CAAyB,SAAW,SAAI,CAAC,GAAK,GAAI,kCAAqC,IAAa,UAAK,CAAC,UAAS,EAAI,UAAW,SAAI,CAAC,GAAU,EAAI,0BAA4B,EAAG,SAAI,CAAC,aAAW,EAAI,uCACxM,iBACA,kBACA,EAAmC,EAAG,SAAI,CAAC,GAAU,EAAI,0BAA4B,EAAG,SAAI,CAAC,aAAW,EAAI,uCAC5G,iBACA,kBACA,EAAmC,GAAI,EAAM,UAAK,CAAC,UAAS,EAAI,UAAW,SAAI,CAAC,GAAU,EAAI,yBAA2B,EAAG,SAAI,CAAC,aAAW,EAAI,oCAChJ,aACA,EAAmC,GAAI,GAAK,EAAG,UAAK,CAAC,GAAa,EAAI,UAAW,SAAI,CAAC,GAAM,EAAI,aAChG,sBACA,sBACA,kBACA,CAAyB,kEAAyE,EAAG,SAAI,CAAC,GAAM,EAAI,+DACpH,GACA,CAAyB,mBAAsB,GAAI,GAAI,CACvD,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-wiggle/esm/LinearWiggleDisplay/components/SetColorDialog.js"],"sourcesContent":["import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { ColorPicker } from '@jbrowse/core/ui/ColorPicker';\nimport { Button, DialogActions, DialogContent, FormControlLabel, Radio, Typography, } from '@mui/material';\nimport { observer } from 'mobx-react';\nconst SetColorDialog = observer(function SetColorDialog({ model, handleClose, }) {\n    const [posneg, setPosNeg] = useState(false);\n    return (_jsxs(Dialog, { open: true, onClose: handleClose, title: \"Set color\", children: [_jsxs(DialogContent, { children: [_jsx(Typography, { children: \"Select either an overall color, or the positive/negative colors. Note that density renderers only work properly with positive/negative colors\" }), _jsx(FormControlLabel, { checked: !posneg, onClick: () => {\n                            setPosNeg(false);\n                        }, control: _jsx(Radio, {}), label: \"Overall color\" }), _jsx(FormControlLabel, { checked: posneg, onClick: () => {\n                            setPosNeg(true);\n                        }, control: _jsx(Radio, {}), label: \"Positive/negative color\" }), posneg ? (_jsxs(_Fragment, { children: [_jsx(Typography, { children: \"Positive color\" }), _jsx(ColorPicker, { color: model.posColor || 'black', onChange: event => {\n                                    model.setPosColor(event);\n                                    model.setColor(undefined);\n                                } }), _jsx(Typography, { children: \"Negative color\" }), _jsx(ColorPicker, { color: model.negColor || 'black', onChange: event => {\n                                    model.setNegColor(event);\n                                    model.setColor(undefined);\n                                } })] })) : (_jsxs(_Fragment, { children: [_jsx(Typography, { children: \"Overall color\" }), _jsx(ColorPicker, { color: model.color || 'black', onChange: event => {\n                                    model.setColor(event);\n                                } })] }))] }), _jsxs(DialogActions, { children: [_jsx(Button, { onClick: () => {\n                            model.setPosColor(undefined);\n                            model.setNegColor(undefined);\n                            model.setColor(undefined);\n                        }, color: \"secondary\", variant: \"contained\", children: \"Restore default\" }), _jsx(Button, { variant: \"contained\", color: \"primary\", type: \"submit\", onClick: () => {\n                            handleClose();\n                        }, children: \"Submit\" })] })] }));\n});\nexport default SetColorDialog;\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
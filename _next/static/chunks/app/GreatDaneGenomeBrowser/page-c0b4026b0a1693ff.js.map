{"version":3,"file":"static/chunks/app/GreatDaneGenomeBrowser/page-c0b4026b0a1693ff.js","mappings":"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","sources":["webpack://_N_E/?58b8","webpack://_N_E/./node_modules/next/dist/api/app-dynamic.js","webpack://_N_E/./app/GreatDaneGenomeBrowser/page.tsx","webpack://_N_E/../../../src/shared/lib/app-dynamic.tsx","webpack://_N_E/../../../../src/shared/lib/lazy-dynamic/dynamic-bailout-to-csr.tsx","webpack://_N_E/../../../../src/shared/lib/lazy-dynamic/loadable.tsx","webpack://_N_E/../../../../src/shared/lib/lazy-dynamic/preload-chunks.tsx"],"sourcesContent":["import(/* webpackMode: \"eager\" */ \"/home/cdiesh/src/dmayfieldjones.github.io/app/GreatDaneGenomeBrowser/page.tsx\");\n","export * from '../shared/lib/app-dynamic';\nexport { default } from '../shared/lib/app-dynamic';\n\n//# sourceMappingURL=app-dynamic.js.map","'use client'\nimport dynamic from 'next/dynamic'\n\nconst DynamicComponentWithNoSSR = dynamic(() => import('./Browser'), {\n  ssr: false,\n})\n\nexport default function Page() {\n  return (\n    <div>\n      <DynamicComponentWithNoSSR />\n    </div>\n  )\n}\n","import type React from 'react'\nimport type { JSX } from 'react'\nimport Loadable from './lazy-dynamic/loadable'\n\nimport type {\n  LoadableGeneratedOptions,\n  DynamicOptionsLoadingProps,\n  Loader,\n  LoaderComponent,\n} from './lazy-dynamic/types'\n\nexport {\n  type LoadableGeneratedOptions,\n  type DynamicOptionsLoadingProps,\n  type Loader,\n  type LoaderComponent,\n}\n\nexport type DynamicOptions<P = {}> = LoadableGeneratedOptions & {\n  loading?: () => JSX.Element | null\n  loader?: Loader<P>\n  loadableGenerated?: LoadableGeneratedOptions\n  modules?: string[]\n  ssr?: boolean\n}\n\nexport type LoadableOptions<P = {}> = DynamicOptions<P>\n\nexport type LoadableFn<P = {}> = (\n  opts: LoadableOptions<P>\n) => React.ComponentType<P>\n\nexport type LoadableComponent<P = {}> = React.ComponentType<P>\n\nexport default function dynamic<P = {}>(\n  dynamicOptions: DynamicOptions<P> | Loader<P>,\n  options?: DynamicOptions<P>\n): React.ComponentType<P> {\n  const loadableOptions: LoadableOptions<P> = {}\n\n  if (typeof dynamicOptions === 'function') {\n    loadableOptions.loader = dynamicOptions\n  }\n\n  const mergedOptions = {\n    ...loadableOptions,\n    ...options,\n  }\n\n  return Loadable({\n    ...mergedOptions,\n    modules: mergedOptions.loadableGenerated?.modules,\n  })\n}\n","'use client'\n\nimport type { ReactElement } from 'react'\nimport { BailoutToCSRError } from './bailout-to-csr'\n\ninterface BailoutToCSRProps {\n  reason: string\n  children: ReactElement\n}\n\n/**\n * If rendered on the server, this component throws an error\n * to signal Next.js that it should bail out to client-side rendering instead.\n */\nexport function BailoutToCSR({ reason, children }: BailoutToCSRProps) {\n  if (typeof window === 'undefined') {\n    throw new BailoutToCSRError(reason)\n  }\n\n  return children\n}\n","import { Suspense, Fragment, lazy } from 'react'\nimport { BailoutToCSR } from './dynamic-bailout-to-csr'\nimport type { ComponentModule } from './types'\nimport { PreloadChunks } from './preload-chunks'\n\n// Normalize loader to return the module as form { default: Component } for `React.lazy`.\n// Also for backward compatible since next/dynamic allows to resolve a component directly with loader\n// Client component reference proxy need to be converted to a module.\nfunction convertModule<P>(\n  mod: React.ComponentType<P> | ComponentModule<P> | undefined\n): {\n  default: React.ComponentType<P>\n} {\n  // Check \"default\" prop before accessing it, as it could be client reference proxy that could break it reference.\n  // Cases:\n  // mod: { default: Component }\n  // mod: Component\n  // mod: { default: proxy(Component) }\n  // mod: proxy(Component)\n  const hasDefault = mod && 'default' in mod\n  return {\n    default: hasDefault\n      ? (mod as ComponentModule<P>).default\n      : (mod as React.ComponentType<P>),\n  }\n}\n\nconst defaultOptions = {\n  loader: () => Promise.resolve(convertModule(() => null)),\n  loading: null,\n  ssr: true,\n}\n\ninterface LoadableOptions {\n  loader?: () => Promise<React.ComponentType<any> | ComponentModule<any>>\n  loading?: React.ComponentType<any> | null\n  ssr?: boolean\n  modules?: string[]\n}\n\nfunction Loadable(options: LoadableOptions) {\n  const opts = { ...defaultOptions, ...options }\n  const Lazy = lazy(() => opts.loader().then(convertModule))\n  const Loading = opts.loading\n\n  function LoadableComponent(props: any) {\n    const fallbackElement = Loading ? (\n      <Loading isLoading={true} pastDelay={true} error={null} />\n    ) : null\n\n    // If it's non-SSR or provided a loading component, wrap it in a suspense boundary\n    const hasSuspenseBoundary = !opts.ssr || !!opts.loading\n    const Wrap = hasSuspenseBoundary ? Suspense : Fragment\n    const wrapProps = hasSuspenseBoundary ? { fallback: fallbackElement } : {}\n    const children = opts.ssr ? (\n      <>\n        {/* During SSR, we need to preload the CSS from the dynamic component to avoid flash of unstyled content */}\n        {typeof window === 'undefined' ? (\n          <PreloadChunks moduleIds={opts.modules} />\n        ) : null}\n        <Lazy {...props} />\n      </>\n    ) : (\n      <BailoutToCSR reason=\"next/dynamic\">\n        <Lazy {...props} />\n      </BailoutToCSR>\n    )\n\n    return <Wrap {...wrapProps}>{children}</Wrap>\n  }\n\n  LoadableComponent.displayName = 'LoadableComponent'\n\n  return LoadableComponent\n}\n\nexport default Loadable\n","'use client'\n\nimport { preload } from 'react-dom'\n\nimport { workAsyncStorage } from '../../../server/app-render/work-async-storage.external'\nimport { encodeURIPath } from '../encode-uri-path'\n\nexport function PreloadChunks({\n  moduleIds,\n}: {\n  moduleIds: string[] | undefined\n}) {\n  // Early return in client compilation and only load requestStore on server side\n  if (typeof window !== 'undefined') {\n    return null\n  }\n\n  const workStore = workAsyncStorage.getStore()\n  if (workStore === undefined) {\n    return null\n  }\n\n  const allFiles = []\n\n  // Search the current dynamic call unique key id in react loadable manifest,\n  // and find the corresponding CSS files to preload\n  if (workStore.reactLoadableManifest && moduleIds) {\n    const manifest = workStore.reactLoadableManifest\n    for (const key of moduleIds) {\n      if (!manifest[key]) continue\n      const chunks = manifest[key].files\n      allFiles.push(...chunks)\n    }\n  }\n\n  if (allFiles.length === 0) {\n    return null\n  }\n\n  return (\n    <>\n      {allFiles.map((chunk) => {\n        const href = `${workStore.assetPrefix}/_next/${encodeURIPath(chunk)}`\n        const isCss = chunk.endsWith('.css')\n        // If it's stylesheet we use `precedence` o help hoist with React Float.\n        // For stylesheets we actually need to render the CSS because nothing else is going to do it so it needs to be part of the component tree.\n        // The `preload` for stylesheet is not optional.\n        if (isCss) {\n          return (\n            <link\n              key={chunk}\n              // @ts-ignore\n              precedence=\"dynamic\"\n              href={href}\n              rel=\"stylesheet\"\n              as=\"style\"\n            />\n          )\n        } else {\n          // If it's script we use ReactDOM.preload to preload the resources\n          preload(href, {\n            as: 'script',\n            fetchPriority: 'low',\n          })\n          return null\n        }\n      })}\n    </>\n  )\n}\n"],"names":["DynamicComponentWithNoSSR","dynamic","ssr","Page","div","dynamicOptions","options","mergedOptions","loadableOptions","loader","Loadable","modules","loadableGenerated","BailoutToCSR","reason","children","window","BailoutToCSRError","convertModule","mod","default","defaultOptions","Promise","resolve","loading","opts","Lazy","lazy","then","Loading","LoadableComponent","props","fallbackElement","isLoading","pastDelay","error","hasSuspenseBoundary","Wrap","Suspense","Fragment","PreloadChunks","moduleIds","fallback","wrapProps","displayName","workStore","workAsyncStorage","getStore","undefined","allFiles","reactLoadableManifest","manifest","key","chunks","files","push","length","map","href","assetPrefix","encodeURIPath","chunk","endsWith","isCss","link","precedence","rel","as","preload","fetchPriority"],"sourceRoot":"","ignoreList":[1]}
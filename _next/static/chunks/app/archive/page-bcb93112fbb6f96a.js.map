{"version":3,"file":"static/chunks/app/archive/page-bcb93112fbb6f96a.js","mappings":"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","sources":["webpack://_N_E/","webpack://_N_E/./app/archive/utils.ts","webpack://_N_E/./app/archive/ArchiveClient.tsx"],"sourcesContent":["import(/* webpackMode: \"eager\", webpackExports: [\"default\"] */ \"/Users/dustinmayfield/Documents/0_Clubs_hobbies/0_Great Danes/dmayfieldjones.github.io/app/archive/ArchiveClient.tsx\");\n","// Define categories based on actual article content\nexport const getArticleCategory = (id: string, title: string) => {\n  // Specific article mappings based on actual content\n  if (id === '2025-06-23-more-than-show-and-go') {\n    return 'Community & Show Experience'\n  }\n  if (id === '2025-06-24-laying-the-foundation') {\n    return 'Breeding Philosophy'\n  }\n  if (id === '2025-06-25-choosing-a-great-dane-breeder') {\n    return 'Breeder Selection Guide'\n  }\n  if (id === '2025-07-03-the-first-year') {\n    return 'Puppy Development'\n  }\n  if (id === '2025-07-17-feeding-your-growing-great-dane') {\n    return 'Nutrition & Feeding'\n  }\n  if (id === '2025-09-12-breeding-for-temperament-research-tools') {\n    return 'Breeding Science'\n  }\n  \n  // Fallback for any future articles\n  return 'General Care'\n}\n\n// Reading time based on actual word counts (225 words per minute)\nexport const getReadingTime = (id: string) => {\n  const readingTimes: { [key: string]: string } = {\n    '2025-06-23-more-than-show-and-go': '7 min read',      // 1,457 words\n    '2025-06-24-laying-the-foundation': '11 min read',     // 2,418 words  \n    '2025-06-25-choosing-a-great-dane-breeder': '14 min read', // 3,101 words\n    '2025-07-03-the-first-year': '12 min read',            // 2,747 words\n    '2025-07-17-feeding-your-growing-great-dane': '20 min read', // 4,397 words\n    '2025-09-12-breeding-for-temperament-research-tools': '8 min read', // ~1,871 words\n        '2025-10-01-the-deep-history-of-dogs-ancient-dna': '10 min read' // ~2,300 words\n  }\n  return readingTimes[id] || '5 min read'\n}\n\n","'use client'\n\nimport Link from 'next/link'\nimport { useState, useMemo } from 'react'\nimport { getArticleCategory, getReadingTime } from './utils'\n\ninterface Post {\n  id: string\n  date: string\n  title: string\n  content: string\n  tags?: string[]\n  categories?: string[]\n}\n\ninterface ArchiveClientProps {\n  posts: Post[]\n}\n\nexport default function ArchiveClient({ posts }: ArchiveClientProps) {\n  const [selectedCategory, setSelectedCategory] = useState('all')\n  const [sortOrder, setSortOrder] = useState('newest')\n  \n  // Get unique categories\n  const categories = useMemo(() => {\n    const cats = ['all', ...new Set(posts.map(post => getArticleCategory(post.id, post.title)))]\n    return cats\n  }, [posts])\n  \n  // Filter and sort posts\n  const filteredAndSortedPosts = useMemo(() => {\n    let filtered = posts\n    \n    // Filter by category\n    if (selectedCategory !== 'all') {\n      filtered = filtered.filter(post => getArticleCategory(post.id, post.title) === selectedCategory)\n    }\n    \n    // Sort by date\n    const sorted = [...filtered].sort((a, b) => {\n      if (sortOrder === 'newest') {\n        return new Date(b.date).getTime() - new Date(a.date).getTime()\n      } else {\n        return new Date(a.date).getTime() - new Date(b.date).getTime()\n      }\n    })\n    \n    return sorted\n  }, [posts, selectedCategory, sortOrder])\n\n  return (\n    <main className=\"content-wrapper\">\n      {/* Filter Controls */}\n      <div className=\"filter-controls mb-8 p-6 bg-gray-50 rounded-lg\">\n        <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center\">\n          {/* Category Filter */}\n          <div className=\"flex-1\">\n            <label htmlFor=\"category-filter\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Filter by Topic:\n            </label>\n            <select\n              id=\"category-filter\"\n              value={selectedCategory}\n              onChange={(e) => setSelectedCategory(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n            >\n              {categories.map(category => (\n                <option key={category} value={category}>\n                  {category === 'all' ? 'All Topics' : category}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          {/* Sort Order */}\n          <div className=\"flex-1\">\n            <label htmlFor=\"sort-order\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Sort by Date:\n            </label>\n            <select\n              id=\"sort-order\"\n              value={sortOrder}\n              onChange={(e) => setSortOrder(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n            >\n              <option value=\"newest\">Newest First</option>\n              <option value=\"oldest\">Oldest First</option>\n            </select>\n          </div>\n        </div>\n        \n        {/* Results Count */}\n        <div className=\"mt-4 text-sm text-gray-600\">\n          Showing {filteredAndSortedPosts.length} of {posts.length} articles\n        </div>\n      </div>\n\n      {/* Articles Grid */}\n      <section className=\"space-y-6\">\n        {filteredAndSortedPosts.map(post => {\n          const { id, date, title } = post\n          const category = getArticleCategory(id, title)\n          const readingTime = getReadingTime(id)\n          \n          // Split title into main title and subtitle\n          let mainTitle = title\n          let subtitle = \"\"\n          \n          // Check for common subtitle patterns\n          if (title.includes(\": \")) {\n            const parts = title.split(\": \")\n            mainTitle = parts[0]\n            subtitle = parts.slice(1).join(\": \")\n          } else if (title.includes(\" - \")) {\n            const parts = title.split(\" - \")\n            mainTitle = parts[0]\n            subtitle = parts.slice(1).join(\" - \")\n          }\n          \n          return (\n            <article key={id} className=\"border border-gray-200 rounded-lg p-6 hover:shadow-lg transition-all duration-200 bg-white\">\n              <div className=\"flex flex-col lg:flex-row lg:items-start justify-between gap-4\">\n                <div className=\"flex-1\">\n                  {/* Tags */}\n                  <div className=\"mb-3\">\n                    {post.tags && post.tags.length > 0 ? (\n                      <div className=\"flex flex-wrap gap-2\">\n                        {post.tags.slice(0, 5).map((tag, index) => (\n                          <span \n                            key={index}\n                            className=\"inline-block px-3 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800\"\n                          >\n                            {tag}\n                          </span>\n                        ))}\n                        {post.tags.length > 5 && (\n                          <span className=\"inline-block px-3 py-1 text-xs font-semibold rounded-full bg-red-200 text-red-700\">\n                            +{post.tags.length - 5} more\n                          </span>\n                        )}\n                      </div>\n                    ) : (\n                      <span className=\"inline-block px-3 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800\">\n                        {category}\n                      </span>\n                    )}\n                  </div>\n                  \n                  {/* Article Link */}\n                  <Link href={`/posts/${id}`} className=\"block group\">\n                    <h2 className=\"text-2xl font-bold text-gray-900 group-hover:text-red-600 transition-colors mb-2\">\n                      {mainTitle}\n                    </h2>\n                    {subtitle && (\n                      <p className=\"text-lg text-gray-600 mb-3\">\n                        {subtitle}\n                      </p>\n                    )}\n                  </Link>\n                  \n                  {/* Meta Information */}\n                  <div className=\"flex flex-wrap items-center gap-4 text-sm text-gray-500\">\n                    <span className=\"flex items-center\">\n                      📅 {new Date(date).toLocaleDateString('en-US', { \n                        year: 'numeric', \n                        month: 'long', \n                        day: 'numeric' \n                      })}\n                    </span>\n                    <span className=\"flex items-center\">\n                      ⏱️ {readingTime}\n                    </span>\n                  </div>\n                </div>\n                \n                {/* Action Buttons */}\n                <div className=\"flex flex-col gap-2 lg:ml-4\">\n                  {/* Checklist download button for the breeder guide */}\n                  {id === '2025-06-25-choosing-a-great-dane-breeder' && (\n                    <a \n                      href=\"/breeder-evaluation-checklist.pdf\"\n                      className=\"px-4 py-2 bg-red-600 text-white text-sm font-semibold rounded hover:bg-red-700 transition-colors text-center\"\n                      style={{ color: 'white' }}\n                      download\n                    >\n                      Download Checklist\n                    </a>\n                  )}\n                </div>\n              </div>\n            </article>\n          )\n        })}\n      </section>\n      \n      {/* No Results Message */}\n      {filteredAndSortedPosts.length === 0 && (\n        <div className=\"text-center py-12\">\n          <p className=\"text-gray-500 text-lg\">No articles found for the selected filters.</p>\n          <button \n            onClick={() => {\n              setSelectedCategory('all')\n              setSortOrder('newest')\n            }}\n            className=\"mt-4 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 transition-colors\"\n          >\n            Clear Filters\n          </button>\n        </div>\n      )}\n    </main>\n  )\n}\n"],"names":["getArticleCategory","id","title","getReadingTime","ArchiveClient","posts","selectedCategory","setSelectedCategory","useState","sortOrder","setSortOrder","categories","useMemo","Set","map","post","filteredAndSortedPosts","filtered","sorted","filter","sort","a","b","Date","date","getTime","main","className","div","label","htmlFor","select","value","onChange","e","target","category","option","length","section","readingTime","mainTitle","includes","parts","split","subtitle","slice","join","article","tags","tag","index","span","Link","href","h2","p","toLocaleDateString","year","month","day","style","color","download","button","onClick"],"sourceRoot":"","ignoreList":[]}
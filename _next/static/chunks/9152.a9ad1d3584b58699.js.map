{"version":3,"file":"static/chunks/9152.a9ad1d3584b58699.js","mappings":"sLAKA,MAAa,cAAQ,iBAAa,EAAQ,EAE1C,iBADiB,uBAAiB,IAClC,4BACA,WACA,EAAe,iBAAW,KAC1B,WACA,CAAK,UACL,MAAY,SAAI,WAAa,8CAA+C,+BAAqC,sBAAwC,CACzJ,CAAC,EAID,EAHqC,cAAQ,cAG9B,GAH2C,EAAQ,EAClE,MAAY,SAAI,CAAC,GAAoB,EAEM,EAAC,IAFH,WAAwB,SAAI,IAAS,QAAc,EAAG,CAC/F,CAAC,qHCTD,MAAkB,uBAAU,QAC5B,SACA,6CACA,kFAA2F,qCAAyC,OAAO,qCAAyC,OACpL,oBACA,SACA,UACA,UACA,QACA,qBACA,kBACA,CAAK,CACL,CAAC,EACD,EAAmB,cAAQ,iBAAa,EAAQ,EAChD,UAAY,GAAQ,EACpB,MAAY,SAAI,CAAC,IAAQ,EAAI,WAAY,EAAM,0BAA8B,SAAI,CAAC,GAAO,EAAI,wBAA2B,SAAI,CAAC,GAAM,EAAI,2CACvI,UACA,CAAiB,mBAAsB,EAAG,EAAG,CAC7C,CAAC,EACD,EAA6B,cAAQ,iBAAa,aAAkB,EACpE,UAAY,oBAAwB,EACpC,SAAoB,SAAI,IAAe,QAAc,+BAA0D,SAAI,IAAgB,mBAAkC,CACrK,CAAC,EACD,EAAoB,cAAQ,iBAAa,aAAkB,EAC3D,UAAY,aAAiB,EAC7B,EAAiB,uBAAiB,IAClC,sCACA,MAAY,UAAK,QAAU,uBAAwB,EAAM,YAAc,SAAI,QAAU,OAAS,2BAA4B,YAAsB,WAA2B,SAAI,IAAe,QAAc,QAAW,CACvN,CAAC,EACD,EAAmB,cAAQ,iBAAa,EAAQ,EAChD,YAAY,GAAU,IACtB,SAAY,GAAU,EACtB,MAAY,SAAI,QAAU,6BAAsC,SAAI,CAAC,iBAAe,EAAI,UAAkB,EAAG,CAC7G,CAAC,EACD,EAAe","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/LinearReadArcsDisplay/components/ReactComponent.js","webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/shared/components/BaseDisplayComponent.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback } from 'react';\nimport { getContainingView } from '@jbrowse/core/util';\nimport { observer } from 'mobx-react';\nimport BaseDisplayComponent from '../../shared/components/BaseDisplayComponent';\nconst Arcs = observer(function ({ model, }) {\n    const view = getContainingView(model);\n    const width = Math.round(view.dynamicBlocks.totalWidthPx);\n    const height = model.height;\n    const cb = useCallback((ref) => {\n        model.setRef(ref);\n    }, [model, width, height]);\n    return (_jsx(\"canvas\", { \"data-testid\": \"arc-canvas\", ref: cb, style: { width, height, position: 'absolute' }, width: width * 2, height: height * 2 }));\n});\nconst LinearReadArcsReactComponent = observer(function ({ model, }) {\n    return (_jsx(BaseDisplayComponent, { model: model, children: _jsx(Arcs, { model: model }) }));\n});\nexport default LinearReadArcsReactComponent;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { LoadingEllipses } from '@jbrowse/core/ui';\nimport { getContainingView } from '@jbrowse/core/util';\nimport { BlockMsg } from '@jbrowse/plugin-linear-genome-view';\nimport { Button, Tooltip } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    loading: {\n        backgroundColor: theme.palette.background.default,\n        backgroundImage: `repeating-linear-gradient(45deg, transparent, transparent 5px, ${theme.palette.action.disabledBackground} 5px, ${theme.palette.action.disabledBackground} 10px)`,\n        position: 'absolute',\n        bottom: 0,\n        height: 50,\n        width: 300,\n        right: 0,\n        pointerEvents: 'none',\n        textAlign: 'center',\n    },\n}));\nconst BlockError = observer(function ({ model, }) {\n    const { error } = model;\n    return (_jsx(BlockMsg, { message: `${error}`, severity: \"error\", action: _jsx(Tooltip, { title: \"Reload\", children: _jsx(Button, { \"data-testid\": \"reload_button\", onClick: () => {\n                    model.reload();\n                }, children: \"Reload\" }) }) }));\n});\nconst BaseDisplayComponent = observer(function ({ model, children, }) {\n    const { error, regionTooLarge } = model;\n    return error ? (_jsx(BlockError, { model: model })) : regionTooLarge ? (model.regionCannotBeRendered()) : (_jsx(DataDisplay, { model: model, children: children }));\n});\nconst DataDisplay = observer(function ({ model, children, }) {\n    const { drawn, loading } = model;\n    const view = getContainingView(model);\n    const left = (model.lastDrawnOffsetPx || 0) - view.offsetPx;\n    return (_jsxs(\"div\", { \"data-testid\": `drawn-${drawn}`, children: [_jsx(\"div\", { style: { position: 'absolute', left }, children: children }), left !== 0 || loading ? _jsx(LoadingBar, { model: model }) : null] }));\n});\nconst LoadingBar = observer(function ({ model, }) {\n    const { classes } = useStyles();\n    const { message } = model;\n    return (_jsx(\"div\", { className: classes.loading, children: _jsx(LoadingEllipses, { message: message }) }));\n});\nexport default BaseDisplayComponent;\n"],"names":[],"sourceRoot":"","ignoreList":[0,1]}
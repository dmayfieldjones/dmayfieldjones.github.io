{"version":3,"file":"static/chunks/8998.b26a78c2a2053350.js","mappings":"0MAOe,iBAAmC,wBAAsB,CACxE,sBACA,gCACA,sCACA,wCACA,OAAoB,MAAkB,GAAG,gBAAwB,GAEjE,EAA2B,kBAAY,uBACvC,YACA,MAAwB,IAAgB,EACxC,aACA,gBACkB,kBAAY,uBAC9B,OACA,gBAEA,OADkB,kBAAY,uBAE9B,wBACA,CAAS,EACT,OACA,MACA,WAAwB,GAAS,EACjC,0BACA,CAAa,CACb,CACA,CACA,qBACA,mBAAgB,UAA6B,MAC7C,MAAe,kBAAY,gDAC3B,CACA,oBACA,oDACA,CACA,kBAAgC,EAChC,MAAe,sBAAgB,WAC/B,YAAoB,iBAAsB,EAC1C,gBAAoB,UAA6B,EACjD,KAAoB,YAAc,iCAClC,OAAkB,kBAAY,gDAC9B,qBACA,WAAsC,GAAU,EAChD,uBACA,SACA,MAA+B,QAAQ,OAAO,EAAW,EACpC,EACrB,CAAiB,CACjB,KACa,GACb,YACA,CAAS,aACT,CACA,mBACA,yCACA,mDACA,+CACA,IAAoB,UAAS,wBAC7B,0BACA,MACA,EAAa,CACb,CACA,CAEA,MADA,OAA8B,4BAAsB,CAAC,kBAAY,yBACjE,oBACA,kBACA,CAAoB,UAAS,wBAC7B,qBACA,SACA,SACA,QACA,mBACA,OACA,UACA,yDAEA,CAAa,EACb,wBACA,CACA,CACA,iBACA","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/SplitVcfTabixAdapter/SplitVcfTabixAdapter.js"],"sourcesContent":["import { TabixIndexedFile } from '@gmod/tabix';\nimport VcfParser from '@gmod/vcf';\nimport { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { fetchAndMaybeUnzipText, updateStatus } from '@jbrowse/core/util';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport VcfFeature from '../VcfFeature';\nexport default class SplitVcfTabixAdapter extends BaseFeatureDataAdapter {\n    async configurePre(refName) {\n        const indexType = this.getConf('indexType');\n        const vcfGzLocation = this.getConf('vcfGzLocationMap')[refName];\n        const indexLocation = this.getConf('indexLocationMap')[refName] || {\n            uri: `${vcfGzLocation.uri}.${indexType.toLowerCase()}`,\n        };\n        const filehandle = openLocation(vcfGzLocation, this.pluginManager);\n        const isCSI = indexType === 'CSI';\n        const vcf = new TabixIndexedFile({\n            filehandle,\n            csiFilehandle: isCSI\n                ? openLocation(indexLocation, this.pluginManager)\n                : undefined,\n            tbiFilehandle: !isCSI\n                ? openLocation(indexLocation, this.pluginManager)\n                : undefined,\n            chunkCacheSize: 50 * 2 ** 20,\n        });\n        return {\n            vcf,\n            parser: new VcfParser({\n                header: await vcf.getHeader(),\n            }),\n        };\n    }\n    async configure(refName, opts) {\n        const { statusCallback = () => { } } = opts || {};\n        return updateStatus('Downloading index', statusCallback, () => this.configurePre(refName));\n    }\n    async getRefNames() {\n        return Object.keys(this.getConf('vcfGzLocationMap'));\n    }\n    getFeatures(query, opts = {}) {\n        return ObservableCreate(async (observer) => {\n            const { refName, start, end } = query;\n            const { statusCallback = () => { } } = opts;\n            const { vcf, parser } = await this.configure(query.refName, opts);\n            await updateStatus('Downloading variants', statusCallback, () => vcf.getLines(refName, start, end, {\n                lineCallback: (line, fileOffset) => {\n                    observer.next(new VcfFeature({\n                        variant: parser.parseLine(line),\n                        parser,\n                        id: `${this.id}-vcf-${fileOffset}`,\n                    }));\n                },\n                ...opts,\n            }));\n            observer.complete();\n        }, opts.stopToken);\n    }\n    async getSources() {\n        const conf = this.getConf('samplesTsvLocation');\n        const r = Object.keys(this.getConf('vcfGzLocationMap'))[0];\n        if (conf.uri === '' || conf.uri === '/path/to/samples.tsv') {\n            const { parser } = await this.configure(r);\n            return parser.samples.map(name => ({\n                name,\n            }));\n        }\n        else {\n            const txt = await fetchAndMaybeUnzipText(openLocation(conf, this.pluginManager));\n            const lines = txt.split(/\\n|\\r\\n|\\r/);\n            const header = lines[0].split('\\t');\n            const { parser } = await this.configure(r);\n            const s = new Set(parser.samples);\n            return lines\n                .slice(1)\n                .map(line => {\n                const cols = line.split('\\t');\n                return {\n                    name: cols[0],\n                    ...Object.fromEntries(cols.slice(1).map((c, idx) => [header[idx + 1], c])),\n                };\n            })\n                .filter(f => s.has(f.name));\n        }\n    }\n    freeResources() { }\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
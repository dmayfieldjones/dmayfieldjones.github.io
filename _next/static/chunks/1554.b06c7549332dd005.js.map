{"version":3,"file":"static/chunks/1554.b06c7549332dd005.js","mappings":"yRAKA,MAAsC,cAAQ,iBAAa,+CAAiD,EAE5G,oBAAY,uBAAqC,CAD7B,eAAU,IAE9B,mBAAY,GAAoB,EAChC,mBACA,WACA,MAAY,SAAI,CAAC,GAAmB,EAAI,gBAA6B,QAAY,EACjF,cACA,WACA,oBACA,oBACA,aACA,CAAS,2DACT,IACA,CAAS,cACT,IACA,CAAS,iBACT,mBACA,2DACA,EAAW,CACX,CAAC,iBCfD,MAAkB,gBAAU,QAC5B,qBACA,oBACA,CAAK,CACL,QACA,mBACA,CAAK,CACL,WACA,oBACA,CAAK,CACL,CAAC,EAsDD,EArDmC,YAqDpB,CArDoB,CAAQ,iBAAa,EAAQ,EAChE,GAoDyC,CApDzC,CAoD0C,CAnD1C,YAAY,GAAU,IACtB,EAAoB,gBAAU,IAC9B,eAAY,qBAAiC,EAC7C,OAAY,GAAQ,EACpB,MAA0C,cAAQ,OAClD,MAAgC,cAAQ,GACxC,WACA,WACA,uBACA,2BACA,OACA,MAA8B,cAAQ,KACtC,2BACA,MACA,wDAIA,MAHI,eAAS,MACb,IACA,CAAK,QACO,UAAK,QAAU,kCAAwD,SAAI,CAAC,cAAY,EAAI,QAAqB,OAAU,SAAI,CAAC,GAAS,EAAI,yCAAkD,SAAI,SAAW,mBAC1N,MAGA,GAFA,mBACA,mBACA,EACA,IACA,2CACA,gBACA,MAA0C,QAAW,EACrD,SACA,QACA,cACA,CAAqC,EAErC,kEACA,6CAEA,GACA,MAA0C,QAAoB,EAAG,2BAA+B,CAEhG,CACA,SACA,iBACA,YAAkD,EAAE,YACpD,CAEA,CAAqB,UAAY,UAAK,CAAC,GAAI,EAAI,6EAAwF,SAAI,CAAC,GAAW,EAAI,SAAU,SAAI,CAAC,kBAAgB,EAAI,aAC9L,IACA,CAAqC,4CAAmE,EAAG,MAAmC,SAAI,CAAC,GAAS,EAAI,OAAS,aAAgB,IAAuB,SAAI,CAAC,GAAW,EAAI,SAAU,SAAI,CAAC,EAA6B,CAAI,0BD3CxO,EAAC,GC2CuO,MAAJ,MAAI,UAAgG,EAAG,EAAM,SAAI,CAAC,GAAgB,EAAI,yBAA+B,OAAY,SAAI,CAAC,GAAW,EAAI,SAAU,SAAI,CAAC,GAAM,EAAI,iGAAuH,EAAG,EAAG,SAAI,CAAC,GAAW,EAAI,SAAU,SAAI,CAAC,GAAM,EAAI,4CACxpB,mBACA,6BACA,CAAqC,+EAAsF,EAAG,GAAI,EAAG,EAAG,GAAI,CAC5I,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearGenomeView/components/ImportFormRefNameAutocomplete.js","webpack://_N_E/./node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearGenomeView/components/ImportForm.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getSession } from '@jbrowse/core/util';\nimport { observer } from 'mobx-react';\nimport RefNameAutocomplete from './RefNameAutocomplete';\nimport { fetchResults } from './util';\nconst ImportFormRefNameAutocomplete = observer(function ({ model, selectedAsm, value, setValue, setOption, }) {\n    const session = getSession(model);\n    const { assemblyManager, textSearchManager } = session;\n    const { rankSearchResults } = model;\n    const searchScope = model.searchScope(selectedAsm);\n    const assembly = assemblyManager.get(selectedAsm);\n    return (_jsx(RefNameAutocomplete, { fetchResults: queryString => fetchResults({\n            queryString,\n            assembly,\n            textSearchManager,\n            rankSearchResults,\n            searchScope,\n        }), model: model, assemblyName: selectedAsm, value: value, minWidth: 270, onChange: str => {\n            setValue(str);\n        }, onSelect: val => {\n            setOption(val);\n        }, TextFieldProps: {\n            variant: 'outlined',\n            helperText: 'Enter sequence name, feature name, or location',\n        } }));\n});\nexport default ImportFormRefNameAutocomplete;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { AssemblySelector, ErrorMessage } from '@jbrowse/core/ui';\nimport { getSession } from '@jbrowse/core/util';\nimport CloseIcon from '@mui/icons-material/Close';\nimport { Button, CircularProgress, Container, FormControl, Grid2 as Grid, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nimport ImportFormRefNameAutocomplete from './ImportFormRefNameAutocomplete';\nimport { handleSelectedRegion, navToOption } from '../../searchUtils';\nconst useStyles = makeStyles()(theme => ({\n    importFormContainer: {\n        padding: theme.spacing(2),\n    },\n    button: {\n        margin: theme.spacing(2),\n    },\n    container: {\n        padding: theme.spacing(4),\n    },\n}));\nconst LinearGenomeViewImportForm = observer(function ({ model, }) {\n    var _a;\n    const { classes } = useStyles();\n    const session = getSession(model);\n    const { assemblyNames, assemblyManager } = session;\n    const { error } = model;\n    const [selectedAsm, setSelectedAsm] = useState(assemblyNames[0]);\n    const [option, setOption] = useState();\n    const assembly = assemblyManager.get(selectedAsm);\n    const assemblyError = assemblyNames.length\n        ? assembly === null || assembly === void 0 ? void 0 : assembly.error\n        : 'No configured assemblies';\n    const displayError = assemblyError || error;\n    const [value, setValue] = useState('');\n    const regions = assembly === null || assembly === void 0 ? void 0 : assembly.regions;\n    const assemblyLoaded = !!regions;\n    const r0 = regions ? ((_a = regions[0]) === null || _a === void 0 ? void 0 : _a.refName) || '' : '';\n    useEffect(() => {\n        setValue(r0);\n    }, [r0, selectedAsm]);\n    return (_jsxs(\"div\", { className: classes.container, children: [displayError ? _jsx(ErrorMessage, { error: displayError }) : null, _jsx(Container, { className: classes.importFormContainer, children: _jsx(\"form\", { onSubmit: async (event) => {\n                        var _a;\n                        event.preventDefault();\n                        model.setError(undefined);\n                        if (value) {\n                            try {\n                                if ((option === null || option === void 0 ? void 0 : option.getDisplayString()) === value &&\n                                    option.hasLocation()) {\n                                    await navToOption({\n                                        option,\n                                        model,\n                                        assemblyName: selectedAsm,\n                                    });\n                                }\n                                else if ((_a = option === null || option === void 0 ? void 0 : option.results) === null || _a === void 0 ? void 0 : _a.length) {\n                                    model.setSearchResults(option.results, option.getLabel(), selectedAsm);\n                                }\n                                else if (assembly) {\n                                    await handleSelectedRegion({ input: value, assembly, model });\n                                }\n                            }\n                            catch (e) {\n                                console.error(e);\n                                session.notify(`${e}`, 'warning');\n                            }\n                        }\n                    }, children: _jsxs(Grid, { container: true, spacing: 1, justifyContent: \"center\", alignItems: \"center\", children: [_jsx(FormControl, { children: _jsx(AssemblySelector, { onChange: val => {\n                                        setSelectedAsm(val);\n                                    }, localStorageKey: \"lgv\", session: session, selected: selectedAsm }) }), selectedAsm ? (assemblyError ? (_jsx(CloseIcon, { style: { color: 'red' } })) : assemblyLoaded ? (_jsx(FormControl, { children: _jsx(ImportFormRefNameAutocomplete, { value: value, setValue: setValue, selectedAsm: selectedAsm, setOption: setOption, model: model }) })) : (_jsx(CircularProgress, { size: 20, disableShrink: true }))) : null, _jsx(FormControl, { children: _jsx(Button, { type: \"submit\", disabled: !value, className: classes.button, variant: \"contained\", color: \"primary\", children: \"Open\" }) }), _jsx(FormControl, { children: _jsx(Button, { disabled: !value, className: classes.button, onClick: () => {\n                                        model.setError(undefined);\n                                        model.showAllRegionsInAssembly(selectedAsm);\n                                    }, variant: \"contained\", color: \"secondary\", children: \"Show all regions in assembly\" }) })] }) }) })] }));\n});\nexport default LinearGenomeViewImportForm;\n"],"names":[],"sourceRoot":"","ignoreList":[0,1]}
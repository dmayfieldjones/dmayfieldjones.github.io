{"version":3,"file":"static/chunks/2983.ac7bf70b776ff32d.js","mappings":"8NAEO,uBAA+B,YAAgB,EACtD,MACA,oBAAY,GAAkB,CAAE,eAAU,IAC1C,iBACA,kBACA,4CACA,gBACA,EAAoB,QAAO,MAC3B,8CACA,MACA,kCAEA,MAAqB,QAAW,kBAChC,YACA,aACA,WACA,QACA,UACA,QACA,MAAuB,QAAqB,GAC5C,EACA,eACA,2BACA,sDACA,cACA,mBACA,mBAA6B,WAAW,OAGxC,OADA,mCACA,CACA,CC1BA,MAAuC,UAAI,KAAO,+BAA0C,EAC5F,EAAwC,UAAI,KAAO,+BAA2C,EAC/E,kBAA0C,YAAiB,EAC1E,SAAY,GAAO,EACnB,MAA0B,cAAQ,GAClC,MAA8B,cAAQ,GAClC,eAAS,MAEb,WACA,IACA,YAAoC,EAAa,CACjD,OACA,GAFiD,KAEjD,IAAiC,eAAa,GAC9C,CAAiB,EACjB,IACA,CACA,SACA,KACA,gBACA,CACA,EAAS,EACT,CAAK,QACL,SACA,KACA,YAAwB,aAAoB,IAC5C,sBAGA,gBAAyB,UAAK,QAAU,UAAW,SAAI,CAAC,GAAU,EAAI,6BAA+B,IAAW,SAAI,CAAC,cAAY,EAAI,QAAc,OAAU,SAAI,OAAS,uBAC1K,WACA,MAA4B,UAAK,OAAS,wBAA4B,cAAQ,qDAAoE,cAAQ,iCAA4C,SAAI,IAA2B,kBAA8B,MAAQ,SAAI,IAAuB,kBAA8B,GAAI,IAAK,kBAAoB,GAAG,EAAM,EAC1W,CAAiB,EAAG,GAAI,MACxB,CACA,kBAAkC,YAAgB,EAClD,MAAY,SAAI,CAAC,GAAI,EAAI,qBACzB,mBACA,MAA4B,gBAAU,IACtC,kBACA,EACA,CACA,cACA,UACA,YAAiC,eAAa,EAAG,YAAiB,EAClE,YACA,qDACiB,CACjB,CACA,CAAS,yBAA4B,CACrC,CACA,YAA8B,kBAAgB,EAC9C,MAAY,SAAI,CAAC,GAAI,EAAI,qBACzB,mBACA,MAA4B,gBAAU,IACtC,kBACA,EACA,CACA,cACA,UACA,YAAiC,eAAa,EAAG,YAAiB,EAClE,YACA,qDACiB,CACjB,CACA,CAAS,yBAA4B,CACrC,gBClEe,gBAA6C,UAAa,EACzE,MAAY,UAAK,QAAU,UAAW,SAAI,CAAC,GAAU,EAAI,qDAAuD,EAAG,SAAI,OAAS,WAChI,QAA6B,GAC7B,eACA,YACA,0BACA,EAAqC,QAAc,IACnD,kBACA,KACA,OACA,MACA,MACA,KAAyC,EAAM,GAAG,cAAgB,GAAG,EAAG,EACxE,4BACA,4BACA,KAA6C,EAAM,GAAG,EAAa,GAAG,GAAY,GAAG,EAAS,KAAK,EAAS,KAC5G,MAA4B,SAAI,OAAS,SAAU,SAAI,CAAC,GAAI,EAAI,2BAChE,mBACgC,OAAQ,KACxC,CAA6B,YAA2B,EAAG,IAAK,EAAU,GAAG,EAAI,EACjF,CAAiB,EAAG,GAAI,CACxB,CCpBe,cACf,UAAY,mBAAsB,EAClC,EAAoB,gBAAU,IAC9B,eAAY,GAAgB,CAAE,WAAM,IACpC,KACA,IACA,wCACA,CACA,SACA,CACA,MAAY,UAAK,CAAC,IAAQ,CAAI,cAAJ,wBAAI,UAAwD,SAAI,CAAC,EAAiC,CAAI,cAAwB,IAA2B,SAAI,CAAC,EAA5D,CAA8F,kBAAgC,QAAY,CAAhD,AACtN","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/getSAFeatures.js","webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/LaunchSupplementaryAlignmentBreakpointSplitViewPanel.js","webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/SupplementaryAlignmentsLocStrings.js","webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/SupplementaryAlignments.js"],"sourcesContent":["import { getSession } from '@jbrowse/core/util';\nimport { featurizeSA, getClip, getLengthSansClipping } from '../MismatchParser';\nexport async function getSAFeatures({ view, feature, }) {\n    var _a;\n    const { assemblyManager } = getSession(view);\n    const cigar = feature.get('CIGAR');\n    const origStrand = feature.get('strand');\n    const SA = ((_a = feature.get('tags')) === null || _a === void 0 ? void 0 : _a.SA) || '';\n    const readName = feature.get('name');\n    const clipPos = getClip(cigar, 1);\n    const assembly = await assemblyManager.waitForAssembly(view.assemblyNames[0]);\n    if (!assembly) {\n        throw new Error('assembly not found');\n    }\n    const suppAlns = featurizeSA(SA, feature.id(), origStrand, readName, true);\n    const feat = feature.toJSON();\n    feat.clipPos = clipPos;\n    feat.strand = 1;\n    feat.mate = {\n        refName: readName,\n        start: clipPos,\n        end: clipPos + getLengthSansClipping(cigar),\n    };\n    const features = [feat, ...suppAlns];\n    for (const [idx, f] of features.entries()) {\n        f.refName = assembly.getCanonicalRefName(f.refName) || f.refName;\n        f.syntenyId = idx;\n        f.mate.syntenyId = idx;\n        f.mate.uniqueId = `${f.uniqueId}_mate`;\n    }\n    features.sort((a, b) => a.clipPos - b.clipPos);\n    return features;\n}\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { lazy, useEffect, useState } from 'react';\nimport { ErrorMessage } from '@jbrowse/core/ui';\nimport { SimpleFeature, getSession, toLocale } from '@jbrowse/core/util';\nimport { Link, Typography } from '@mui/material';\nimport { getSAFeatures } from './getSAFeatures';\nconst BreakendMultiLevelOptionDialog = lazy(() => import('./BreakendMultiLevelOptionDialog'));\nconst BreakendSingleLevelOptionDialog = lazy(() => import('./BreakendSingleLevelOptionDialog'));\nexport default function LaunchBreakpointSplitViewPanel({ model, feature, }) {\n    const { view } = model;\n    const [res, setRes] = useState();\n    const [error, setError] = useState();\n    useEffect(() => {\n        ;\n        (async () => {\n            try {\n                const feats = await getSAFeatures({\n                    view,\n                    feature: new SimpleFeature(feature),\n                });\n                setRes(feats);\n            }\n            catch (e) {\n                setError(e);\n                console.error(e);\n            }\n        })();\n    }, [feature, view]);\n    const ret = [];\n    if (res) {\n        for (let i = 0; i < res.length - 1; i++) {\n            ret.push([res[i], res[i + 1]]);\n        }\n    }\n    return ret.length ? (_jsxs(\"div\", { children: [_jsx(Typography, { children: \"Launch split view\" }), error ? _jsx(ErrorMessage, { error: error }) : null, _jsx(\"ul\", { children: ret.map((arg, index) => {\n                    const [f1, f2] = arg;\n                    return (_jsxs(\"li\", { children: [f1.refName, \":\", toLocale(f1.strand === 1 ? f1.end : f1.start), \" ->\", ' ', f2.refName, \":\", toLocale(f2.strand === 1 ? f2.start : f2.end), ' ', _jsx(TopBottomSplitViewLink, { model: model, f1: f1, f2: f2 }), ' ', _jsx(SideBySideViewLink, { model: model, f1: f1, f2: f2 })] }, `${JSON.stringify(arg)}-${index}`));\n                }) })] })) : null;\n}\nfunction TopBottomSplitViewLink({ model, f1, f2, }) {\n    return (_jsx(Link, { href: \"#\", onClick: event => {\n            event.preventDefault();\n            const session = getSession(model);\n            session.queueDialog(handleClose => [\n                BreakendMultiLevelOptionDialog,\n                {\n                    handleClose,\n                    session,\n                    feature: new SimpleFeature({ ...f1, mate: f2 }),\n                    view: model.view,\n                    assemblyName: model.view.displayedRegions[0].assemblyName,\n                },\n            ]);\n        }, children: \"(top/bottom)\" }));\n}\nfunction SideBySideViewLink({ model, f1, f2, }) {\n    return (_jsx(Link, { href: \"#\", onClick: event => {\n            event.preventDefault();\n            const session = getSession(model);\n            session.queueDialog(handleClose => [\n                BreakendSingleLevelOptionDialog,\n                {\n                    handleClose,\n                    session,\n                    feature: new SimpleFeature({ ...f1, mate: f2 }),\n                    view: model.view,\n                    assemblyName: model.view.displayedRegions[0].assemblyName,\n                },\n            ]);\n        }, children: \"(single row)\" }));\n}\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Link, Typography } from '@mui/material';\nimport { getLengthOnRef } from '../MismatchParser';\nimport { navToLoc } from './util';\nexport default function SupplementaryAlignmentsLocStrings({ tag, model, }) {\n    return (_jsxs(\"div\", { children: [_jsx(Typography, { children: \"List of supplementary alignment locations\" }), _jsx(\"ul\", { children: tag\n                    .split(';')\n                    .filter(SA => !!SA)\n                    .map((SA, idx) => {\n                    const [saRef, saStart, saStrand, saCigar] = SA.split(',');\n                    const saLength = getLengthOnRef(saCigar);\n                    const extra = Math.floor(saLength / 5);\n                    const start = +saStart;\n                    const end = +saStart + saLength;\n                    const sp = start - extra;\n                    const ep = end + extra;\n                    const locString = `${saRef}:${Math.max(1, sp)}-${ep}`;\n                    const displayStart = start.toLocaleString('en-US');\n                    const displayEnd = end.toLocaleString('en-US');\n                    const displayString = `${saRef}:${displayStart}-${displayEnd} (${saStrand}) [${saLength}bp]`;\n                    return (_jsx(\"li\", { children: _jsx(Link, { href: \"#\", onClick: async (event) => {\n                                event.preventDefault();\n                                navToLoc(locString, model);\n                            }, children: displayString }) }, `${locString}-${idx}`));\n                }) })] }));\n}\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard';\nimport { getEnv, getSession } from '@jbrowse/core/util';\nimport LaunchBreakpointSplitViewPanel from './LaunchSupplementaryAlignmentBreakpointSplitViewPanel';\nimport SupplementaryAlignmentsLocStrings from './SupplementaryAlignmentsLocStrings';\nexport default function SupplementaryAlignments(props) {\n    const { model, tag, feature } = props;\n    const session = getSession(model);\n    const { pluginManager } = getEnv(session);\n    let hasBreakendSplitView = false;\n    try {\n        hasBreakendSplitView = !!pluginManager.getViewType('BreakpointSplitView');\n    }\n    catch (e) {\n    }\n    return (_jsxs(BaseCard, { ...props, title: \"Supplementary alignments\", children: [_jsx(SupplementaryAlignmentsLocStrings, { model: model, tag: tag }), hasBreakendSplitView ? (_jsx(LaunchBreakpointSplitViewPanel, { model: model, feature: feature })) : null] }));\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2,3]}
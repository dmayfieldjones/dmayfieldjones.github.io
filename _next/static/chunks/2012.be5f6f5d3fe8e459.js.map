{"version":3,"file":"static/chunks/2012.be5f6f5d3fe8e459.js","mappings":"iQAIA,aACA,OAAY,eAAmB,YACvB,eAAmB,CAAC,GAAgB,EAAI,eAAmB,gBAAmB,EAC9E,eAAmB,CAAC,GAAU,EAAI,iBAAmB,iBAC7D,CACA,gBACA,MAAW,qBAAe,QAAQ,EAAI,IACtC,CACA,qBAAsB,OAAmB,EACzC,OAAY,eAAmB,YACvB,eAAmB,CAAC,GAAS,EAAI,KAAS,IAClD,CACe,kBAA2B,gBAAqB,EAC/D,MAAoB,gBAAU,IAC9B,sCACA,MAAkD,cAAQ,IAC1D,MAAkC,cAAQ,KAC1C,MAA8B,cAAQ,GACtC,8BACA,gCACA,wCACA,OAAY,eAAmB,CAAC,QAAM,EAAI,qCAAuD,CACzF,eAAmB,CAAC,GAAa,MACzC,EAAqB,eAAmB,CAAC,cAAY,EAAI,QAAc,IAAgB,eAAmB,cAC9F,eAAmB,IAAe,2CAC9C,iBACA,EAAmB,EACP,eAAmB,IAAe,oEAA8E,UAAY,sBACxI,iBACA,EAAmB,CACH,eAAmB,CAAC,GAAQ,EAAI,eAAiB,WACjD,eAAmB,CAAC,GAAQ,EAAI,gBAAkB,YAClD,eAAmB,CAAC,GAAQ,EAAI,aAAe,SAC/C,eAAmB,CAAC,GAAQ,EAAI,aAAe,UAC/D,YAAiC,eAAmB,IAAe,gEACnE,iBACA,EAAmB,4CAA2D,eAAmB,CAAC,GAAQ,EAAI,cAAsB,kCACpI,EAA+B,eAAmB,CAAC,GAAgB,EAAI,QAAS,eAAmB,CAAC,GAAQ,EAAI,wBAChH,QACA,EAAuB,uFAA0F,EAAM,eAAmB,CAAC,GAAU,+FAC7I,eAAmB,CAAC,GAAa,MAC7B,eAAmB,CAAC,GAAM,EAAI,mDAC1C,GACA,EAAmB,WACP,eAAmB,CAAC,GAAM,EAAI,oEAC1C,MACA,UACA,IACA,mBACA,kBACA,WACA,cACA,WACA,CAAyB,EACzB,GACA,CACA,SACA,iBACA,IACA,QACA,CACA,KACA,CACA,EAAmB,YACnB","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearGenomeView/components/ExportSvgDialog.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Dialog, ErrorMessage } from '@jbrowse/core/ui';\nimport { getSession, useLocalStorage } from '@jbrowse/core/util';\nimport { Button, Checkbox, CircularProgress, DialogActions, DialogContent, FormControlLabel, MenuItem, TextField, Typography, } from '@mui/material';\nfunction LoadingMessage() {\n    return (React.createElement(\"div\", null,\n        React.createElement(CircularProgress, { size: 20, style: { marginRight: 20 } }),\n        React.createElement(Typography, { display: \"inline\" }, \"Creating SVG\")));\n}\nfunction useSvgLocal(key, val) {\n    return useLocalStorage(`svg-${key}`, val);\n}\nfunction TextField2({ children, ...rest }) {\n    return (React.createElement(\"div\", null,\n        React.createElement(TextField, { ...rest }, children)));\n}\nexport default function ExportSvgDialog({ model, handleClose, }) {\n    const session = getSession(model);\n    const offscreenCanvas = typeof OffscreenCanvas !== 'undefined';\n    const [rasterizeLayers, setRasterizeLayers] = useState(offscreenCanvas);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState();\n    const [filename, setFilename] = useSvgLocal('file', 'jbrowse.svg');\n    const [trackLabels, setTrackLabels] = useSvgLocal('tracklabels', 'offset');\n    const [themeName, setThemeName] = useSvgLocal('theme', session.themeName || 'default');\n    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: \"Export SVG\" },\n        React.createElement(DialogContent, null,\n            error ? (React.createElement(ErrorMessage, { error: error })) : loading ? (React.createElement(LoadingMessage, null)) : null,\n            React.createElement(TextField2, { helperText: \"filename\", value: filename, onChange: event => {\n                    setFilename(event.target.value);\n                } }),\n            React.createElement(TextField2, { select: true, label: \"Track label positioning\", variant: \"outlined\", style: { width: 150 }, value: trackLabels, onChange: event => {\n                    setTrackLabels(event.target.value);\n                } },\n                React.createElement(MenuItem, { value: \"offset\" }, \"Offset\"),\n                React.createElement(MenuItem, { value: \"overlay\" }, \"Overlay\"),\n                React.createElement(MenuItem, { value: \"left\" }, \"Left\"),\n                React.createElement(MenuItem, { value: \"none\" }, \"None\")),\n            session.allThemes ? (React.createElement(TextField2, { select: true, label: \"Theme\", variant: \"outlined\", value: themeName, onChange: event => {\n                    setThemeName(event.target.value);\n                } }, Object.entries(session.allThemes()).map(([key, val]) => (React.createElement(MenuItem, { key: key, value: key }, val.name || '(Unknown name)'))))) : null,\n            offscreenCanvas ? (React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: rasterizeLayers, onChange: () => {\n                        setRasterizeLayers(val => !val);\n                    } }), label: \"Rasterize canvas based tracks? File may be much larger if this is turned off\" })) : (React.createElement(Typography, null, \"Note: rasterizing layers not yet supported in this browser, so SVG size may be large\"))),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                    handleClose();\n                } }, \"Cancel\"),\n            React.createElement(Button, { variant: \"contained\", color: \"primary\", type: \"submit\", onClick: async () => {\n                    setLoading(true);\n                    setError(undefined);\n                    try {\n                        await model.exportSvg({\n                            rasterizeLayers,\n                            filename,\n                            trackLabels,\n                            themeName,\n                        });\n                        handleClose();\n                    }\n                    catch (e) {\n                        console.error(e);\n                        setError(e);\n                    }\n                    finally {\n                        setLoading(false);\n                    }\n                } }, \"Submit\"))));\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
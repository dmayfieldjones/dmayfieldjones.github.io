{"version":3,"file":"static/chunks/1410.99c140bfd016adc0.js","mappings":"uQAKA,MAAkB,uBAAU,IAC5B,SACA,eACA,aACA,eACA,CAAK,CACJ,EACD,GACA,cACA,6BACA,gBACA,gBACA,sBACA,sBACA,gBACA,iBACA,wBACA,4CACA,mCACA,0BACA,CACe,cACf,YAAY,GAAU,IACtB,SAAY,GAAU,EACtB,OAAY,GAAQ,EACpB,MAAY,UAAK,CAAC,IAAQ,CAAI,cAAJ,KAAI,UAAqC,SAAI,CAAC,IAAW,CAAI,iBAAJ,CAAI,EAA4B,EAAG,SAAI,CAAC,GAAS,EAAI,uBACxI,aACA,KAAmC,EAAK,GAAG,EAAI,EAC/C,MAA4B,SAAI,CAAC,GAAgB,EAAI,QAAS,SAAI,CAAC,GAAQ,EAAI,mDAA+E,UAAgB,GAC9K,CAAiB,EAAG,GAAI,CACxB,yBChCe,YAAqB,QAAO,EAC3C,SAA4B,cAAQ,KACpC,MAAgC,cAAQ,KACxC,YACA,oBAAmC,UAAK,CAAC,UAAS,EAAI,UAAW,SAAI,WAAa,2BAC9D,IAAI,GACxB,MACA,cAFwB,EAGxB,KACA,CAAqB,KACrB,CAAiB,yCAAqD,EAAG,SAAI,WAAa,2BAC1F,QACA,CAAiB,oCAA8C,EAAG,SAAI,QAAU,gBAA8B,eAAsB,KAAM,GAAI,EAAM,SAAI,QAAU,WAAmB,CACrL,2BCbe,sBAAoB,UAAmB,EACtD,MAAY,SAAI,CAAC,GAAI,EAAI,YACzB,mBACY,OAAQ,KACpB,CAAS,qBAAkC,CAC3C,CCRO,OACP,uEACA,0CACA,6CACA,4CACA,gEAAqE,IAAI,KACzE,qBACA,oCACA,gFAAqF,GAAG,GACxF,wBACA,yCACA,+BACA,mDACA,yBACA,gFACA,2DAAgE,IAAI,KACpE,oCACA,0CACA,oBACA,gCACA,kDACA,kDACA,kDACA,4BACA,2CAAgD,GAAG,GACnD,iCACA,qBACA,2BACA,aACA,wCACA,4DACA,kDACA,0BAA+B,kFAC/B,qCACA,uCACA,8CACA,gFACA,oCACA,wBACA,gCAAqC,KAAK,IAAI,UAC9C,2CAAgD,KAAK,IAAI,UACzD,2BACA,6CACA,aACA,sCACA,4DACA,mBACA,4DAAiE,IAAI,KACrE,yDAA8D,IAAI,KAClE,6DAAkE,IAAI,KACtE,uDACA,gBACA,kDACA,4EACA,kDACA,wDACA,0CACA,kDACA,4CACA,uBACA,uFACA,8EACA,ECpDA,EAAgC,UAAI,KAAO,+BAAmC,EAC9E,EAA+B,UAAI,KAAO,+BAAkC,EAS5E,EARiC,cAAQ,aACzC,IAAY,SAAQ,EACpB,OAMuC,EAAC,IAN5B,GAAc,EAC1B,qBACA,EAAe,OAAM,SACrB,OAAY,GAAQ,EACpB,MAAY,UAAK,CAAC,GAAK,EAAI,gDAAmD,SAAI,CAAC,IAAc,CAAI,mBAA0B,CAA9B,GAAkC,GAAE,wDAA+E,SAAI,CAAC,EAAQ,CAAI,KAAJ,CAAI,cAAgC,EAAM,SAAI,CAAC,EAAS,CAAI,MAAJ,CAAI,CAAc,EAAI,aAAuB,SAAI,IAA4B,wBAAsC,WAAwB,SAAI,IAA2B,kBAA6B,kBAAiC,SAAI,CAAC,EAAK,CAAI,WAAJ,EAAI,EAAyB,QAAW,CACnjB,CAAC,2DClBM,gBACP,MACA,wDAEO,sBACP,MAAoB,gBAAU,IAC9B,CAAY,QAAO,EACnB,IACA,KACA,+BAGA,wDAEA,CACA,SACA,iBACA,YAA0B,EAAE,EAC5B,CACA","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/Flags.js","webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/Formatter.js","webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/PairLink.js","webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/tagInfo.js","webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/AlignmentsFeatureDetail.js","webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/AlignmentsFeatureDetail/util.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard';\nimport SimpleField from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/SimpleField';\nimport { Checkbox, FormControlLabel, FormGroup } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()({\n    compact: {\n        paddingRight: 0,\n        paddingTop: 0,\n        paddingBottom: 0,\n    },\n});\nconst flagNames = [\n    'read paired',\n    'read mapped in proper pair',\n    'read unmapped',\n    'mate unmapped',\n    'read reverse strand',\n    'mate reverse strand',\n    'first in pair',\n    'second in pair',\n    'not primary alignment',\n    'read fails platform/vendor quality checks',\n    'read is PCR or optical duplicate',\n    'supplementary alignment',\n];\nexport default function AlignmentFlags(props) {\n    const { classes } = useStyles();\n    const { feature } = props;\n    const { flags } = feature;\n    return (_jsxs(BaseCard, { ...props, title: \"Flags\", children: [_jsx(SimpleField, { name: \"Flag\", value: flags }), _jsx(FormGroup, { children: flagNames.map((name, idx) => {\n                    const val = flags & (1 << idx);\n                    const key = `${name}_${val}`;\n                    return (_jsx(FormControlLabel, { control: _jsx(Checkbox, { className: classes.compact, checked: Boolean(val), name: name, readOnly: true }), label: name }, key));\n                }) })] }));\n}\n","import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport copy from 'copy-to-clipboard';\nexport default function Formatter({ value }) {\n    const [show, setShow] = useState(false);\n    const [copied, setCopied] = useState(false);\n    const display = String(value);\n    return display.length > 100 ? (_jsxs(_Fragment, { children: [_jsx(\"button\", { type: \"button\", onClick: () => {\n                    copy(display);\n                    setCopied(true);\n                    setTimeout(() => {\n                        setCopied(false);\n                    }, 700);\n                }, children: copied ? 'Copied to clipboard' : 'Copy' }), _jsx(\"button\", { type: \"button\", onClick: () => {\n                    setShow(val => !val);\n                }, children: show ? 'Show less' : 'Show more' }), _jsx(\"div\", { children: show ? display : `${display.slice(0, 100)}...` })] })) : (_jsx(\"div\", { children: display }));\n}\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Link } from '@mui/material';\nimport { navToLoc } from './util';\nexport default function PairLink({ locString, model, }) {\n    return (_jsx(Link, { onClick: event => {\n            event.preventDefault();\n            navToLoc(locString, model);\n        }, href: \"#\", children: locString }));\n}\n","export const tags = {\n    AM: 'The smallest template-independent mapping quality in the template',\n    AS: 'Alignment score generated by aligner',\n    BC: 'Barcode sequence identifying the sample',\n    BQ: 'Offset to base alignment quality (BAQ)',\n    BZ: 'Phred quality of the unique molecular barcode bases in the {OX} tag',\n    CB: 'Cell identifier',\n    CC: 'Reference name of the next hit',\n    CM: 'Edit distance between the color sequence and the color reference (see also {NM})',\n    CO: 'Free-text comments',\n    CP: 'Leftmost coordinate of the next hit',\n    CQ: 'Color read base qualities',\n    CR: 'Cellular barcode sequence bases (uncorrected)',\n    CS: 'Color read sequence',\n    CT: 'Complete read annotation tag, used for consensus annotation dummy features',\n    CY: 'Phred quality of the cellular barcode sequence in the {CR} tag',\n    E2: 'The 2nd most likely base calls',\n    FI: 'The index of segment in the template',\n    FS: 'Segment suffix',\n    FZ: 'Flow stopToken intensities',\n    GC: 'Reserved for backwards compatibility reasons',\n    GQ: 'Reserved for backwards compatibility reasons',\n    GS: 'Reserved for backwards compatibility reasons',\n    H0: 'Number of perfect hits',\n    H1: 'Number of 1-difference hits (see also {NM})',\n    H2: 'Number of 2-difference hits',\n    HI: 'Query hit index',\n    IH: 'Query hit total count',\n    LB: 'Library',\n    MC: 'CIGAR string for mate/next segment',\n    MD: 'String encoding mismatched and deleted reference bases',\n    MF: 'Reserved for backwards compatibility reasons',\n    MI: 'Molecular identifier; a string that uniquely identifies the molecule from which the record was derived',\n    ML: 'Base modification probabilities',\n    MM: 'Base modifications / methylation ',\n    MQ: 'Mapping quality of the mate/next segment',\n    NH: 'Number of reported alignments that contain the query in the current record',\n    NM: 'Edit distance to the reference',\n    OA: 'Original alignment',\n    OC: 'Original CIGAR (deprecated; use {OA} instead)',\n    OP: 'Original mapping position (deprecated; use {OA} instead)',\n    OQ: 'Original base quality',\n    OX: 'Original unique molecular barcode bases',\n    PG: 'Program',\n    PQ: 'Phred likelihood of the template',\n    PT: 'Read annotations for parts of the padded read sequence',\n    PU: 'Platform unit',\n    Q2: 'Phred quality of the mate/next segment sequence in the {R2} tag',\n    QT: 'Phred quality of the sample barcode sequence in the {BC} tag',\n    QX: 'Quality score of the unique molecular identifier in the {RX} tag',\n    R2: 'Sequence of the mate/next segment in the template',\n    RG: 'Read group',\n    RT: 'Reserved for backwards compatibility reasons',\n    RX: 'Sequence bases of the (possibly corrected) unique molecular identifier',\n    S2: 'Reserved for backwards compatibility reasons',\n    SA: 'Other canonical alignments in a chimeric alignment',\n    SM: 'Template-independent mapping quality',\n    SQ: 'Reserved for backwards compatibility reasons',\n    TC: 'The number of segments in the template',\n    TS: 'Transcript strand',\n    U2: 'Phred probability of the 2nd call being wrong conditional on the best being wrong',\n    UQ: 'Phred likelihood of the segment, conditional on the mapping being correct',\n};\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { lazy } from 'react';\nimport FeatureDetails from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/FeatureDetails';\nimport { Paper } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport Flags from './Flags';\nimport Formatter from './Formatter';\nimport PairLink from './PairLink';\nimport { tags } from './tagInfo';\nimport { getTag } from './util';\nconst SupplementaryAlignments = lazy(() => import('./SupplementaryAlignments'));\nconst LinkedPairedAlignments = lazy(() => import('./LinkedPairedAlignments'));\nconst AlignmentsFeatureDetails = observer(function (props) {\n    const { model } = props;\n    const { featureData } = model;\n    const feat = structuredClone(featureData);\n    const SA = getTag('SA', feat);\n    const { flags } = feat;\n    return (_jsxs(Paper, { \"data-testid\": \"alignment-side-drawer\", children: [_jsx(FeatureDetails, { ...props, descriptions: { tags }, feature: feat, formatter: (value, key) => key === 'next_segment_position' ? (_jsx(PairLink, { model: model, locString: value })) : (_jsx(Formatter, { value: value })) }), SA !== undefined ? (_jsx(SupplementaryAlignments, { model: model, tag: SA, feature: feat })) : null, flags & 1 ? (_jsx(LinkedPairedAlignments, { model: model, feature: feat })) : null, flags !== undefined ? _jsx(Flags, { feature: feat, ...props }) : null] }));\n});\nexport default AlignmentsFeatureDetails;\n","import { getSession } from '@jbrowse/core/util';\nexport function getTag(tag, feat) {\n    var _a;\n    return ((_a = feat.tags) === null || _a === void 0 ? void 0 : _a[tag]) || feat[tag];\n}\nexport async function navToLoc(locString, model) {\n    const session = getSession(model);\n    const { view } = model;\n    try {\n        if (view) {\n            await view.navToLocString(locString);\n        }\n        else {\n            throw new Error('No view associated with this view anymore');\n        }\n    }\n    catch (e) {\n        console.error(e);\n        session.notify(`${e}`);\n    }\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2,3,4,5]}
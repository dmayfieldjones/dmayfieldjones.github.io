{"version":3,"file":"static/chunks/7242.cb6aed6117c18765.js","mappings":"uNAMA,MAAkB,uBAAU,IAC5B,eACA,YACA,CAAK,CACL,cACA,wBACA,CAAK,CACL,OACA,YACA,gBACA,CACA,CAAC,EA2DD,EAvDyB,cAAQ,cAuDlB,GAvD+B,aAuDf,CAvDe,EAAqB,EACnE,YAAY,GAAU,IACtB,eAAY,GAAgB,EAC5B,MAA4B,cAAQ,eACpC,MAA8B,cAAQ,GAiBtC,MAhBI,eAAS,MACb,IACA,EACA,YACA,iBACA,eACA,YAdA,IAeA,SAdI,4BAAsB,GAe1B,CAAa,EACb,SACA,CACA,SACA,iBACA,IACA,CACA,CAAK,MACO,eAAmB,CAAC,QAAM,EAAI,0DAA8E,CAChH,eAAmB,CAAC,GAAa,MAC7B,eAAmB,YAC/B,uFACA,IACgB,eAAmB,WACf,eAAmB,WACf,eAAmB,kDAC3C,0DACoB,eAAmB,WACf,eAAmB,iDAC3C,8EACoB,eAAmB,WACf,eAAmB,gDAC3C,8DACA,EAAoB,eAAmB,MAAQ,kBAA0B,IAAK,EAAM,QACxE,eAAmB,CAAC,GAAS,EAAI,iHAC7C,iBACA,CAAiB,YACjB,OACA,SACA,qBACyB,CACJ,CACrB,CAAmB,GACX,eAAmB,CAAC,GAAa,MAC7B,eAAmB,CAAC,GAAM,EAAI,yFAC1C,gCACA,GACA,EAAmB,WACP,eAAmB,CAAC,GAAM,EAAI,mDAC1C,GACA,EAAmB,YACnB,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearBasicDisplay/components/AddFiltersDialog.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { stringToJexlExpression } from '@jbrowse/core/util/jexlStrings';\nimport { Button, DialogActions, DialogContent, TextField } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()({\n    dialogContent: {\n        width: '80em',\n    },\n    textAreaFont: {\n        fontFamily: 'Courier New',\n    },\n    error: {\n        color: 'red',\n        fontSize: '0.8em',\n    },\n});\nfunction checkJexl(code) {\n    stringToJexlExpression(code);\n}\nconst AddFiltersDialog = observer(function ({ model, handleClose, }) {\n    const { classes } = useStyles();\n    const { activeFilters } = model;\n    const [data, setData] = useState(activeFilters.join('\\n'));\n    const [error, setError] = useState();\n    useEffect(() => {\n        try {\n            data\n                .split('\\n')\n                .map(line => line.trim())\n                .filter(line => !!line)\n                .map(line => {\n                checkJexl(line.trim());\n            });\n            setError(undefined);\n        }\n        catch (e) {\n            console.error(e);\n            setError(e);\n        }\n    }, [data]);\n    return (React.createElement(Dialog, { maxWidth: \"xl\", open: true, onClose: handleClose, title: \"Add track filters\" },\n        React.createElement(DialogContent, null,\n            React.createElement(\"div\", null,\n                \"Add filters, in jexl format, one per line, starting with the string jexl:. Examples:\",\n                ' ',\n                React.createElement(\"ul\", null,\n                    React.createElement(\"li\", null,\n                        React.createElement(\"code\", null, \"jexl:get(feature,'name')=='BRCA1'\"),\n                        \" - show only feature where the name attribute is BRCA1\"),\n                    React.createElement(\"li\", null,\n                        React.createElement(\"code\", null, \"jexl:get(feature,'type')=='gene'\"),\n                        \" - show only gene type features in a GFF that has many other feature types\"),\n                    React.createElement(\"li\", null,\n                        React.createElement(\"code\", null, \"jexl:get(feature,'score') > 400\"),\n                        \" - show only features that have a score greater than 400\"))),\n            error ? React.createElement(\"p\", { className: classes.error }, `${error}`) : null,\n            React.createElement(TextField, { variant: \"outlined\", multiline: true, minRows: 5, maxRows: 10, className: classes.dialogContent, fullWidth: true, value: data, onChange: event => {\n                    setData(event.target.value);\n                }, slotProps: {\n                    input: {\n                        classes: {\n                            input: classes.textAreaFont,\n                        },\n                    },\n                } })),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { variant: \"contained\", color: \"primary\", type: \"submit\", autoFocus: true, disabled: !!error, onClick: () => {\n                    model.setJexlFilters(data.split('\\n'));\n                    handleClose();\n                } }, \"Submit\"),\n            React.createElement(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                    handleClose();\n                } }, \"Cancel\"))));\n});\nexport default AddFiltersDialog;\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
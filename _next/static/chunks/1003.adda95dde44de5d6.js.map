{"version":3,"file":"static/chunks/1003.adda95dde44de5d6.js","mappings":"qLAIA,MADA,OAA0C,QAC3B,CADiC,UEDhD,CFE2B,CCHZ,CDGa,QCHb,KACf,eAAmD,EAAY,UAI/D,CAJ+D,MAC/D,kBAAoD,EAAY,MAChE,KADgE,KAChE,GACA,UACA,CACA,ECLwB,SAAW,GAAK,CAAC,EAAC,KCD3B,EACf,eACA,sCAA0D,MAAS,GAEnE,iBACA,uCACA,CAAgB,0BAAgC,EAEhD,OAAiB,kBADjB,yBACiB,oBACjB,CACA,6BAEA,OADA,uBACA,kBAEA,oBAEA,MADA,wBACA,SAEA,sBAEA,MADA,wBACA,OAEA,aAEA,MADA,yBACA,IAEA,mBACA,mBACA,6BACA,uBACA,CACA,kBACA,qBAAwC,SAAS,EAAE,EAAG,GACtD,SACA,oBAAoC,UAAiB,EAAE,aAAoB,GAE3E,eACA,CACA,sBACA,wCACA,MACA,+BACA,iBACA,MAA0B,EAAI,EAE9B,eACA,SACA,YAA4B,WAAgB,KAC5C,uBAEA,SAAsB,YAAkB,OAAO,SAAoB,EAEnE,QACA,CACA,QACA,OAAe,EAAK,8CACpB,CACA,CCtDe,gBAAwC,aAAW,CAClE,mBACA,aAEA,YAAgB,SADW,oBAAc,wBAEzC,kBAA2B,EAAO,CAClC,yBACA,CAAS,CACT,CACA,uBACA,gCACA,CACA,qBACA,eAAgB,iBAA0B,EAC1C,uDACA,kBACA,8BACA,YACA,6BACA,GAEA,qBACA,UACA,YACA,GACA,oBAAmD,IAAU,EAC7D,kCACA,wBACA,eAAqC,SAAgB,CACpC,MACjB,gBACA,WACA,OACA,OACA,OACA,OACA,KAAqC,KAAgB,GAAG,EAAM,GAAG,EAAI,EACrE,WAA2B,IAAU,EACrC,YACA,QACA,wBACA,gBACA,aACiB,CACjB,CAAa,EACb,6CACA,CACA,iBACA,oCCnDA,OACA,8EACA,sFACA,wFACA,wFACA,wFACA,wFACA,wFACA,wFACA,sFACA,sFACA,wFACA,wFACA,wFACA,wFACA,wFACA,wFACA,sFACA,sFACA,wFACA,wFACA,wFACA,wFACA,wFACA,wFACA,sFACA,sFACA,wFACA,wFACA,wFACA,sFACA,wFACA,wFACA,CACA,gCACA,sBAUA,MARA,QAEA,oBAMe,CALf,MAKqB,EALrB,IAAwB,WAAwB,IAChD,wBAEA,WACA","sources":["webpack://_N_E/./node_modules/crc/mjs/create_buffer.js","webpack://_N_E/./node_modules/crc/mjs/define_crc.js","webpack://_N_E/./node_modules/crc/mjs/crc32.js","webpack://_N_E/./node_modules/@jbrowse/plugin-legacy-jbrowse/esm/JBrowse1TextSearchAdapter/HttpMap.js","webpack://_N_E/./node_modules/@jbrowse/plugin-legacy-jbrowse/esm/JBrowse1TextSearchAdapter/JBrowse1TextSearchAdapter.js","webpack://_N_E/./node_modules/crc/mjs/calculators/crc32.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable no-prototype-builtins */\nimport { Buffer } from 'buffer';\nconst createBuffer = (value, encoding) => Buffer.from(value, encoding);\nexport default createBuffer;\n","import createBuffer from './create_buffer.js';\nexport default function defineCrc(model, calculator) {\n    const result = (value, previous) => calculator(createBuffer(value), previous) >>> 0;\n    result.signed = (value, previous) => calculator(createBuffer(value), previous);\n    result.unsigned = result;\n    result.model = model;\n    return result;\n}\n","import crc32 from './calculators/crc32.js';\nimport defineCrc from './define_crc.js';\nexport default defineCrc('crc-32', crc32);\n","import crc32 from 'crc/crc32';\nexport default class HttpMap {\n    constructor(args) {\n        this.url = args.url.endsWith('/') ? args.url : `${args.url}/`;\n    }\n    async readMeta() {\n        const meta = await this.loadFile('meta.json');\n        const { compress, track_names: tracks } = meta;\n        const hashHexCharacters = Math.ceil(meta.hash_bits / 4);\n        return { hashHexCharacters, compress, tracks };\n    }\n    async getHashHexCharacters() {\n        const meta = await this.readMeta();\n        return meta.hashHexCharacters;\n    }\n    async getCompress() {\n        const meta = await this.readMeta();\n        return meta.compress;\n    }\n    async getTrackNames() {\n        const meta = await this.readMeta();\n        return meta.tracks;\n    }\n    async get(key) {\n        const bucket = await this.getBucket(key);\n        return bucket[key];\n    }\n    async getBucket(key) {\n        const bucketIdent = this.hash(key);\n        const hexToDirPath = await this.hexToDirPath(bucketIdent);\n        return this.loadFile(hexToDirPath);\n    }\n    async loadFile(id) {\n        const response = await fetch(`${this.url}${id}`);\n        if (!response.ok) {\n            throw new Error(`HTTP ${response.status} ${response.statusText}`);\n        }\n        return response.json();\n    }\n    async hexToDirPath(hex) {\n        const hashHexCharacters = await this.getHashHexCharacters();\n        if (hashHexCharacters) {\n            const compress = await this.getCompress();\n            while (hex.length < 8) {\n                hex = `0${hex}`;\n            }\n            hex = hex.slice(8 - hashHexCharacters);\n            const dirpath = [];\n            for (let i = 0; i < hex.length; i += 3) {\n                dirpath.push(hex.slice(i, i + 3));\n            }\n            return `${dirpath.join('/')}.json${compress ? 'z' : ''}`;\n        }\n        return '';\n    }\n    hash(data) {\n        return crc32(data).toString(16).toLowerCase().replace('-', 'n');\n    }\n}\n","import BaseResult from '@jbrowse/core/TextSearch/BaseResults';\nimport { readConfObject } from '@jbrowse/core/configuration';\nimport { BaseAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport HttpMap from './HttpMap';\nexport default class JBrowse1TextSearchAdapter extends BaseAdapter {\n    constructor(config, getSubAdapter, pluginManager) {\n        super(config, getSubAdapter, pluginManager);\n        const namesIndex = readConfObject(config, 'namesIndexLocation');\n        const { baseUri, uri } = namesIndex;\n        this.httpMap = new HttpMap({\n            url: baseUri ? new URL(uri, baseUri).href : uri,\n        });\n    }\n    async loadIndexFile(query) {\n        return this.httpMap.getBucket(query);\n    }\n    async searchIndex(args) {\n        const { searchType, queryString } = args;\n        const tracks = this.tracksNames || (await this.httpMap.getTrackNames());\n        const str = queryString.toLowerCase();\n        const entries = await this.loadIndexFile(str);\n        return entries[str]\n            ? this.formatResults(entries[str], tracks, searchType)\n            : [];\n    }\n    formatResults(results, tracks, searchType) {\n        return [\n            ...(searchType === 'exact'\n                ? []\n                : results.prefix.map(result => new BaseResult({\n                    label: typeof result === 'object' ? result.name : result,\n                    matchedAttribute: 'name',\n                    matchedObject: { result: result },\n                }))),\n            ...results.exact.map(result => {\n                const name = result[0];\n                const trackIndex = result[1];\n                const refName = result[3];\n                const start = result[4];\n                const end = result[5];\n                const locstring = `${refName || name}:${start}-${end}`;\n                return new BaseResult({\n                    locString: locstring,\n                    label: name,\n                    matchedAttribute: 'name',\n                    matchedObject: result,\n                    trackId: tracks[trackIndex],\n                });\n            }),\n        ].filter(result => result.getLabel() !== 'too many matches');\n    }\n    freeResources() { }\n}\n","// Generated by `./pycrc.py --algorithm=table-driven --model=crc-32 --generate=c`\nlet TABLE = [\n    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,\n    0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,\n    0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,\n    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,\n    0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,\n    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,\n    0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,\n    0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,\n    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,\n    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,\n    0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,\n    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,\n    0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,\n    0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,\n    0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,\n    0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,\n    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,\n    0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,\n    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,\n    0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,\n    0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,\n    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,\n    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,\n    0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,\n    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,\n    0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,\n    0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,\n    0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,\n];\nif (typeof Int32Array !== 'undefined') {\n    TABLE = new Int32Array(TABLE);\n}\nconst crc32 = (current, previous) => {\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    let crc = previous === 0 ? 0 : ~~previous ^ -1;\n    for (let index = 0; index < current.length; index++) {\n        crc = TABLE[(crc ^ current[index]) & 0xff] ^ (crc >>> 8);\n    }\n    return crc ^ -1;\n};\nexport default crc32;\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2,3,4,5]}
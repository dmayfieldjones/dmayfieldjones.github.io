{"version":3,"file":"static/chunks/2589.b41c39009e7c0fd9.js","mappings":"mJAIA,wBACA,YAAoB,QAAmB,IACvC,aAHA,GAGA,EAHA,GAGA,EAHA,GAGA,EAHA,GAIA,CACA,4BACA,YACA,WACc,QAA0B,QAC1B,QAAc,MAC5B,aAVA,GAUA,EAVA,GAUA,EAVA,GAUA,EAVA,GAWA,CACO,gBAAyB,4CAA6C,EAC7E,QACA,IAAY,mEAA+E,EAC3F,gBAAY,UAA6B,EACzC,4BACA,iBACA,EAAiB,QAA6C,eAC9D,KACA,WACA,MACA,YAAoB,IAAO,KAC3B,SACA,OAEA,GADA,+BACA,CACA,uBACA,eACA,WACA,YAA4B,IAAS,KACrC,YACA,MAAwB,QAAW,KACnC,OACA,MACA,8CACA,MACA,UACA,sBACA,iBACA,MACA,8CAEA,EADA,aACA,cACA,MAEA,oBACA,aA/CA,GA+CA,EA/CA,GA+CA,EA/CA,GA+CA,EA/CA,SAoDA,EADA,gBACA,UAEA,CACA,CACA,CACA,KACA,CACA,yBACA,eACA,WACA,YAA4B,IAAS,KACrC,YACA,MAAwB,QAAW,KACnC,OACA,MACA,UACA,qBACA,cACA,EAEA,EADA,aACA,cAGA,oBACA,aA5EA,GA4EA,EA5EA,GA4EA,EA5EA,GA4EA,EA5EA,KAiFA,EADA,gBACA,UAEA,CACA,CACA,CACA,SACA,CACA,OACA,OACA,KACA,CACA,4FC5FO,cACP,eACA,IACA,IACA,IACA,IACA,eACA,QACA,IAEA,QACA,IAEA,QACA,IAGA,IAGA,SACA,YAEA,EACA,MAAiB,YAAM,gBAAgB,UAAwB,KAO/D,OANA,GACA,4BAA2C,IAAa,KAExD,GACA,4BAA2C,MAAqB,KAEhE,SACA,CACA,CACO,gBACP,YACA,SAAe,MAAI,qBACnB,CACO,kBAEP,MADA,MACe,QAAQ,oBACvB","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/MultiLinearVariantMatrixRenderer/makeImageData.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/multiVariantColor.js"],"sourcesContent":["import { getColorAlleleCount, getColorPhased, getColorPhasedWithPhaseSet, } from '../shared/multiVariantColor';\nimport { getFeaturesThatPassMinorAlleleFrequencyFilter } from '../util';\nconst fudgeFactor = 0.6;\nconst f2 = fudgeFactor / 2;\nfunction drawColorAlleleCount(alleles, ctx, x, y, w, h) {\n    ctx.fillStyle = getColorAlleleCount(alleles);\n    ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n}\nfunction drawPhased(alleles, ctx, x, y, w, h, HP, PS) {\n    ctx.fillStyle =\n        PS !== undefined\n            ? getColorPhasedWithPhaseSet(alleles, HP, PS)\n            : getColorPhased(alleles, HP);\n    ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n}\nexport function makeImageData({ ctx, canvasWidth, canvasHeight, renderArgs, }) {\n    var _a, _b;\n    const { renderingMode: renderingMode, minorAlleleFrequencyFilter, sources, features, } = renderArgs;\n    const { statusCallback = () => { } } = renderArgs;\n    statusCallback('Drawing variant matrix');\n    const h = canvasHeight / sources.length;\n    const mafs = getFeaturesThatPassMinorAlleleFrequencyFilter(features.values(), minorAlleleFrequencyFilter);\n    const arr = [];\n    const m = mafs.length;\n    const w = canvasWidth / m;\n    for (let i = 0; i < m; i++) {\n        const arr2 = [];\n        const f = mafs[i];\n        const hasPhaseSet = f.get('format').includes('PS');\n        if (hasPhaseSet) {\n            const samp = f.get('samples');\n            const x = (i / mafs.length) * canvasWidth;\n            const sln = sources.length;\n            for (let j = 0; j < sln; j++) {\n                const y = (j / sln) * canvasHeight;\n                const { name, HP } = sources[j];\n                const s = samp[name];\n                if (s) {\n                    const genotype = (_a = s.GT) === null || _a === void 0 ? void 0 : _a[0];\n                    if (genotype) {\n                        arr2.push(genotype);\n                        const isPhased = genotype.includes('|');\n                        if (renderingMode === 'phased') {\n                            if (isPhased) {\n                                const PS = (_b = s.PS) === null || _b === void 0 ? void 0 : _b[0];\n                                const alleles = genotype.split('|');\n                                drawPhased(alleles, ctx, x, y, w, h, HP, PS);\n                            }\n                            else {\n                                ctx.fillStyle = 'black';\n                                ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n                            }\n                        }\n                        else {\n                            const alleles = genotype.split(/[/|]/);\n                            drawColorAlleleCount(alleles, ctx, x, y, w, h);\n                        }\n                    }\n                }\n            }\n        }\n        else {\n            const samp = f.get('genotypes');\n            const x = (i / mafs.length) * canvasWidth;\n            const sln = sources.length;\n            for (let j = 0; j < sln; j++) {\n                const y = (j / sln) * canvasHeight;\n                const { name, HP } = sources[j];\n                const genotype = samp[name];\n                if (genotype) {\n                    arr2.push(genotype);\n                    const isPhased = genotype.includes('|');\n                    if (renderingMode === 'phased') {\n                        if (isPhased) {\n                            const alleles = genotype.split('|');\n                            drawPhased(alleles, ctx, x, y, w, h, HP);\n                        }\n                        else {\n                            ctx.fillStyle = 'black';\n                            ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n                        }\n                    }\n                    else {\n                        const alleles = genotype.split(/[/|]/);\n                        drawColorAlleleCount(alleles, ctx, x, y, w, h);\n                    }\n                }\n            }\n        }\n        arr.push(arr2);\n    }\n    return {\n        mafs,\n        arr,\n    };\n}\n","import { set1 } from '@jbrowse/core/ui/colors';\nimport { colord } from '@jbrowse/core/util/colord';\nimport { colorify } from '../util';\nexport function getColorAlleleCount(alleles) {\n    const total = alleles.length;\n    let alt = 0;\n    let uncalled = 0;\n    let alt2 = 0;\n    let ref = 0;\n    for (const allele of alleles) {\n        if (allele === '1') {\n            alt++;\n        }\n        else if (allele === '0') {\n            ref++;\n        }\n        else if (allele === '.') {\n            uncalled++;\n        }\n        else {\n            alt2++;\n        }\n    }\n    if (ref === total) {\n        return `#ccc`;\n    }\n    else {\n        let a1 = colord(`hsl(200,50%,${80 - (alt / total) * 50}%)`);\n        if (alt2) {\n            a1 = a1.mix(`hsla(0,100%,20%,${alt2 / total})`);\n        }\n        if (uncalled) {\n            a1 = a1.mix(`hsla(50,50%,50%,${uncalled / total / 2})`);\n        }\n        return a1.toHex();\n    }\n}\nexport function getColorPhased(alleles, HP) {\n    const c = +alleles[HP];\n    return c ? set1[c - 1] || 'black' : '#ccc';\n}\nexport function getColorPhasedWithPhaseSet(alleles, HP, PS) {\n    const c = +alleles[HP];\n    return c ? colorify(+PS) || 'black' : '#ccc';\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0,1]}
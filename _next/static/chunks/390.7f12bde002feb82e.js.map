{"version":3,"file":"static/chunks/390.7f12bde002feb82e.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/AddTrackStatusMessage.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/util.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/TrackAdapterSelector.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/AddTrackUnknownAdapterPrompt.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/TextIndexingConfig.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/TrackTypeSelector.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/Unsupported.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/ConfirmTrack.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/TrackSourceSelect.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/doSubmit.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/DefaultAddTrackWorkflow.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/PasteConfigWorkflow.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddTrackWidget/components/AddTrackWidget.js","webpack://_N_E/./node_modules/@mui/icons-material/esm/Delete.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Typography } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    spacing: {\n        marginBottom: theme.spacing(3),\n    },\n}));\nexport default function StatusMessage({ trackAdapter, trackType, }) {\n    const { classes } = useStyles();\n    const { type, subadapter } = trackAdapter;\n    return type === 'SNPCoverageAdapter' ? (_jsxs(Typography, { className: classes.spacing, children: [\"Selected \", _jsx(\"code\", { children: trackType }), \". Using adapter \", _jsx(\"code\", { children: type }), \" with subadapter \", _jsx(\"code\", { children: subadapter === null || subadapter === void 0 ? void 0 : subadapter.type }), \". Please enter a track name and, if necessary, update the track type.\"] })) : (_jsxs(Typography, { className: classes.spacing, children: [\"Using adapter \", _jsx(\"code\", { children: type }), \" and guessing track type\", ' ', _jsx(\"code\", { children: trackType }), \". Please enter a track name and, if necessary, update the track type.\"] }));\n}\n","export function categorizeAdapters(adaptersList) {\n    var _a;\n    const map = {};\n    for (const adapter of adaptersList) {\n        const key = ((_a = adapter.adapterMetadata) === null || _a === void 0 ? void 0 : _a.category) || 'Default';\n        if (!map[key]) {\n            map[key] = [];\n        }\n        map[key].push(adapter);\n    }\n    return map;\n}\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getEnv } from '@jbrowse/core/util';\nimport { ListSubheader, MenuItem, TextField } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { categorizeAdapters } from './util';\nconst TrackAdapterSelector = observer(({ model }) => {\n    const { trackAdapter } = model;\n    const { pluginManager } = getEnv(model);\n    return (_jsx(TextField, { value: (trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type) !== 'UNKNOWN' ? trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type : '', label: \"Adapter type\", variant: \"outlined\", select: true, fullWidth: true, onChange: event => {\n            model.setAdapterHint(event.target.value);\n        }, slotProps: {\n            select: {\n                SelectDisplayProps: {\n                    'data-testid': 'adapterTypeSelect',\n                },\n            },\n        }, children: Object.entries(categorizeAdapters(pluginManager\n            .getAdapterElements()\n            .filter(e => { var _a; return !((_a = e.adapterMetadata) === null || _a === void 0 ? void 0 : _a.hiddenFromGUI); }))).map(([key, val]) => [\n            _jsx(ListSubheader, { children: key }, key),\n            val.map(elt => (_jsx(MenuItem, { value: elt.name, children: elt.displayName }, elt.name))),\n        ]) }));\n});\nexport default TrackAdapterSelector;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { Link, Typography } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nimport TrackAdapterSelector from './TrackAdapterSelector';\nconst useStyles = makeStyles()(theme => ({\n    spacing: {\n        marginBottom: theme.spacing(3),\n    },\n}));\nexport default function UnknownAdapterPrompt({ model, }) {\n    const { classes } = useStyles();\n    return (_jsxs(_Fragment, { children: [_jsxs(Typography, { className: classes.spacing, children: [\"JBrowse was not able to guess the adapter type for this data, but it may be in the list below. If not, you can\", ' ', _jsx(Link, { href: \"https://github.com/GMOD/jbrowse-components/releases\", target: \"_blank\", rel: \"noopener noreferrer\", children: \"check for new releases\" }), ' ', \"of JBrowse to see if they support this data type or\", ' ', _jsx(Link, { href: \"https://github.com/GMOD/jbrowse-components/issues/new\", target: \"_blank\", rel: \"noopener noreferrer\", children: \"file an issue\" }), ' ', \"and add a feature request for this data type.\"] }), _jsx(TrackAdapterSelector, { model: model })] }));\n}\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport AddIcon from '@mui/icons-material/Add';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { Card, CardContent, IconButton, InputAdornment, InputLabel, List, ListItem, Paper, TextField, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    paper: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: theme.spacing(1),\n    },\n    card: {\n        marginTop: theme.spacing(1),\n    },\n}));\nconst TextIndexingConfig = observer(function ({ model, }) {\n    const { classes } = useStyles();\n    const [value1, setValue1] = useState('');\n    const [value2, setValue2] = useState('');\n    const [attributes, setAttributes] = useState(['Name', 'ID']);\n    const [exclude, setExclude] = useState(['CDS', 'exon']);\n    const sections = [\n        {\n            label: 'Indexing attributes',\n            values: attributes,\n        },\n        {\n            label: 'Feature types to exclude',\n            values: exclude,\n        },\n    ];\n    useEffect(() => {\n        model.setTextIndexingConf({ attributes, exclude });\n    }, [model, attributes, exclude]);\n    return (_jsxs(Paper, { className: classes.paper, children: [_jsx(InputLabel, { children: \"Indexing configuration\" }), sections.map((section, index) => (_jsx(Card, { raised: true, className: classes.card, children: _jsxs(CardContent, { children: [_jsx(InputLabel, { children: section.label }), _jsxs(List, { disablePadding: true, children: [section.values.map((val, idx) => (_jsx(ListItem, { disableGutters: true, children: _jsx(TextField, { value: val, slotProps: {\n                                            input: {\n                                                endAdornment: (_jsx(InputAdornment, { position: \"end\", children: _jsx(IconButton, { onClick: () => {\n                                                            const newAttr = section.values.filter((_, i) => i !== idx);\n                                                            if (index === 0) {\n                                                                setAttributes(newAttr);\n                                                            }\n                                                            else {\n                                                                setExclude(newAttr);\n                                                            }\n                                                        }, children: _jsx(DeleteIcon, {}) }) })),\n                                            },\n                                        } }) }, `${val}-${idx}`))), _jsx(ListItem, { disableGutters: true, children: _jsx(TextField, { value: index === 0 ? value1 : value2, placeholder: \"add new\", onChange: event => {\n                                            if (index === 0) {\n                                                setValue1(event.target.value);\n                                            }\n                                            else {\n                                                setValue2(event.target.value);\n                                            }\n                                        }, slotProps: {\n                                            input: {\n                                                endAdornment: (_jsx(InputAdornment, { position: \"end\", children: _jsx(IconButton, { onClick: () => {\n                                                            if (index === 0) {\n                                                                setAttributes([...attributes, value1]);\n                                                                setValue1('');\n                                                            }\n                                                            else {\n                                                                setExclude([...exclude, value2]);\n                                                                setValue2('');\n                                                            }\n                                                        }, disabled: index === 0 ? value1 === '' : value2 === '', \"data-testid\": \"stringArrayAdd-Feat\", children: _jsx(AddIcon, {}) }) })),\n                                            },\n                                        } }) })] })] }) }, section.label)))] }));\n});\nexport default TextIndexingConfig;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getEnv } from '@jbrowse/core/util';\nimport { MenuItem, TextField } from '@mui/material';\nimport { observer } from 'mobx-react';\nconst TrackTypeSelector = observer(function ({ model, }) {\n    const { pluginManager } = getEnv(model);\n    const { trackType } = model;\n    const trackTypes = pluginManager.getTrackElements();\n    return (_jsx(TextField, { value: trackType, variant: \"outlined\", label: \"Track type\", select: true, fullWidth: true, onChange: event => {\n            model.setTrackType(event.target.value);\n        }, slotProps: {\n            select: {\n                SelectDisplayProps: {\n                    'data-testid': 'trackTypeSelect',\n                },\n            },\n        }, children: trackTypes.map(({ name, displayName }) => (_jsx(MenuItem, { value: name, children: displayName }, name))) }));\n});\nexport default TrackTypeSelector;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Link, Typography } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    spacing: {\n        marginBottom: theme.spacing(3),\n    },\n}));\nexport default function Unsupported() {\n    const { classes } = useStyles();\n    return (_jsxs(Typography, { className: classes.spacing, children: [\"This version of JBrowse cannot display data of this type. It is possible, however, that there is a newer version that can display them. You can\", ' ', _jsx(Link, { href: \"https://github.com/GMOD/jbrowse-components/releases\", target: \"_blank\", rel: \"noopener noreferrer\", children: \"check for new releases\" }), ' ', \"of JBrowse or\", ' ', _jsx(Link, { href: \"https://github.com/GMOD/jbrowse-components/issues/new\", target: \"_blank\", rel: \"noopener noreferrer\", children: \"file an issue\" }), ' ', \"and add a feature request for this data type.\"] }));\n}\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Suspense, useEffect, useState } from 'react';\nimport { AssemblySelector } from '@jbrowse/core/ui';\nimport { getEnv, getSession, isElectron, isSupportedIndexingAdapter, } from '@jbrowse/core/util';\nimport { UNKNOWN } from '@jbrowse/core/util/tracks';\nimport { Checkbox, FormControl, FormControlLabel, TextField, Typography, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nimport StatusMessage from './AddTrackStatusMessage';\nimport UnknownAdapterPrompt from './AddTrackUnknownAdapterPrompt';\nimport TextIndexingConfig from './TextIndexingConfig';\nimport TrackAdapterSelector from './TrackAdapterSelector';\nimport TrackTypeSelector from './TrackTypeSelector';\nimport Unsupported from './Unsupported';\nconst useStyles = makeStyles()(theme => ({\n    spacing: {\n        marginBottom: theme.spacing(3),\n    },\n}));\nconst ConfirmTrack = observer(function ConfirmTrack({ model, }) {\n    const { classes } = useStyles();\n    const [check, setCheck] = useState(true);\n    const session = getSession(model);\n    const { trackName, unsupported, trackAdapter, trackType, warningMessage, adapterHint, } = model;\n    useEffect(() => {\n        if (adapterHint === '' && trackAdapter) {\n            model.setAdapterHint(trackAdapter.type);\n        }\n    }, [adapterHint, trackAdapter, trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type, model]);\n    if (unsupported) {\n        return _jsx(Unsupported, {});\n    }\n    else if ((trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type) === UNKNOWN) {\n        return _jsx(UnknownAdapterPrompt, { model: model });\n    }\n    else if (!(trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type)) {\n        return _jsx(Typography, { children: \"Could not recognize this data type.\" });\n    }\n    else {\n        const supportedForIndexing = isSupportedIndexingAdapter(trackAdapter.type);\n        const { pluginManager } = getEnv(model);\n        const Component = pluginManager.evaluateExtensionPoint('Core-addTrackComponent', ({ model }) => (_jsx(AssemblySelector, { session: session, helperText: \"Select assembly to add track to\", selected: model.assembly, onChange: asm => {\n                model.setAssembly(asm);\n            }, TextFieldProps: {\n                fullWidth: true,\n                SelectProps: {\n                    SelectDisplayProps: {\n                        'data-testid': 'assemblyNameSelect',\n                    },\n                },\n            } })), { model });\n        return (_jsxs(\"div\", { children: [_jsx(StatusMessage, { trackAdapter: trackAdapter, trackType: trackType }), warningMessage ? (_jsx(Typography, { color: \"warning\", children: warningMessage })) : null, _jsx(TextField, { className: classes.spacing, label: \"trackName\", helperText: \"A name for this track\", fullWidth: true, value: trackName, onChange: event => {\n                        model.setTrackName(event.target.value);\n                    }, slotProps: {\n                        htmlInput: {\n                            'data-testid': 'trackNameInput',\n                        },\n                    } }), _jsxs(\"div\", { style: {\n                        display: 'flex',\n                        flexDirection: 'column',\n                        gap: 10,\n                    }, children: [_jsx(TrackAdapterSelector, { model: model }), _jsx(TrackTypeSelector, { model: model }), _jsx(Suspense, { fallback: null, children: _jsx(Component, { model: model }) })] }), isElectron && supportedForIndexing && (_jsx(FormControl, { children: _jsx(FormControlLabel, { label: \"Index track for text searching?\", control: _jsx(Checkbox, { checked: check, onChange: e => {\n                                setCheck(e.target.checked);\n                                model.setTextIndexTrack(e.target.checked);\n                            } }) }) })), isElectron && check && supportedForIndexing ? (_jsx(TextIndexingConfig, { model: model })) : null] }));\n    }\n});\nexport default ConfirmTrack;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { FileSelector } from '@jbrowse/core/ui';\nimport { Paper } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { getRoot } from 'mobx-state-tree';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    paper: {\n        padding: theme.spacing(2),\n    },\n    spacer: {\n        height: theme.spacing(8),\n    },\n}));\nconst TrackSourceSelect = observer(function ({ model, }) {\n    const { classes } = useStyles();\n    const rootModel = getRoot(model);\n    return (_jsxs(Paper, { className: classes.paper, children: [_jsx(FileSelector, { name: \"Main file\", description: \"\", location: model.trackData, setLocation: model.setTrackData, setName: model.setTrackName, rootModel: rootModel }), _jsx(\"div\", { className: classes.spacer }), _jsx(FileSelector, { name: \"Index file\", description: \"(Optional) The URL of the index file is automatically inferred from the URL of the main file if it is not supplied.\", location: model.indexTrackData, setLocation: model.setIndexTrackData, setName: model.setTrackName, rootModel: rootModel })] }));\n});\nexport default TrackSourceSelect;\n","import { getSession, isElectron, isSessionModelWithWidgets, isSessionWithAddTracks, isSupportedIndexingAdapter, } from '@jbrowse/core/util';\nimport { getRoot } from 'mobx-state-tree';\nfunction doTextIndexTrack({ trackId, model, }) {\n    const { textIndexingConf, trackName, assembly } = model;\n    const { jobsManager } = getRoot(model);\n    const attr = textIndexingConf || {\n        attributes: ['Name', 'ID'],\n        exclude: ['CDS', 'exon'],\n    };\n    const indexName = `${trackName}-index`;\n    jobsManager.queueJob({\n        indexingParams: {\n            ...attr,\n            assemblies: [assembly],\n            tracks: [trackId],\n            indexType: 'perTrack',\n            name: indexName,\n            timestamp: new Date().toISOString(),\n        },\n        name: indexName,\n        cancelCallback: () => jobsManager.abortJob(),\n    });\n}\nexport function doSubmit({ model }) {\n    var _a;\n    const { textIndexTrack, trackAdapter, view } = model;\n    const session = getSession(model);\n    const trackConfig = model.getTrackConfig(Date.now());\n    if (!isSessionWithAddTracks(session)) {\n        throw new Error(\"Can't add tracks to this session\");\n    }\n    else if (trackConfig && trackAdapter) {\n        const { trackId } = trackConfig;\n        session.addTrackConf(trackConfig);\n        (_a = view === null || view === void 0 ? void 0 : view.showTrack) === null || _a === void 0 ? void 0 : _a.call(view, trackId);\n        if (isElectron &&\n            textIndexTrack &&\n            isSupportedIndexingAdapter(trackAdapter.type)) {\n            doTextIndexTrack({\n                model,\n                trackId,\n            });\n        }\n        model.clearData();\n        if (isSessionModelWithWidgets(session)) {\n            session.hideWidget(model);\n        }\n    }\n    else {\n        throw new Error('Failed to add track.\\nThe configuration of this file is not currently supported.');\n    }\n}\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { getSession } from '@jbrowse/core/util';\nimport { Button, Step, StepContent, StepLabel, Stepper, Typography, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nimport ConfirmTrack from './ConfirmTrack';\nimport TrackSourceSelect from './TrackSourceSelect';\nimport { doSubmit } from './doSubmit';\nconst useStyles = makeStyles()(theme => ({\n    root: {\n        marginTop: theme.spacing(1),\n    },\n    stepper: {\n        backgroundColor: theme.palette.background.default,\n    },\n    button: {\n        marginRight: theme.spacing(1),\n    },\n    actionsContainer: {\n        marginTop: theme.spacing(10),\n        marginBottom: theme.spacing(2),\n    },\n    alertContainer: {\n        padding: `${theme.spacing(2)}px 0px ${theme.spacing(2)}px 0px`,\n    },\n}));\nconst steps = ['Enter track data', 'Confirm track type'];\nconst DefaultAddTrackWorkflow = observer(function ({ model, }) {\n    const [activeStep, setActiveStep] = useState(0);\n    const { classes } = useStyles();\n    const { assembly, trackAdapter, trackData, trackName, trackType } = model;\n    function getStepContent(step) {\n        switch (step) {\n            case 0:\n                return _jsx(TrackSourceSelect, { model: model });\n            case 1:\n                return _jsx(ConfirmTrack, { model: model });\n            default:\n                return _jsx(Typography, { children: \"Unknown step\" });\n        }\n    }\n    function isNextDisabled() {\n        switch (activeStep) {\n            case 0:\n                return !trackData;\n            case 1:\n                return !(trackName && trackType && (trackAdapter === null || trackAdapter === void 0 ? void 0 : trackAdapter.type) && assembly);\n            default:\n                return true;\n        }\n    }\n    return (_jsx(\"div\", { className: classes.root, children: _jsx(Stepper, { className: classes.stepper, activeStep: activeStep, orientation: \"vertical\", children: steps.map((label, idx) => (_jsxs(Step, { children: [_jsx(StepLabel, { children: label }), _jsxs(StepContent, { children: [getStepContent(idx), _jsxs(\"div\", { className: classes.actionsContainer, children: [_jsx(Button, { disabled: activeStep === 0, className: classes.button, onClick: () => {\n                                            setActiveStep(activeStep - 1);\n                                        }, children: \"Back\" }), _jsx(Button, { disabled: isNextDisabled(), variant: \"contained\", color: \"primary\", onClick: () => {\n                                            if (activeStep !== steps.length - 1) {\n                                                setActiveStep(activeStep + 1);\n                                            }\n                                            else {\n                                                try {\n                                                    doSubmit({ model });\n                                                }\n                                                catch (e) {\n                                                    getSession(model).notifyError(`${e}`, e);\n                                                }\n                                            }\n                                        }, className: classes.button, \"data-testid\": \"addTrackNextButton\", children: activeStep === steps.length - 1 ? 'Add' : 'Next' })] })] })] }, label))) }) }));\n});\nexport default DefaultAddTrackWorkflow;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { ErrorMessage } from '@jbrowse/core/ui';\nimport { getSession, isSessionModelWithWidgets, isSessionWithAddTracks, } from '@jbrowse/core/util';\nimport { Button, TextField } from '@mui/material';\nimport { transaction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()({\n    textbox: {\n        width: '100%',\n    },\n    submit: {\n        marginTop: 25,\n        marginBottom: 100,\n        display: 'block',\n    },\n});\nconst PasteConfigAddTrackWorkflow = observer(function ({ model, }) {\n    const { classes } = useStyles();\n    const [val, setVal] = useState('');\n    const [error, setError] = useState();\n    return (_jsxs(\"div\", { children: [error ? _jsx(ErrorMessage, { error: error }) : null, _jsx(TextField, { multiline: true, rows: 10, value: val, placeholder: \"Paste track config or array of track configs in JSON format\", variant: \"outlined\", className: classes.textbox, onChange: event => {\n                    setVal(event.target.value);\n                } }), _jsx(Button, { variant: \"contained\", className: classes.submit, onClick: () => {\n                    try {\n                        setError(undefined);\n                        const session = getSession(model);\n                        const conf = JSON.parse(val);\n                        const confs = Array.isArray(conf) ? conf : [conf];\n                        if (isSessionWithAddTracks(session) &&\n                            isSessionModelWithWidgets(session)) {\n                            transaction(() => {\n                                for (const c of confs) {\n                                    session.addTrackConf(c);\n                                }\n                                for (const c of confs) {\n                                    model.view.showTrack(c.trackId);\n                                }\n                                model.clearData();\n                            });\n                            session.hideWidget(model);\n                        }\n                    }\n                    catch (e) {\n                        console.error(e);\n                        setError(e);\n                    }\n                }, children: \"Submit\" })] }));\n});\nexport default PasteConfigAddTrackWorkflow;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { Suspense, useState } from 'react';\nimport { getEnv } from '@jbrowse/core/util';\nimport { FormControl, FormHelperText, MenuItem, Select } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport DefaultAddTrackWorkflow from './DefaultAddTrackWorkflow';\nimport PasteConfigWorkflow from './PasteConfigWorkflow';\nconst AddTrackSelector = observer(function ({ model, }) {\n    const [val, setVal] = useState('Default add track workflow');\n    const ComponentMap = {\n        'Default add track workflow': DefaultAddTrackWorkflow,\n        'Add track JSON': PasteConfigWorkflow,\n        ...Object.fromEntries(getEnv(model)\n            .pluginManager.getAddTrackWorkflowElements()\n            .map(w => [w.name, w.ReactComponent])),\n    };\n    const val2 = ComponentMap[val] ? val : 'Default add track workflow';\n    const Component = ComponentMap[val2];\n    return (_jsxs(_Fragment, { children: [_jsxs(FormControl, { children: [_jsx(Select, { value: val2, onChange: event => {\n                            setVal(event.target.value);\n                        }, children: Object.keys(ComponentMap).map(e => (_jsx(MenuItem, { value: e, children: e }, e))) }), _jsx(FormHelperText, { children: \"Type of add track workflow\" })] }), _jsx(Suspense, { fallback: null, children: _jsx(Component, { model: model }) })] }));\n});\nexport default AddTrackSelector;\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6zM19 4h-3.5l-1-1h-5l-1 1H5v2h14z\"\n}), 'Delete');"],"names":["createSvgIcon","_jsx","d"],"sourceRoot":"","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13]}
{"version":3,"file":"static/chunks/9467.3d9720d2b9cfa154.js","mappings":"qLAKe,iBAAoC,wBAAsB,CACzE,kBACA,MACA,+FACA,MACA,wCAEA,qBAEA,oBAEA,MADA,yBACA,aACA,CACA,iBACA,MAAe,sBAAgB,WAC/B,MACA,6BAEA,QADA,IAEA,qBAFA,KAGA,wBACA,aAGA,qBACA,KACA,QACA,KACA,CAAa,IAEb,aADA,MAAgC,OAAc,QAAU,OAAO,KAC/D,8BACA,yBACA,gCACA,gCACA,kCACA,eAA8C,SAA2B,GACzE,MACA,KAEA,aADA,cACA,CACA,gBACA,wBAC4B,oBAAc,qBAC1C,WAA8C,eAAa,EAC3D,YAA6C,QAAQ,GAAG,EAAE,GAAG,KAAS,MACtE,kBACA,QACA,MACA,UACA,QACA,CAA6B,EAE7B,CAEA,KAEA,YADoC,YAAM,gBAC1C,CACA,gBACA,wBAC4B,oBAAc,qBAC1C,WAA8C,eAAa,EAC3D,YAA6C,QAAQ,GAAG,EAAE,GAAG,KAAS,MACtE,kBACA,QACA,MACA,UACA,SACA,CAA6B,EAE7B,CAEA,CACA,YACA,CAAS,CACT,CACA,iBACA","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-sequence/esm/SequenceSearchAdapter/SequenceSearchAdapter.js"],"sourcesContent":["import { BaseFeatureDataAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { SimpleFeature, doesIntersect2, revcom } from '@jbrowse/core/util';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nimport { firstValueFrom } from 'rxjs';\nimport { toArray } from 'rxjs/operators';\nexport default class SequenceSearchAdapter extends BaseFeatureDataAdapter {\n    async configure() {\n        var _a;\n        const adapter = await ((_a = this.getSubAdapter) === null || _a === void 0 ? void 0 : _a.call(this, this.getConf('sequenceAdapter')));\n        if (!adapter) {\n            throw new Error('Error getting subadapter');\n        }\n        return adapter.dataAdapter;\n    }\n    async getRefNames() {\n        const adapter = await this.configure();\n        return adapter.getRefNames();\n    }\n    getFeatures(query, opts) {\n        return ObservableCreate(async (observer) => {\n            var _a;\n            const sequenceAdapter = await this.configure();\n            const hw = 10000;\n            const queryEnd = query.end + hw;\n            const queryStart = Math.max(0, query.start - hw);\n            if (queryEnd < 0 || queryStart > queryEnd) {\n                observer.complete();\n                return;\n            }\n            const ret = sequenceAdapter.getFeatures({\n                ...query,\n                start: queryStart,\n                end: queryEnd,\n            }, opts);\n            const feats = await firstValueFrom(ret.pipe(toArray()));\n            const residues = ((_a = feats[0]) === null || _a === void 0 ? void 0 : _a.get('seq')) || '';\n            const search = this.getConf('search');\n            const searchForward = this.getConf('searchForward');\n            const searchReverse = this.getConf('searchReverse');\n            const caseInsensitive = this.getConf('caseInsensitive');\n            const re = new RegExp(search, `g${caseInsensitive ? 'i' : ''}`);\n            if (search) {\n                if (searchForward) {\n                    const matches = residues.matchAll(re);\n                    for (const match of matches) {\n                        const s = queryStart + match.index;\n                        const e = queryStart + match.index + match[0].length;\n                        if (doesIntersect2(s, e, query.start, query.end)) {\n                            observer.next(new SimpleFeature({\n                                uniqueId: `${this.id}-${s}-${match[0]}-pos`,\n                                refName: query.refName,\n                                start: s,\n                                end: e,\n                                name: match[0],\n                                strand: 1,\n                            }));\n                        }\n                    }\n                }\n                if (searchReverse) {\n                    const matches = revcom(residues).matchAll(re);\n                    for (const match of matches) {\n                        const e = queryEnd - match.index;\n                        const s = queryEnd - match.index - match[0].length;\n                        if (doesIntersect2(s, e, query.start, query.end)) {\n                            observer.next(new SimpleFeature({\n                                uniqueId: `${this.id}-${s}-${match[0]}-neg`,\n                                refName: query.refName,\n                                start: s,\n                                end: e,\n                                name: match[0],\n                                strand: -1,\n                            }));\n                        }\n                    }\n                }\n            }\n            observer.complete();\n        });\n    }\n    freeResources() { }\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
{"version":3,"file":"static/chunks/5089.99b1772d3f167580.js","mappings":"uRAQA,MAAkB,uBAAU,IAC5B,eACA,YACA,CAAK,CACJ,EAoDD,EAnD6B,cAAQ,cAmDtB,GAnDmC,gBAAqB,CAmDpC,EAAC,GA7CpC,EALA,YAAY,GAAU,IACtB,MAA8B,cAAQ,KACtC,MAA8C,cAAQ,KACtD,MAA8C,cAAQ,KACtD,MAAkD,cAAQ,KAE1D,IACA,aACA,CACA,SACA,GACA,CACA,MAAY,UAAK,CAAC,QAAM,EAAI,kEAAuF,UAAK,CAAC,GAAa,EAAI,oCAA6C,SAAI,CAAC,GAAU,EAAI,2KAA6K,EAAG,SAAI,CAAC,GAAS,EAAI,qBAC5Y,iBACA,CAAyB,sCAAyC,EAAG,UAAK,CAAC,GAAS,EAAI,UAAW,SAAI,CAAC,GAAgB,EAAI,QAAS,SAAI,CAAC,GAAQ,EAAI,uBACtJ,mBACA,EAAuC,gCAAmC,EAAG,SAAI,CAAC,GAAgB,EAAI,QAAS,SAAI,CAAC,GAAQ,EAAI,uBAChI,mBACA,EAAuC,gCAAmC,EAAG,SAAI,CAAC,GAAgB,EAAI,QAAS,SAAI,CAAC,GAAQ,EAAI,uBAChI,mBACA,EAAuC,2BAA8B,GAAI,IAAW,SAAI,CAAC,GAAU,EAAI,0BAA6B,EAAM,EAAG,QAAW,EAAG,UAAK,CAAC,GAAa,EAAI,UAAW,SAAI,CAAC,GAAM,EAAI,aAC5M,MACA,MACA,yBAAmE,YAAY,EAC/E,EAAgD,gBAAU,IAC1D,iBAAwC,GAAkB,EAC1D,qBACoC,4BAAsB,MAC1D,gBACA,UACA,wBAAiE,EAAM,EACvE,kBACA,oBACA,SACA,6BACA,SACA,gBACA,gBACA,kBACA,gBAA6D,iBAAW,yEACxE,CAAyC,CACJ,EACrC,eAEA,CACA,GACA,CAAyB,uDAA8D,EAAG,SAAI,CAAC,GAAM,EAAI,aACzG,GACA,CAAyB,wDAA+D,GAAI,GAAI,CAChG,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearGenomeView/components/SequenceSearchDialog.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { getSession, isSessionWithAddTracks } from '@jbrowse/core/util';\nimport { Button, Checkbox, DialogActions, DialogContent, FormControlLabel, FormGroup, TextField, Typography, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { getSnapshot } from 'mobx-state-tree';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()({\n    dialogContent: {\n        width: '40em',\n    },\n});\nconst SequenceSearchDialog = observer(function ({ model, handleClose, }) {\n    const { classes } = useStyles();\n    const [value, setValue] = useState('');\n    const [searchForward, setSearchForward] = useState(true);\n    const [searchReverse, setSearchReverse] = useState(true);\n    const [caseInsensitive, setCaseInsensitive] = useState(true);\n    let error;\n    try {\n        new RegExp(value);\n    }\n    catch (e) {\n        error = e;\n    }\n    return (_jsxs(Dialog, { maxWidth: \"xl\", open: true, onClose: handleClose, title: \"Sequence search\", children: [_jsxs(DialogContent, { className: classes.dialogContent, children: [_jsx(Typography, { children: \"Supply a sequence to search for. A track will be created with the resulting matches once submitted. You can also supply regex style expressions e.g. AACT(C|T).\" }), _jsx(TextField, { value: value, onChange: e => {\n                            setValue(e.target.value);\n                        }, helperText: \"Sequence search pattern\" }), _jsxs(FormGroup, { children: [_jsx(FormControlLabel, { control: _jsx(Checkbox, { checked: searchForward, onChange: event => {\n                                        setSearchForward(event.target.checked);\n                                    } }), label: \"Search forward strand\" }), _jsx(FormControlLabel, { control: _jsx(Checkbox, { checked: searchReverse, onChange: event => {\n                                        setSearchReverse(event.target.checked);\n                                    } }), label: \"Search reverse strand\" }), _jsx(FormControlLabel, { control: _jsx(Checkbox, { checked: caseInsensitive, onChange: event => {\n                                        setCaseInsensitive(event.target.checked);\n                                    } }), label: \"Case insensitive\" })] }), error ? _jsx(Typography, { color: \"error\", children: `${error}` }) : null] }), _jsxs(DialogActions, { children: [_jsx(Button, { onClick: () => {\n                            var _a;\n                            if (value) {\n                                const trackId = `sequence_search_${+Date.now()}`;\n                                const session = getSession(model);\n                                const { assemblyManager } = session;\n                                const assemblyName = model.assemblyNames[0];\n                                if (isSessionWithAddTracks(session)) {\n                                    session.addTrackConf({\n                                        trackId,\n                                        name: `Sequence search ${value}`,\n                                        assemblyNames: [assemblyName],\n                                        type: 'FeatureTrack',\n                                        adapter: {\n                                            type: 'SequenceSearchAdapter',\n                                            search: value,\n                                            searchForward,\n                                            searchReverse,\n                                            caseInsensitive,\n                                            sequenceAdapter: getSnapshot((_a = assemblyManager.get(assemblyName)) === null || _a === void 0 ? void 0 : _a.configuration.sequence.adapter),\n                                        },\n                                    });\n                                    model.showTrack(trackId);\n                                }\n                            }\n                            handleClose();\n                        }, variant: \"contained\", color: \"primary\", children: \"Submit\" }), _jsx(Button, { onClick: () => {\n                            handleClose();\n                        }, variant: \"contained\", color: \"secondary\", children: \"Close\" })] })] }));\n});\nexport default SequenceSearchDialog;\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
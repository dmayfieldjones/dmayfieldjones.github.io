{"version":3,"file":"static/chunks/3539.f3451c5f19d735a0.js","mappings":"qLAsBe,iBAAoC,qBAAmB,CACtE,qBACA,UAAgB,GAAQ,oBACxB,oBAEA,oBACA,UAAgB,GAAQ,oBACxB,sCACA,UACA,QACA,sBACA,EACA,CACA,kBACA,oCAEA,OACA,kBAjCA,SA+BA,MAA0C,kBAAY,yCA9BtD,WACA,wBACA,QACA,0BACA,sBACA,+BACA,OACA,EACA,CACA,wBACA,UACA,CAAa,CAEb,CAAK,GAmBL,wBACA,CACoB,oBAAc,wCAAmC,EAAS,GAC9E,EACA,EACA,EAEA,CACA,CACA,kBACA,uCACA,sDACA,KACc,kBAAY,uCAC1B,CACA,eAOA,OANA,aACA,wCAEA,MADA,mBACA,CACA,EAAa,EAEb,YAEA,iBACA,YAAgB,iBAAsB,EACtC,MAAe,sBAAgB,WAC/B,UAAoB,GAAQ,oBAC5B,UACA,IACA,WAAkC,eAAa,EAC/C,MAA2B,EAAQ,GAAG,EAAM,GAAG,EAAI,EACnD,MACA,UACA,QACA,MACA,yBACA,CAAqB,CACJ,GAEjB,YACA,CAAS,CACT,CACA,iBACA","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-sequence/esm/UnindexedFastaAdapter/UnindexedFastaAdapter.js"],"sourcesContent":["import { readConfObject } from '@jbrowse/core/configuration';\nimport { BaseSequenceAdapter } from '@jbrowse/core/data_adapters/BaseAdapter';\nimport { SimpleFeature } from '@jbrowse/core/util';\nimport { openLocation } from '@jbrowse/core/util/io';\nimport { ObservableCreate } from '@jbrowse/core/util/rxjs';\nfunction parseSmallFasta(text) {\n    return new Map(text\n        .split('>')\n        .filter(t => /\\S/.test(t))\n        .map(entryText => {\n        const [defLine, ...seqLines] = entryText.split('\\n');\n        const [id, ...description] = defLine.split(' ');\n        const sequence = seqLines.join('').replace(/\\s/g, '');\n        return [\n            id,\n            {\n                description: description.join(' '),\n                sequence,\n            },\n        ];\n    }));\n}\nexport default class UnindexedFastaAdapter extends BaseSequenceAdapter {\n    async getRefNames(opts) {\n        const { fasta } = await this.setup(opts);\n        return [...fasta.keys()];\n    }\n    async getRegions(opts) {\n        const { fasta } = await this.setup(opts);\n        return [...fasta.entries()].map(([refName, data]) => ({\n            refName,\n            start: 0,\n            end: data.sequence.length,\n        }));\n    }\n    async setupPre(_opts) {\n        const fastaLocation = this.getConf('fastaLocation');\n        const res = parseSmallFasta(await openLocation(fastaLocation, this.pluginManager).readFile('utf8'));\n        return {\n            fasta: new Map([...res.entries()].map(([refName, val]) => {\n                return [\n                    readConfObject(this.config, 'rewriteRefNames', { refName }) ||\n                        refName,\n                    val,\n                ];\n            })),\n        };\n    }\n    async getHeader() {\n        const loc = this.getConf('metadataLocation');\n        return loc.uri === '' || loc.uri === '/path/to/fa.metadata.yaml'\n            ? null\n            : openLocation(loc, this.pluginManager).readFile('utf8');\n    }\n    async setup(opts) {\n        if (!this.setupP) {\n            this.setupP = this.setupPre(opts).catch((e) => {\n                this.setupP = undefined;\n                throw e;\n            });\n        }\n        return this.setupP;\n    }\n    getFeatures(region, opts) {\n        const { refName, start, end } = region;\n        return ObservableCreate(async (observer) => {\n            const { fasta } = await this.setup(opts);\n            const entry = fasta.get(refName);\n            if (entry) {\n                observer.next(new SimpleFeature({\n                    id: `${refName}-${start}-${end}`,\n                    data: {\n                        refName,\n                        start,\n                        end,\n                        seq: entry.sequence.slice(start, end),\n                    },\n                }));\n            }\n            observer.complete();\n        });\n    }\n    freeResources() { }\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
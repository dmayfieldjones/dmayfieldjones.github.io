{"version":3,"file":"static/chunks/2296.f8104176c71a6b08.js","mappings":"4OASA,MAAkB,uBAAU,QAC5B,qBACA,UACA,mBACA,CAAK,CACL,CAAC,EACD,EAAsB,cAAQ,gBAA0B,8BAAiC,MATzF,EAUA,IAAY,0BAAsC,EAClD,EAAiB,oBAAc,WAC/B,EAA0B,oBAAc,oBACxC,wBACA,OAAY,eAAmB,CAAC,GAAgB,EAAI,2BAAiC,eAAmB,CAAC,GAAQ,EAAI,0BACrH,MACA,EACA,KAGA,oDAEA,CAAa,iBAAoB,SACjC,EACA,aAvBA,CADA,EAwBuC,aAvBvC,aAAiC,cAAkB,OAuBsB,MACzE,CACA,eACA,UAAwB,CACxB,CAAC,EACD,EAAuB,cAAQ,mBAA4B,oBAA2B,EACtF,YAAY,GAAU,IACtB,OAAY,eAAmB,QAAU,gCAAwC,sBAA+D,yBAA4E,eAAmB,QAAU,OAAQ,OAAU,GAAG,EAAI,EAAG,CAC7Q,eAAmB,IAAkB,mCAAgE,IADK,eAAmB,CAAC,GAAU,8BAEhJ,CAAC,EAWD,EAV+B,cAAQ,cAUxB,KAVqC,iBAUf,EAAC,aAVc,EAAwC,EAC5F,OAAY,eAAmB,CAAC,QAAM,EAAI,gEAAoF,CACtH,eAAmB,CAAC,GAAa,MAC7B,eAAmB,CAAC,GAAU,qDAC9B,eAAmB,IAAmB,4BAAoD,GAC9F,eAAmB,CAAC,GAAa,MAC7B,eAAmB,CAAC,GAAM,EAAI,aAC1C,GACA,CAAiB,qCAA0C,WAC3D,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/HierarchicalTrackSelectorWidget/components/dialogs/ToggleConnectionsDialog.js"],"sourcesContent":["import React from 'react';\nimport { readConfObject } from '@jbrowse/core/configuration';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { Button, Checkbox, DialogActions, DialogContent, FormControlLabel, Typography, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nfunction ellipses(slug) {\n    return slug.length > 20 ? `${slug.slice(0, 20)}...` : slug;\n}\nconst useStyles = makeStyles()(theme => ({\n    connectionContainer: {\n        width: 500,\n        margin: theme.spacing(4),\n    },\n}));\nconst ConnectionRow = observer(function ConnectionRow({ conf, session, breakConnection, }) {\n    const { connectionInstances: instances = [] } = session;\n    const name = readConfObject(conf, 'name');\n    const assemblyNames = readConfObject(conf, 'assemblyNames');\n    const found = instances.find(conn => name === conn.name);\n    return (React.createElement(FormControlLabel, { key: conf.connectionId, control: React.createElement(Checkbox, { checked: !!found, onChange: () => {\n                var _a;\n                if (found) {\n                    breakConnection(conf);\n                }\n                else {\n                    (_a = session.makeConnection) === null || _a === void 0 ? void 0 : _a.call(session, conf);\n                }\n            }, color: \"primary\" }), label: [\n            name,\n            assemblyNames.length ? `(${ellipses(assemblyNames.join(','))})` : '',\n        ]\n            .filter(f => !!f)\n            .join(' ') }));\n});\nconst ConnectionList = observer(function ConnectionsList({ session, breakConnection, }) {\n    const { classes } = useStyles();\n    return (React.createElement(\"div\", { className: classes.connectionContainer }, !session.connections.length ? (React.createElement(Typography, null, \"No connections found\")) : (session.connections.map((conf, idx) => (React.createElement(\"div\", { key: `${conf.name}_${idx}` },\n        React.createElement(ConnectionRow, { conf: conf, session: session, breakConnection: breakConnection })))))));\n});\nconst ToggleConnectionDialog = observer(function ({ session, handleClose, breakConnection, }) {\n    return (React.createElement(Dialog, { open: true, onClose: handleClose, maxWidth: \"lg\", title: \"Turn on/off connections\" },\n        React.createElement(DialogContent, null,\n            React.createElement(Typography, null, \"Use the checkbox to turn on/off connections\"),\n            React.createElement(ConnectionList, { session: session, breakConnection: breakConnection })),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { onClick: () => {\n                    handleClose();\n                }, variant: \"contained\", color: \"primary\" }, \"Close\"))));\n});\nexport default ToggleConnectionDialog;\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
{"version":3,"file":"static/chunks/7972.4dbd721a2dc63c94.js","mappings":"mLAcO,sBACP,cAAY,qGAAwG,EACpH,OACA,EAAiB,QAA6C,eAC9D,KAAsB,MAAK,IAC3B,YACA,SAAkC,mBAAa,QAC/C,8BACA,qBACA,KACA,WACA,YAAwB,IAAO,KAC/B,SAAoB,QAAW,KAC/B,OACA,gBACA,gBACA,UApBA,IAJA,IAyBA,UACA,OA3BA,GA4BA,SA5BA,GA6BA,OA7BA,GA8BA,SA9BA,GA+BA,UACA,CAAiB,EACjB,qBACA,cACA,GA9BA,EA+BA,aA/BA,EAgCA,EA/BA,YAAoB,QAAc,GA+BlC,GA9BA,aAPA,GAOA,EAPA,GAOA,EAPA,GAOA,EAPA,MAwCA,oBACA,aAzCA,GAyCA,EAzCA,GAyCA,EAzCA,GAyCA,EAzCA,MACA,EA4CA,gBA5CA,EA6CA,EA5CA,YAAoB,QAAmB,IA4CvC,EA3CA,SA2CA,EA9CA,GAGA,EAHA,GAGA,EAHA,GAGA,EAHA,IAgDA,CACA,IACA,CACA,CACA,OACA,gBACA,CACA,4FCzDO,cACP,eACA,IACA,IACA,IACA,IACA,eACA,QACA,IAEA,QACA,IAEA,QACA,IAGA,IAGA,SACA,YAEA,EACA,MAAiB,YAAM,gBAAgB,UAAwB,KAO/D,OANA,GACA,4BAA2C,IAAa,KAExD,GACA,4BAA2C,MAAqB,KAEhE,SACA,CACA,CACO,gBACP,YACA,SAAe,MAAI,qBACnB,CACO,kBAEP,MADA,MACe,QAAQ,oBACvB","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/MultiLinearVariantRenderer/makeImageData.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/multiVariantColor.js"],"sourcesContent":["import { featureSpanPx } from '@jbrowse/core/util';\nimport RBush from 'rbush';\nimport { getColorAlleleCount, getColorPhased, } from '../shared/multiVariantColor';\nimport { getFeaturesThatPassMinorAlleleFrequencyFilter } from '../util';\nconst fudgeFactor = 0.6;\nconst f2 = fudgeFactor / 2;\nfunction drawColorAlleleCount(alleles, ctx, x, y, w, h) {\n    ctx.fillStyle = getColorAlleleCount(alleles);\n    ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n}\nfunction drawPhased(alleles, ctx, x, y, w, h, HP) {\n    ctx.fillStyle = getColorPhased(alleles, HP);\n    ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n}\nexport async function makeImageData(ctx, props) {\n    const { scrollTop, minorAlleleFrequencyFilter, sources, rowHeight, features, regions, bpPerPx, renderingMode, } = props;\n    const region = regions[0];\n    const mafs = getFeaturesThatPassMinorAlleleFrequencyFilter(features.values(), minorAlleleFrequencyFilter);\n    const rbush = new RBush();\n    for (const feature of mafs) {\n        const [leftPx, rightPx] = featureSpanPx(feature, region, bpPerPx);\n        const w = Math.max(Math.round(rightPx - leftPx), 2);\n        const samp = feature.get('genotypes');\n        let y = -scrollTop;\n        const s = sources.length;\n        for (let j = 0; j < s; j++) {\n            const { name, HP } = sources[j];\n            const genotype = samp[name];\n            const x = Math.floor(leftPx);\n            const h = Math.max(rowHeight, 1);\n            if (genotype) {\n                rbush.insert({\n                    minX: x - f2,\n                    maxX: x + w + f2,\n                    minY: y - f2,\n                    maxY: y + h + f2,\n                    genotype,\n                });\n                const isPhased = genotype.includes('|');\n                if (renderingMode === 'phased') {\n                    if (isPhased) {\n                        const alleles = genotype.split('|');\n                        drawPhased(alleles, ctx, x, y, w, h, HP);\n                    }\n                    else {\n                        ctx.fillStyle = 'black';\n                        ctx.fillRect(x - f2, y - f2, w + f2, h + f2);\n                    }\n                }\n                else {\n                    const alleles = genotype.split(/[/|]/);\n                    drawColorAlleleCount(alleles, ctx, x, y, w, h);\n                }\n            }\n            y += rowHeight;\n        }\n    }\n    return {\n        rbush: rbush.toJSON(),\n    };\n}\n","import { set1 } from '@jbrowse/core/ui/colors';\nimport { colord } from '@jbrowse/core/util/colord';\nimport { colorify } from '../util';\nexport function getColorAlleleCount(alleles) {\n    const total = alleles.length;\n    let alt = 0;\n    let uncalled = 0;\n    let alt2 = 0;\n    let ref = 0;\n    for (const allele of alleles) {\n        if (allele === '1') {\n            alt++;\n        }\n        else if (allele === '0') {\n            ref++;\n        }\n        else if (allele === '.') {\n            uncalled++;\n        }\n        else {\n            alt2++;\n        }\n    }\n    if (ref === total) {\n        return `#ccc`;\n    }\n    else {\n        let a1 = colord(`hsl(200,50%,${80 - (alt / total) * 50}%)`);\n        if (alt2) {\n            a1 = a1.mix(`hsla(0,100%,20%,${alt2 / total})`);\n        }\n        if (uncalled) {\n            a1 = a1.mix(`hsla(50,50%,50%,${uncalled / total / 2})`);\n        }\n        return a1.toHex();\n    }\n}\nexport function getColorPhased(alleles, HP) {\n    const c = +alleles[HP];\n    return c ? set1[c - 1] || 'black' : '#ccc';\n}\nexport function getColorPhasedWithPhaseSet(alleles, HP, PS) {\n    const c = +alleles[HP];\n    return c ? colorify(+PS) || 'black' : '#ccc';\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0,1]}
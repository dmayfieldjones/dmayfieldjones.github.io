{"version":3,"file":"static/chunks/599.b3023ca08d853591.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/util.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/components/BulkEditPanel.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/components/HelpfulTips.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/components/RowPalettizer.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/components/SourcesDataGrid.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/sourcesGridUtils.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/components/SourcesGridHeader.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/components/SourcesGrid.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/components/SetColorDialog.js"],"sourcesContent":["export function fillRectCtx(x, y, width, height, ctx, color) {\n    if (width < 0) {\n        x += width;\n        width = -width;\n    }\n    if (height < 0) {\n        y += height;\n        height = -height;\n    }\n    if (color) {\n        ctx.fillStyle = color;\n    }\n    ctx.fillRect(x, y, width, height);\n}\nexport function randomColor(str) {\n    let sum = 0;\n    for (let i = 0; i < str.length; i++) {\n        sum += str.charCodeAt(i);\n    }\n    return colorify(sum * 10);\n}\nexport function colorify(n) {\n    return `hsl(${n % 255}, 50%, 50%)`;\n}\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { ErrorMessage } from '@jbrowse/core/ui';\nimport { Button, DialogActions, DialogContent, TextField, Typography, } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()({\n    textAreaFont: {\n        fontFamily: 'Courier New',\n    },\n});\nexport default function BulkEditPanel({ onClose, currLayout, }) {\n    const { classes } = useStyles();\n    const [val, setVal] = useState('');\n    const [error, setError] = useState();\n    return (_jsxs(_Fragment, { children: [_jsxs(DialogContent, { children: [_jsx(Typography, { children: \"Paste CSV or TSV. If a header column is present. First line is a header. If a column called \\\"name\\\" is present, it uses that to connect to IDs in the table, otherwise it uses the first column no.\" }), error ? _jsx(ErrorMessage, { error: error }) : null, _jsx(TextField, { variant: \"outlined\", multiline: true, minRows: 5, placeholder: 'name,population\\nHG00098,GBR\\nHG00101,GBR\\nHG00459,CHS\\n...', maxRows: 10, fullWidth: true, value: val, onChange: event => {\n                            setVal(event.target.value);\n                        }, slotProps: {\n                            input: {\n                                classes: {\n                                    input: classes.textAreaFont,\n                                },\n                            },\n                        } })] }), _jsxs(DialogActions, { children: [_jsx(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                            const lines = val\n                                .split('\\n')\n                                .map(f => f.trim())\n                                .filter(f => !!f);\n                            const fields = lines[0].split(/[,\\t]/gm);\n                            if (fields.includes('name')) {\n                                setError('');\n                                const oldLayout = Object.fromEntries(currLayout.map(record => [record.name, record]));\n                                const newData = Object.fromEntries(lines.slice(1).map(line => {\n                                    const cols = line.split(/[,\\t]/gm);\n                                    const newRecord = Object.fromEntries(cols.map((col, idx) => [fields[idx], col]));\n                                    return [\n                                        newRecord.name,\n                                        {\n                                            ...newRecord,\n                                            ...oldLayout[newRecord.name],\n                                        },\n                                    ];\n                                }));\n                                onClose(currLayout.map(record => ({\n                                    ...record,\n                                    ...newData[record.name],\n                                })));\n                            }\n                            else {\n                                setError(new Error('No \"name\" column found on line 1'));\n                            }\n                        }, children: \"Update rows\" }), _jsx(Button, { variant: \"contained\", color: \"primary\", onClick: () => {\n                            const lines = val\n                                .split('\\n')\n                                .map(f => f.trim())\n                                .filter(f => !!f);\n                            const fields = lines[0].split(/[,\\t]/gm);\n                            if (fields.includes('name')) {\n                                setError('');\n                                const oldLayout = Object.fromEntries(currLayout.map(record => [record.name, record]));\n                                const newData = Object.fromEntries(lines.slice(1).map(line => {\n                                    const cols = line.split(/[,\\t]/gm);\n                                    const newRecord = Object.fromEntries(cols.map((col, idx) => [fields[idx], col]));\n                                    return [\n                                        newRecord.name,\n                                        {\n                                            ...newRecord,\n                                            ...oldLayout[newRecord.name],\n                                        },\n                                    ];\n                                }));\n                                onClose(currLayout.map(record => ({\n                                    ...newData[record.name],\n                                })));\n                            }\n                            else {\n                                setError(new Error('No \"name\" column found on line 1'));\n                            }\n                        }, children: \"Replace rows\" }), _jsx(Button, { variant: \"contained\", color: \"inherit\", onClick: () => {\n                            onClose();\n                        }, children: \"Cancel\" })] })] }));\n}\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nexport default function HelpfulTips() {\n    return (_jsxs(_Fragment, { children: [\"Helpful tips\", _jsxs(\"ul\", { children: [_jsx(\"li\", { children: \"You can select rows in the table with the checkboxes\" }), _jsx(\"li\", { children: \"Multi-select is enabled with shift-click and control-click\" }), _jsx(\"li\", { children: \"The \\\"Move selected items up/down\\\" can re-arrange subtracks\" }), _jsx(\"li\", { children: \"Sorting the data grid itself can also re-arrange subtracks\" }), _jsx(\"li\", { children: \"Changes are applied when you hit Submit\" }), _jsx(\"li\", { children: \"You can click and drag the dialog box to move it on the screen\" }), _jsx(\"li\", { children: \"Columns in the table can be hidden using a vertical '...' menu on the right side of each column\" })] })] }));\n}\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { set1 } from '@jbrowse/core/ui/colors';\nimport { Button } from '@mui/material';\nimport { randomColor } from '../util';\nexport default function RowPalettizer({ setCurrLayout, currLayout, }) {\n    var _a;\n    return (_jsxs(\"div\", { children: [\"Create color palette based on...\", Object.keys((_a = currLayout[0]) !== null && _a !== void 0 ? _a : [])\n                .filter(f => f !== 'name' &&\n                f !== 'color' &&\n                f !== 'label' &&\n                f !== 'id' &&\n                f !== 'HP')\n                .map(r => (_jsx(Button, { variant: \"contained\", color: \"inherit\", onClick: () => {\n                    const map = new Map();\n                    for (const row of currLayout) {\n                        const val = map.get(row[r]);\n                        if (!val) {\n                            map.set(row[r], 1);\n                        }\n                        else {\n                            map.set(row[r], val + 1);\n                        }\n                    }\n                    const ret = Object.fromEntries([...map.entries()]\n                        .sort((a, b) => a[1] - b[1])\n                        .map((r, idx) => [r[0], set1[idx] || randomColor(r[0])]));\n                    setCurrLayout(currLayout.map(row => ({\n                        ...row,\n                        color: ret[row[r]],\n                    })));\n                }, children: r }, r))), _jsx(Button, { onClick: () => {\n                    setCurrLayout(currLayout.map(row => ({\n                        ...row,\n                        color: undefined,\n                    })));\n                }, children: \"Clear colors\" })] }));\n}\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { SanitizedHTML } from '@jbrowse/core/ui';\nimport ColorPicker from '@jbrowse/core/ui/ColorPicker';\nimport { getStr, measureGridWidth } from '@jbrowse/core/util';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()({\n    cell: {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n    },\n});\nexport default function SourcesDataGrid({ rows, onChange, setSelected, }) {\n    const { classes } = useStyles();\n    const [currSort, setCurrSort] = useState({\n        idx: 0,\n        field: null,\n    });\n    if (rows.length) {\n        const { id: _id, name: _name, label: _label, color: _color, baseUri: _baseUri, HP: _HP, ...rest } = rows[0];\n        return (_jsx(\"div\", { style: { height: 400, width: '100%' }, children: _jsx(DataGrid, { checkboxSelection: true, disableRowSelectionOnClick: true, onRowSelectionModelChange: arg => {\n                    setSelected(arg);\n                }, rows: rows, rowHeight: 25, columnHeaderHeight: 33, columns: [\n                    {\n                        field: 'color',\n                        headerName: 'Color',\n                        renderCell: params => {\n                            const { value, id } = params;\n                            return (_jsx(ColorPicker, { color: value || 'blue', onChange: c => {\n                                    const elt = rows.find(f => f.name === id);\n                                    if (elt) {\n                                        elt.color = c;\n                                    }\n                                    onChange([...rows]);\n                                } }));\n                        },\n                    },\n                    {\n                        field: 'label',\n                        headerName: 'Name',\n                        width: measureGridWidth(rows.map(r => r.label)),\n                    },\n                    ...Object.keys(rest).map(val => ({\n                        field: val,\n                        renderCell: ({ value }) => (_jsx(\"div\", { className: classes.cell, children: _jsx(SanitizedHTML, { html: getStr(value) }) })),\n                        width: measureGridWidth(rows.map(r => `${r[val]}`)),\n                    })),\n                ], sortModel: [], onSortModelChange: args => {\n                    const sort = args[0];\n                    const idx = (currSort.idx + 1) % 2;\n                    const field = sort.field || currSort.field;\n                    setCurrSort({ idx, field });\n                    onChange(field\n                        ? [...rows].sort((a, b) => {\n                            const aa = getStr(a[field]);\n                            const bb = getStr(b[field]);\n                            return idx === 1\n                                ? aa.localeCompare(bb)\n                                : bb.localeCompare(aa);\n                        })\n                        : rows);\n                } }) }));\n    }\n    else {\n        return _jsx(\"div\", { children: \"No rows, check sample metadata configuration\" });\n    }\n}\n","export function moveUp(arr, sel, by = 1) {\n    const idxs = sel\n        .map(l => arr.findIndex(v => v.name === l))\n        .sort((a, b) => a - b);\n    let lastIdx = 0;\n    for (const old of idxs) {\n        const idx = Math.max(lastIdx, old - by);\n        if (idx >= lastIdx) {\n            arr.splice(idx, 0, arr.splice(old, 1)[0]);\n        }\n        lastIdx = lastIdx + 1;\n    }\n    return arr;\n}\nexport function moveDown(arr, sel, by = 1) {\n    const idxs = sel\n        .map(l => arr.findIndex(v => v.name === l))\n        .sort((a, b) => b - a);\n    let lastIdx = arr.length - 1;\n    for (const old of idxs) {\n        const idx = Math.min(lastIdx, old + by);\n        if (idx <= lastIdx) {\n            arr.splice(idx, 0, arr.splice(old, 1)[0]);\n        }\n        lastIdx = lastIdx - 1;\n    }\n    return arr;\n}\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { ColorPopover } from '@jbrowse/core/ui/ColorPicker';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport KeyboardDoubleArrowDownIcon from '@mui/icons-material/KeyboardDoubleArrowDown';\nimport KeyboardDoubleArrowUpIcon from '@mui/icons-material/KeyboardDoubleArrowUp';\nimport { Button } from '@mui/material';\nimport { moveDown, moveUp } from '../sourcesGridUtils';\nexport default function SourcesGridHeader({ selected, onChange, rows, showTips, }) {\n    const [anchorEl, setAnchorEl] = useState(null);\n    const [widgetColor, setWidgetColor] = useState('blue');\n    return (_jsxs(_Fragment, { children: [_jsx(Button, { disabled: !selected.length, onClick: event => {\n                    setAnchorEl(event.currentTarget);\n                }, children: \"Change color of selected items\" }), _jsxs(Button, { onClick: () => {\n                    onChange(moveUp([...rows], selected));\n                }, disabled: !selected.length, children: [_jsx(KeyboardArrowUpIcon, {}), showTips ? 'Move selected items up' : null] }), _jsxs(Button, { onClick: () => {\n                    onChange(moveDown([...rows], selected));\n                }, disabled: !selected.length, children: [_jsx(KeyboardArrowDownIcon, {}), showTips ? 'Move selected items down' : null] }), _jsxs(Button, { onClick: () => {\n                    onChange(moveUp([...rows], selected, rows.length));\n                }, disabled: !selected.length, children: [_jsx(KeyboardDoubleArrowUpIcon, {}), showTips ? 'Move selected items to top' : null] }), _jsxs(Button, { onClick: () => {\n                    onChange(moveDown([...rows], selected, rows.length));\n                }, disabled: !selected.length, children: [_jsx(KeyboardDoubleArrowDownIcon, {}), showTips ? 'Move selected items to bottom' : null] }), _jsx(ColorPopover, { anchorEl: anchorEl, color: widgetColor, onChange: c => {\n                    setWidgetColor(c);\n                    for (const id of selected) {\n                        const elt = rows.find(f => f.name === id);\n                        if (elt) {\n                            elt.color = c;\n                        }\n                    }\n                    onChange([...rows]);\n                }, onClose: () => {\n                    setAnchorEl(null);\n                } })] }));\n}\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport SourcesDataGrid from './SourcesDataGrid';\nimport SourcesGridHeader from './SourcesGridHeader';\nfunction SourcesGrid({ rows, onChange, showTips, }) {\n    const [selected, setSelected] = useState([]);\n    return (_jsxs(\"div\", { children: [_jsx(SourcesGridHeader, { selected: selected, rows: rows, showTips: showTips, onChange: onChange }), _jsx(SourcesDataGrid, { rows: rows, onChange: onChange, setSelected: setSelected })] }));\n}\nexport default SourcesGrid;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport DraggableDialog from '@jbrowse/core/ui/DraggableDialog';\nimport { useLocalStorage } from '@jbrowse/core/util';\nimport { Button, DialogActions, DialogContent } from '@mui/material';\nimport { makeStyles } from 'tss-react/mui';\nimport BulkEditPanel from './BulkEditPanel';\nimport HelpfulTips from './HelpfulTips';\nimport RowPalettizer from './RowPalettizer';\nimport SourcesGrid from './SourcesGrid';\nconst useStyles = makeStyles()({\n    content: {\n        minWidth: 800,\n    },\n    fr: {\n        float: 'right',\n        display: 'flex',\n        gap: 8,\n    },\n    textAreaFont: {\n        fontFamily: 'Courier New',\n    },\n});\nexport default function SetColorDialog({ model, handleClose, }) {\n    const { classes } = useStyles();\n    const { sources } = model;\n    const [showBulkEditor, setShowBulkEditor] = useState(false);\n    const [currLayout, setCurrLayout] = useState(sources || []);\n    const [showTips, setShowTips] = useLocalStorage('multivariant-showTips', false);\n    return (_jsx(DraggableDialog, { open: true, onClose: handleClose, maxWidth: \"xl\", title: \"Multi-variant color/arrangement editor\", children: showBulkEditor ? (_jsx(BulkEditPanel, { currLayout: currLayout, onClose: arg => {\n                if (arg) {\n                    setCurrLayout(arg);\n                }\n                setShowBulkEditor(false);\n            } })) : (_jsxs(_Fragment, { children: [_jsxs(DialogContent, { className: classes.content, children: [_jsxs(\"div\", { className: classes.fr, children: [_jsx(Button, { variant: \"contained\", onClick: () => {\n                                        setShowTips(!showTips);\n                                    }, children: showTips ? 'Hide tips' : 'Show tips' }), _jsx(Button, { color: \"secondary\", variant: \"contained\", onClick: () => {\n                                        setShowBulkEditor(!showBulkEditor);\n                                    }, children: \"Show Bulk row editor\" })] }), showTips ? _jsx(HelpfulTips, {}) : null, _jsx(\"br\", {}), _jsx(RowPalettizer, { currLayout: currLayout, setCurrLayout: setCurrLayout }), _jsx(SourcesGrid, { rows: currLayout, onChange: setCurrLayout, showTips: showTips })] }), _jsxs(DialogActions, { children: [_jsx(Button, { variant: \"contained\", type: \"submit\", color: \"inherit\", onClick: () => {\n                                model.clearLayout();\n                                setCurrLayout(model.sources || []);\n                            }, children: \"Clear custom settings\" }), _jsx(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                                handleClose();\n                                setCurrLayout([...(model.sources || [])]);\n                            }, children: \"Cancel\" }), _jsx(Button, { variant: \"contained\", color: \"primary\", type: \"submit\", onClick: () => {\n                                model.setLayout(currLayout);\n                                handleClose();\n                            }, children: \"Submit\" })] })] })) }));\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2,3,4,5,6,7,8]}
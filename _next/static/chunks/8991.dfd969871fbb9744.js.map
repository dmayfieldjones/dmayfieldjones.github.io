{"version":3,"file":"static/chunks/8991.dfd969871fbb9744.js","mappings":"8LAIA,MAAuC,UAAI,KAAO,+BAA0C,EAC5F,EAAwC,UAAI,KAAO,+BAA2C,EAC9F,uBAAyB,UAAoB,EAC7C,MAAoB,gBAAU,IAC9B,OAAY,eAAmB,YACvB,eAAmB,CAAC,GAAU,uDAC9B,eAAmB,wBAAmD,eAAmB,OAAS,OAAQ,EAAU,GAAG,EAAM,EAAG,CACxI,EACA,IACY,eAAmB,CAAC,GAAI,EAAI,qBACxC,MACA,mBACA,SAA4B,GAAO,EACnC,IACA,KACA,0DAGA,wEAEA,CACA,SACA,iBACA,YAA0C,EAAE,EAC5C,CACA,EAAmB,aACnB,CACA,YAA0C,+BAA6B,EACvE,QACA,MAAoB,gBAAU,IAC9B,MAA8B,eAAa,IAC3C,0GACA,OAAY,eAAmB,YACvB,eAAmB,CAAC,GAAU,2BAC9B,eAAmB,oBAA0C,eAAmB,OAAS,sBAAgC,CACjI,GAAe,UAAgB,GAAG,SAAe,KAAK,EAAU,EAChE,IACY,eAAmB,CAAC,GAAI,EAAI,qBACxC,mBACA,kBACA,EACA,CACA,cACA,UACA,UACA,gBAA6C,KAAS,GAAG,EAAa,iCACtE,YACA,cACA,CAAyB,CACzB,CACA,EAAmB,iBACnB,IACY,eAAmB,CAAC,GAAI,EAAI,qBACxC,mBACA,kBACA,EACA,CACA,cACA,UACA,UACA,gBAA6C,KAAS,GAAG,EAAa,kCACtE,YACA,cACA,CAAyB,CACzB,CACA,EAAmB,oBACnB,CACe,cACf,UAAY,0BAA6B,EACzC,EAAoB,gBAAU,IAC9B,eAAY,GAAgB,CAAE,WAAM,IACpC,KACA,IACA,wCACA,CACA,SACA,CACA,OAAY,eAAmB,CAAC,IAAQ,CAAI,uBAA8B,CAClE,eAAmB,IAAkB,qBAAsC,EACnF,EAAkC,eAAmB,IAAmC,MAFhD,EAEgD,uBAAwD,OAChJ","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/VariantFeatureWidget/LaunchBreakendPanel.js"],"sourcesContent":["import React, { lazy } from 'react';\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard';\nimport { SimpleFeature, getEnv, getSession } from '@jbrowse/core/util';\nimport { Link, Typography } from '@mui/material';\nconst BreakendMultiLevelOptionDialog = lazy(() => import('./BreakendMultiLevelOptionDialog'));\nconst BreakendSingleLevelOptionDialog = lazy(() => import('./BreakendSingleLevelOptionDialog'));\nfunction LocStringList({ locStrings, model, }) {\n    const session = getSession(model);\n    return (React.createElement(\"div\", null,\n        React.createElement(Typography, null, \"Navigate to breakend endpoint in linear view:\"),\n        React.createElement(\"ul\", null, locStrings.map((locString, index) => (React.createElement(\"li\", { key: `${locString}-${index}` },\n            locString,\n            ' ',\n            React.createElement(Link, { href: \"#\", onClick: event => {\n                    var _a;\n                    event.preventDefault();\n                    const { view } = model;\n                    try {\n                        if (view) {\n                            (_a = view.navToLocString) === null || _a === void 0 ? void 0 : _a.call(view, locString);\n                        }\n                        else {\n                            throw new Error('No view associated with this feature detail panel anymore');\n                        }\n                    }\n                    catch (e) {\n                        console.error(e);\n                        session.notify(`${e}`);\n                    }\n                } }, \"(LGV)\")))))));\n}\nfunction LaunchBreakpointSplitViewPanel({ locStrings, model, feature, }) {\n    var _a, _b;\n    const session = getSession(model);\n    const simpleFeature = new SimpleFeature(feature);\n    const assemblyName = (_b = (_a = model.view) === null || _a === void 0 ? void 0 : _a.displayedRegions[0]) === null || _b === void 0 ? void 0 : _b.assemblyName;\n    return (React.createElement(\"div\", null,\n        React.createElement(Typography, null, \"Launch split view\"),\n        React.createElement(\"ul\", null, locStrings.map(locString => (React.createElement(\"li\", { key: JSON.stringify(locString) },\n            `${feature.refName}:${feature.start} // ${locString}`,\n            ' ',\n            React.createElement(Link, { href: \"#\", onClick: event => {\n                    event.preventDefault();\n                    session.queueDialog(handleClose => [\n                        BreakendMultiLevelOptionDialog,\n                        {\n                            handleClose,\n                            session,\n                            feature: simpleFeature,\n                            stableViewId: `${model.id}_${assemblyName}_breakpointsplitview_multilevel`,\n                            view: model.view,\n                            assemblyName,\n                        },\n                    ]);\n                } }, \"(top/bottom)\"),\n            ' ',\n            React.createElement(Link, { href: \"#\", onClick: event => {\n                    event.preventDefault();\n                    session.queueDialog(handleClose => [\n                        BreakendSingleLevelOptionDialog,\n                        {\n                            handleClose,\n                            session,\n                            feature: simpleFeature,\n                            stableViewId: `${model.id}_${assemblyName}_breakpointsplitview_singlelevel`,\n                            view: model.view,\n                            assemblyName,\n                        },\n                    ]);\n                } }, \"(single row)\")))))));\n}\nexport default function BreakendPanel(props) {\n    const { model, locStrings, feature } = props;\n    const session = getSession(model);\n    const { pluginManager } = getEnv(session);\n    let hasBreakpointSplitView = false;\n    try {\n        hasBreakpointSplitView = !!pluginManager.getViewType('BreakpointSplitView');\n    }\n    catch (e) {\n    }\n    return (React.createElement(BaseCard, { ...props, title: \"Breakends\" },\n        React.createElement(LocStringList, { model: model, locStrings: locStrings }),\n        hasBreakpointSplitView ? (React.createElement(LaunchBreakpointSplitViewPanel, { model: model, locStrings: locStrings, feature: feature })) : null));\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
{"version":3,"file":"static/chunks/5906.b06f9597b39dd0e1.js","mappings":"mLAKO,cACH,QAAa,aACjB,MAAqB,uBAAiB,GACtC,iBAGA,+BACA,CAAK,EAAI,UAAa,EAClB,QAAa,aACjB,eAAgB,GAAa,CAAE,eAAU,IACzC,EAAqB,uBAAiB,IACtC,mBACA,OAEA,IAAgB,uDAAmD,EACnE,SAAgB,GAAU,EAC1B,2CACA,QAAoB,4BAA6B,CACjD,wCACA,eACA,SACA,CACA,QACA,QACA,UACA,cACA,CAAqB,CACrB,CACA,gBACA,oBACA,UAA2B,qBAAe,IAC1C,SAA0B,wBAAkB,OAC5C,YACA,mBACwB,aAAO,KAC/B,eAEA,CAAiB,CACjB,sBACa,CACb,CACY,aAAO,MACnB,wBACA,mBAEA,CAAK,EAAI,UAAa,EAClB,QAAa,aACjB,mBACA,OAEA,kBAAgB,GAAgB,EAChC,cAAgB,GAAe,CAAE,sBAAiB,IAClD,QAA2B,OAAsB,EACjD,QACA,gBACA,QACA,CAAS,EACG,aAAO,MACnB,gCACA,4BAEA,CAAK,EAAI,UAAa,CACtB","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-alignments/esm/LinearPileupDisplay/doAfterAttach.js"],"sourcesContent":["import { getContainingTrack, getContainingView, getSession, } from '@jbrowse/core/util';\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks';\nimport { isAlive } from 'mobx-state-tree';\nimport { getUniqueModifications } from '../shared/getUniqueModifications';\nimport { createAutorun } from '../util';\nexport function doAfterAttach(model) {\n    createAutorun(model, async () => {\n        const view = getContainingView(model);\n        if (!model.autorunReady) {\n            return;\n        }\n        model.setCurrSortBpPerPx(view.bpPerPx);\n    }, { delay: 1000 });\n    createAutorun(model, async () => {\n        const { rpcManager } = getSession(model);\n        const view = getContainingView(model);\n        if (!model.autorunReady) {\n            return;\n        }\n        const { sortedBy, adapterConfig, rendererType, sortReady } = model;\n        const { bpPerPx } = view;\n        if (sortedBy && (!sortReady || model.currSortBpPerPx === view.bpPerPx)) {\n            const { pos, refName, assemblyName } = sortedBy;\n            await model.rendererType.renderInClient(rpcManager, {\n                assemblyName,\n                regions: [\n                    {\n                        start: pos,\n                        end: pos + 1,\n                        refName,\n                        assemblyName,\n                    },\n                ],\n                adapterConfig,\n                rendererType: rendererType.name,\n                sessionId: getRpcSessionId(model),\n                layoutId: getContainingTrack(model).id,\n                timeout: 1000000,\n                statusCallback: (arg) => {\n                    if (isAlive(model)) {\n                        model.setMessage(arg);\n                    }\n                },\n                ...model.renderPropsPre(),\n            });\n        }\n        if (isAlive(model)) {\n            model.setCurrSortBpPerPx(bpPerPx);\n            model.setSortReady(true);\n        }\n    }, { delay: 1000 });\n    createAutorun(model, async () => {\n        if (!model.autorunReady) {\n            return;\n        }\n        const { adapterConfig } = model;\n        const { staticBlocks } = getContainingView(model);\n        const vals = await getUniqueModifications({\n            model,\n            adapterConfig,\n            blocks: staticBlocks,\n        });\n        if (isAlive(model)) {\n            model.updateVisibleModifications(vals);\n            model.setModificationsReady(true);\n        }\n    }, { delay: 1000 });\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
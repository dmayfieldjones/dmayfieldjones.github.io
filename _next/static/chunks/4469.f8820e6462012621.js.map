{"version":3,"file":"static/chunks/4469.f8820e6462012621.js","mappings":"kQAIA,MAA4B,cAAQ,0BAAa,oBAAiC,EAClF,+BAA0E,GAAmB,CAC7F,OAAY,eAAmB,CAAC,UAAQ,EAAI,SAAU,eAAmB,CAAC,iBAAe,OAAS,CAC1F,eAAmB,IAA0B,OAAS,SAAe,WAAoB,EACjG,CAAC,4BCJD,MAAeA,CAAAA,EAAAA,EAAAA,CAAAA,CAAaA,CAAC,CAAaC,EAAAA,EAAAA,GAAAA,CAAIA,CAAC,CAAP,MAAe,CACrDC,EAAG,+HACL,GAAI,YAAY,EAAC,oCCFjB,MAA6B,cAAQ,WAAiC,6DAA2D,EACjI,WAMA,MALI,eAAS,MACb,GACA,IAEA,CAAK,UACO,eAAmB,SAAW,mBAAqB,GAAoB,eAAmB,CAAC,GAAS,EAAI,6DAA+F,eAAmB,CAAC,UAAc,MACrP,cACA,MAAkC,eAAmB,CAAC,GAAU,EAAI,qDAAwE,CAC5H,eAAmB,CAAC,EAAa,sDACjD,qCACA,CAAS,oBAAuB,UAAkC,eAAmB,CAAC,GAAQ,EAAI,wBAA4B,+BAC9H,CAAC,ECTD,EAAkB,gBAAU,QAC5B,MACA,sBACA,CAAK,CACL,SACA,6CACK,CACL,QACA,uBACA,wBACA,CAAK,CACL,kBACA,yBACA,CAAK,CACL,CAAC,EACD,sDA2CA,EA1C4B,cAAQ,iBAAa,EAAO,EACxD,SAAgD,OAyCd,EAAC,IAzCa,CAAQ,GACxD,MAA4C,cAAQ,GACpD,MAAwC,cAAQ,IAChD,SAAY,GAAU,IACtB,EAAoB,gBAAU,IAC9B,eAAY,GAAgB,CAAE,WAAM,IACpC,EAAwB,aAAO,wDAA4G,EAAc,CAAE,YAAM,cACjK,OAAY,eAAmB,QAAU,iBAAyB,CAC1D,eAAmB,CAAC,GAAO,EAAI,wDAA6E,UAAsB,eAAmB,CAAC,GAAI,EAAI,MAAY,CACtK,eAAmB,CAAC,GAAS,SAC7B,eAAmB,CAAC,GAAW,MAC3C,MAAoC,eAAmB,CAAC,EAAoB,CAAI,iBDlB7C,EAAC,GCkB4C,MAAJ,iBAAI,0CAChF,KACA,GAGA,KAA2C,OAAO,GAAG,WAAW,EAChE,EAAuB,OAAsC,eAAmB,CAAC,EAAmB,CAAI,gBHjCtE,CGiCsE,CHjCrE,KGiCqE,IAAJ,MAAI,EAAsE,OAC9J,eAAmB,QAAU,6BAAqC,CAC9D,eAAmB,CAAC,GAAM,EAAI,4BAClD,MACA,CAAyB,oBAA6B,SAClC,eAAmB,CAAC,GAAM,EAAI,qBAClD,2DACA,mBACA,MAAmD,OAAwB,KAC3E,6BACA,mBACA,MAEA,mCAEoC,+BAAyB,KAC7D,eAEA,MAEA,MAEA,CAAyB,sDAAiE,uCAC1F,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddConnectionWidget/components/ConfigureConnection.js","webpack://_N_E/./node_modules/@mui/icons-material/esm/OpenInNew.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddConnectionWidget/components/ConnectionTypeSelect.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/AddConnectionWidget/components/AddConnectionWidget.js"],"sourcesContent":["import React, { Suspense } from 'react';\nimport { LoadingEllipses } from '@jbrowse/core/ui';\nimport { ConfigurationEditor } from '@jbrowse/plugin-config';\nimport { observer } from 'mobx-react';\nconst ConfigureConnection = observer(function ({ connectionType, model, session, }) {\n    const ConfigEditorComponent = connectionType.configEditorComponent || ConfigurationEditor;\n    return (React.createElement(Suspense, { fallback: React.createElement(LoadingEllipses, null) },\n        React.createElement(ConfigEditorComponent, { model: { target: model }, session: session })));\n});\nexport default ConfigureConnection;\n","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3z\"\n}), 'OpenInNew');","import React, { useEffect } from 'react';\nimport OpenInNewIcon from '@mui/icons-material/OpenInNew';\nimport { IconButton, MenuItem, TextField } from '@mui/material';\nimport { observer } from 'mobx-react';\nconst ConnectionTypeSelect = observer(function ConnectionTypeSelect({ connectionTypeChoices, connectionType, setConnectionType, }) {\n    const firstChoice = connectionTypeChoices[0];\n    useEffect(() => {\n        if (!connectionType) {\n            setConnectionType(firstChoice);\n        }\n    }, [connectionType, firstChoice, setConnectionType]);\n    return (React.createElement(\"form\", { autoComplete: \"off\" }, connectionType ? (React.createElement(TextField, { value: connectionType.name, label: \"connectionType\", helperText: connectionType.description ? (React.createElement(React.Fragment, null,\n            connectionType.description,\n            connectionType.url ? (React.createElement(IconButton, { href: connectionType.url, rel: \"noopener noreferrer\", target: \"_blank\" },\n                React.createElement(OpenInNewIcon, null))) : null)) : null, select: true, fullWidth: true, onChange: event => {\n            setConnectionType(connectionTypeChoices.find(c => c.name === event.target.value));\n        }, variant: \"outlined\" }, connectionTypeChoices.map(c => (React.createElement(MenuItem, { key: c.name, value: c.name }, c.displayName || c.name))))) : null));\n});\nexport default ConnectionTypeSelect;\n","import React, { useMemo, useState } from 'react';\nimport { getEnv, getSession, isSessionModelWithWidgets, } from '@jbrowse/core/util';\nimport { isSessionWithConnections } from '@jbrowse/product-core';\nimport { Button, Step, StepContent, StepLabel, Stepper } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nimport ConfigureConnection from './ConfigureConnection';\nimport ConnectionTypeSelect from './ConnectionTypeSelect';\nconst useStyles = makeStyles()(theme => ({\n    root: {\n        marginTop: theme.spacing(1),\n    },\n    stepper: {\n        backgroundColor: theme.palette.background.default,\n    },\n    button: {\n        marginTop: theme.spacing(1),\n        marginRight: theme.spacing(1),\n    },\n    actionsContainer: {\n        marginBottom: theme.spacing(2),\n    },\n}));\nconst steps = ['Select a Connection Type', 'Configure Connection'];\nconst AddConnectionWidget = observer(function ({ model }) {\n    const [connectionType, setConnectionType] = useState();\n    const [connectionId, setConnectionId] = useState();\n    const [activeStep, setActiveStep] = useState(0);\n    const { classes } = useStyles();\n    const session = getSession(model);\n    const { pluginManager } = getEnv(session);\n    const configModel = useMemo(() => connectionType === null || connectionType === void 0 ? void 0 : connectionType.configSchema.create({ connectionId }, getEnv(model)), [connectionId, connectionType, model]);\n    return (React.createElement(\"div\", { className: classes.root },\n        React.createElement(Stepper, { className: classes.stepper, activeStep: activeStep, orientation: \"vertical\" }, steps.map(label => (React.createElement(Step, { key: label },\n            React.createElement(StepLabel, null, label),\n            React.createElement(StepContent, null,\n                activeStep === 0 ? (React.createElement(ConnectionTypeSelect, { connectionTypeChoices: pluginManager.getConnectionElements(), connectionType: connectionType, setConnectionType: c => {\n                        setConnectionType(c);\n                        if (!c) {\n                            return;\n                        }\n                        setConnectionId(`${c.name}-${Date.now()}`);\n                    } })) : connectionType && configModel ? (React.createElement(ConfigureConnection, { connectionType: connectionType, model: configModel, session: session })) : null,\n                React.createElement(\"div\", { className: classes.actionsContainer },\n                    React.createElement(Button, { disabled: activeStep === 0, onClick: () => {\n                            setActiveStep(activeStep - 1);\n                        }, className: classes.button }, \"Back\"),\n                    React.createElement(Button, { disabled: !((activeStep === 0 && connectionType) ||\n                            (activeStep === 1 && configModel)), variant: \"contained\", color: \"primary\", onClick: () => {\n                            if (activeStep === steps.length - 1) {\n                                if (configModel && isSessionWithConnections(session)) {\n                                    const conf = session.addConnectionConf(configModel);\n                                    session.makeConnection(conf);\n                                }\n                                else {\n                                    session.notify('No config model to add');\n                                }\n                                if (isSessionModelWithWidgets(session)) {\n                                    session.hideWidget(model);\n                                }\n                            }\n                            else {\n                                setActiveStep(activeStep + 1);\n                            }\n                        }, className: classes.button, \"data-testid\": \"addConnectionNext\" }, activeStep === steps.length - 1 ? 'Connect' : 'Next')))))))));\n});\nexport default AddConnectionWidget;\n"],"names":["createSvgIcon","_jsx","d"],"sourceRoot":"","ignoreList":[0,1,2,3]}
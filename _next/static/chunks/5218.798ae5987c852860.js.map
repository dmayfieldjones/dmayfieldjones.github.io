{"version":3,"file":"static/chunks/5218.798ae5987c852860.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/components/ClusterDialog/ClusterDialogAuto.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/components/ClusterDialog/ClusterDialogManual.js","webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/components/ClusterDialog/ClusterDialog.js"],"sourcesContent":["import { jsxs as _jsxs, jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { ErrorMessage } from '@jbrowse/core/ui';\nimport { getContainingView, getSession, isAbortException, } from '@jbrowse/core/util';\nimport { createStopToken, stopStopToken } from '@jbrowse/core/util/stopToken';\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks';\nimport { Button, DialogActions, DialogContent } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { isAlive } from 'mobx-state-tree';\nconst ClusterDialogAuto = observer(function ({ model, children, handleClose, }) {\n    const [progress, setProgress] = useState('');\n    const [error, setError] = useState();\n    const [stopToken, setStopToken] = useState('');\n    return (_jsxs(_Fragment, { children: [_jsxs(DialogContent, { children: [children, _jsxs(\"div\", { children: [progress ? (_jsxs(\"div\", { style: { padding: 50 }, children: [_jsxs(\"span\", { style: { width: 400 }, children: [\"Progress: \", progress] }), _jsx(Button, { onClick: () => {\n                                            stopStopToken(stopToken);\n                                        }, children: \"Stop\" })] })) : null, error ? _jsx(ErrorMessage, { error: error }) : null] })] }), _jsxs(DialogActions, { children: [_jsx(Button, { variant: \"contained\", onClick: async () => {\n                            try {\n                                setError(undefined);\n                                const view = getContainingView(model);\n                                if (!view.initialized) {\n                                    return;\n                                }\n                                const { rpcManager } = getSession(model);\n                                const { sourcesWithoutLayout, minorAlleleFrequencyFilter, adapterConfig, } = model;\n                                if (sourcesWithoutLayout) {\n                                    const sessionId = getRpcSessionId(model);\n                                    const stopToken = createStopToken();\n                                    setStopToken(stopToken);\n                                    const ret = (await rpcManager.call(sessionId, 'MultiVariantClusterGenotypeMatrix', {\n                                        regions: view.dynamicBlocks.contentBlocks,\n                                        sources: sourcesWithoutLayout,\n                                        minorAlleleFrequencyFilter,\n                                        sessionId,\n                                        adapterConfig,\n                                        stopToken,\n                                        statusCallback: (arg) => {\n                                            setProgress(arg);\n                                        },\n                                    }));\n                                    model.setLayout(ret.order.map(idx => {\n                                        const ret = sourcesWithoutLayout[idx];\n                                        if (!ret) {\n                                            throw new Error(`out of bounds at ${idx}`);\n                                        }\n                                        return ret;\n                                    }));\n                                }\n                                handleClose();\n                            }\n                            catch (e) {\n                                if (!isAbortException(e) && isAlive(model)) {\n                                    console.error(e);\n                                    setError(e);\n                                }\n                            }\n                            finally {\n                                setProgress('');\n                                setStopToken('');\n                            }\n                        }, children: \"Run clustering\" }), _jsx(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                            handleClose();\n                            if (stopToken) {\n                                stopStopToken(stopToken);\n                            }\n                        }, children: \"Cancel\" })] })] }));\n});\nexport default ClusterDialogAuto;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui';\nimport { getContainingView, getSession, isAbortException, useLocalStorage, } from '@jbrowse/core/util';\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks';\nimport { Button, DialogActions, DialogContent, FormControlLabel, Paper, Radio, RadioGroup, TextField, Typography, } from '@mui/material';\nimport copy from 'copy-to-clipboard';\nimport { saveAs } from 'file-saver';\nimport { observer } from 'mobx-react';\nimport { isAlive } from 'mobx-state-tree';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    textAreaFont: {\n        fontFamily: 'Courier New',\n    },\n    mgap: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing(4),\n    },\n}));\nconst ClusterDialogManuals = observer(function ({ model, handleClose, children, }) {\n    const { classes } = useStyles();\n    const [paste, setPaste] = useState('');\n    const [ret, setRet] = useState();\n    const [error, setError] = useState();\n    const [loading, setLoading] = useState(false);\n    const [showAdvanced, setShowAdvanced] = useState(false);\n    const [clusterMethod, setClusterMethod] = useLocalStorage('cluster-clusterMethod', 'single');\n    useEffect(() => {\n        ;\n        (async () => {\n            try {\n                setError(undefined);\n                setRet(undefined);\n                setLoading(true);\n                const view = getContainingView(model);\n                if (!view.initialized) {\n                    return;\n                }\n                const { rpcManager } = getSession(model);\n                const { sourcesWithoutLayout, minorAlleleFrequencyFilter, adapterConfig, } = model;\n                const sessionId = getRpcSessionId(model);\n                const ret = (await rpcManager.call(sessionId, 'MultiVariantGetGenotypeMatrix', {\n                    regions: view.dynamicBlocks.contentBlocks,\n                    sources: sourcesWithoutLayout,\n                    minorAlleleFrequencyFilter,\n                    sessionId,\n                    adapterConfig,\n                }));\n                setRet(ret);\n            }\n            catch (e) {\n                if (!isAbortException(e) && isAlive(model)) {\n                    console.error(e);\n                    setError(e);\n                }\n            }\n            finally {\n                setLoading(false);\n            }\n        })();\n    }, [model]);\n    const results = ret\n        ? `inputMatrix<-matrix(c(${Object.values(ret)\n            .map(val => val.join(','))\n            .join(',\\n')}\n),nrow=${Object.values(ret).length},byrow=TRUE)\nrownames(inputMatrix)<-c(${Object.keys(ret)\n            .map(key => `'${key}'`)\n            .join(',')})\nresultClusters<-hclust(dist(inputMatrix), method='${clusterMethod}')\ncat(resultClusters$order,sep='\\\\n')`\n        : undefined;\n    const resultsTsv = ret\n        ? Object.entries(ret)\n            .map(([key, val]) => [key, ...val].join('\\t'))\n            .join('\\n')\n        : undefined;\n    return (_jsxs(_Fragment, { children: [_jsxs(DialogContent, { children: [children, _jsxs(Paper, { style: { padding: 16 }, children: [_jsxs(\"div\", { style: {\n                                    display: 'flex',\n                                    gap: '8px',\n                                    flexWrap: 'wrap',\n                                    marginBottom: '16px',\n                                }, children: [_jsx(Button, { variant: \"contained\", onClick: () => {\n                                            saveAs(new Blob([results || ''], {\n                                                type: 'text/plain;charset=utf-8',\n                                            }), 'cluster.R');\n                                        }, children: \"Download Rscript\" }), ' ', \"or\", ' ', _jsx(Button, { variant: \"contained\", onClick: () => {\n                                            copy(results || '');\n                                        }, children: \"Copy Rscript to clipboard\" }), ' ', \"or\", ' ', _jsx(Button, { variant: \"contained\", onClick: () => {\n                                            saveAs(new Blob([resultsTsv || ''], {\n                                                type: 'text/plain;charset=utf-8',\n                                            }), 'genotypes.tsv');\n                                        }, children: \"Download TSV\" }), _jsxs(\"div\", { children: [_jsx(Button, { variant: \"contained\", onClick: () => {\n                                                    setShowAdvanced(!showAdvanced);\n                                                }, children: showAdvanced\n                                                    ? 'Hide advanced options'\n                                                    : 'Show advanced options' }), showAdvanced ? (_jsxs(\"div\", { children: [_jsx(Typography, { variant: \"h6\", children: \"Advanced options\" }), _jsx(RadioGroup, { children: Object.entries({\n                                                            single: 'Single',\n                                                            complete: 'Complete',\n                                                        }).map(([key, val]) => (_jsx(FormControlLabel, { control: _jsx(Radio, { checked: clusterMethod === key, onChange: () => {\n                                                                    setClusterMethod(key);\n                                                                } }), label: val }, key))) })] })) : null] }), results ? (_jsx(\"div\", {})) : loading ? (_jsx(LoadingEllipses, { variant: \"h6\", title: \"Generating genotype matrix\" })) : error ? (_jsx(ErrorMessage, { error: error })) : null] }), _jsxs(\"div\", { children: [_jsx(Typography, { variant: \"subtitle2\", gutterBottom: true, style: { marginTop: '16px' }, children: \"Clustering Results:\" }), _jsx(TextField, { multiline: true, fullWidth: true, variant: \"outlined\", placeholder: \"Paste results from Rscript here (sequence of numbers, one per line, specifying the new ordering)\", rows: 10, value: paste, onChange: event => {\n                                            setPaste(event.target.value);\n                                        }, slotProps: {\n                                            input: {\n                                                classes: {\n                                                    input: classes.textAreaFont,\n                                                },\n                                            },\n                                        } })] })] })] }), _jsxs(DialogActions, { children: [_jsx(Button, { variant: \"contained\", onClick: () => {\n                            const { sourcesWithoutLayout } = model;\n                            if (sourcesWithoutLayout) {\n                                try {\n                                    model.setLayout(paste\n                                        .split('\\n')\n                                        .map(t => t.trim())\n                                        .filter(f => !!f)\n                                        .map(r => +r)\n                                        .map(idx => {\n                                        const ret = sourcesWithoutLayout[idx - 1];\n                                        if (!ret) {\n                                            throw new Error(`out of bounds at ${idx}`);\n                                        }\n                                        return ret;\n                                    }));\n                                }\n                                catch (e) {\n                                    console.error(e);\n                                    getSession(model).notifyError(`${e}`, e);\n                                }\n                            }\n                            handleClose();\n                        }, children: \"Apply clustering\" }), _jsx(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                            handleClose();\n                        }, children: \"Cancel\" })] })] }));\n});\nexport default ClusterDialogManuals;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { FormControlLabel, Radio, RadioGroup, Typography } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport ClusterDialogAuto from './ClusterDialogAuto';\nimport ClusterDialogManual from './ClusterDialogManual';\nfunction Header({ activeMode, setActiveMode, }) {\n    return (_jsxs(\"div\", { children: [_jsx(Typography, { style: { marginBottom: 30 }, children: \"This procedure will cluster the visible genotype data using hierarchical clustering\" }), _jsx(RadioGroup, { children: Object.entries({\n                    auto: (_jsx(\"div\", { children: \"Run in-app clustering (slow for large data, built in JS clustering)\" })),\n                    manual: (_jsx(\"div\", { children: \"Download R script to run clustering (faster for large data, uses hclust, may be more accurate)\" })),\n                }).map(([key, val]) => (_jsx(FormControlLabel, { control: _jsx(Radio, { checked: activeMode === key, onChange: () => {\n                            setActiveMode(key);\n                        } }), label: val }, key))) })] }));\n}\nconst ClusterDialog = observer(function ({ model, handleClose, }) {\n    const [activeMode, setActiveMode] = useState('auto');\n    return (_jsx(Dialog, { open: true, title: \"Cluster by genotype\", onClose: (_, reason) => {\n            if (reason !== 'backdropClick') {\n                handleClose();\n            }\n        }, children: activeMode === 'auto' ? (_jsx(ClusterDialogAuto, { model: model, handleClose: handleClose, children: _jsx(Header, { activeMode: activeMode, setActiveMode: setActiveMode }) })) : (_jsx(ClusterDialogManual, { model: model, handleClose: handleClose, children: _jsx(Header, { activeMode: activeMode, setActiveMode: setActiveMode }) })) }));\n});\nexport default ClusterDialog;\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2]}
{"version":3,"file":"static/chunks/2166.7887c122bc77dd72.js","mappings":"qRAUA,MAAkB,uBAAU,QAC5B,cACA,wBACA,CAAK,CACL,MACA,eACA,uBACA,gBACA,CAAK,CACL,CAAC,EACc,kBAAyB,gBAAqB,EAC7D,YAAY,GAAU,IACtB,MAAkC,cAAQ,GAC1C,MAA8B,cAAQ,GACtC,MAA8B,cAAQ,KAsCtC,MArCI,eAAS,MAEb,WACA,IACA,UACA,MAA6B,uBAAiB,IAC9C,kBACA,OAEA,eAAwB,GAAa,CAAE,eAAU,IACjD,SAAwB,gDAAqD,EAC7E,EAAkC,qBAAe,IACjD,kDACA,sCACA,UACA,6BACA,YACA,eACA,CAAiB,EACjB,mBACA,iBACA;AACA,wBAAwB;AACxB,SAAS,SAAe;AACxB,2BAA2B,aAAoB,EAAI,cAAc;AACjE;AACA,qCACA,IACA,CACA,SACA,CAAqB,sBAAgB,KAAO,aAAO,MACnD,iBACA,KAEA,CACA,EAAS,EACT,CAAK,MACO,UAAK,CAAC,QAAM,EAAI,wDAA2E,SAAI,CAAC,GAAa,EAAI,SAAU,UAAK,QAAU,2BAAoC,SAAI,CAAC,GAAU,EAAI,qIAAuI,EAAG,SAAI,CAAC,GAAU,EAAI,oFAAsF,IAAc,SAAI,QAAU,SAAU,UAAK,QAAU,wBAA2B,SAAI,CAAC,GAAM,EAAI,iCACnf,YAAM,mBAClD,iBAAkE,cAClE,CAA6C,cAC7C,CAAyC,6BAAgC,eAAmB,SAAI,CAAC,GAAM,EAAI,iCAC/D,IAAI,MAChD,CAAyC,sCAAyC,EAAG,SAAI,QAAU,SAAU,SAAI,CAAC,GAAS,EAAI,iMAC/H,iBACA,CAA6C,YAC7C,OACA,SACA,qBACqD,CACJ,CACjD,CAA+C,EAAG,GAAI,EAAG,EAAM,SAAI,CAAC,iBAAe,EAAI,gDAAoD,IAAY,SAAI,CAAC,cAAY,EAAI,QAAc,QAAW,EAAG,EAAG,UAAK,CAAC,GAAa,EAAI,UAAW,SAAI,CAAC,GAAM,EAAI,6CAC5P,YAAoC,GAAU,EAC9C,KACA,IACA,cACA,YACA,iBACA,eACA,WACA,QACA,aACA,MACA,gCAAgF,EAAI,GAEpF,QACA,CAAqC,EACrC,CACA,SACA,iBACA,IACA,CAEA,GACA,CAAyB,6BAAgC,EAAG,SAAI,CAAC,GAAM,EAAI,mDAC3E,GACA,CAAyB,mBAAsB,GAAI,GAAI,CACvD","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-variants/esm/shared/ClusterDialog.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { Dialog, ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui';\nimport { getContainingView, getSession, isAbortException, } from '@jbrowse/core/util';\nimport { getRpcSessionId } from '@jbrowse/core/util/tracks';\nimport { Button, DialogActions, DialogContent, TextField, Typography, } from '@mui/material';\nimport copy from 'copy-to-clipboard';\nimport { saveAs } from 'file-saver';\nimport { isAlive } from 'mobx-state-tree';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    textAreaFont: {\n        fontFamily: 'Courier New',\n    },\n    mgap: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: theme.spacing(4),\n    },\n}));\nexport default function ClusterDialog({ model, handleClose, }) {\n    const { classes } = useStyles();\n    const [results, setResults] = useState();\n    const [error, setError] = useState();\n    const [paste, setPaste] = useState('');\n    useEffect(() => {\n        ;\n        (async () => {\n            try {\n                setError(undefined);\n                const view = getContainingView(model);\n                if (!view.initialized) {\n                    return;\n                }\n                const { rpcManager } = getSession(model);\n                const { sources, minorAlleleFrequencyFilter, adapterConfig } = model;\n                const sessionId = getRpcSessionId(model);\n                const ret = (await rpcManager.call(sessionId, 'MultiVariantGetGenotypeMatrix', {\n                    regions: view.dynamicBlocks.contentBlocks,\n                    sources,\n                    minorAlleleFrequencyFilter,\n                    sessionId,\n                    adapterConfig,\n                }));\n                const entries = Object.values(ret);\n                const keys = Object.keys(ret);\n                const text = `try(library(fastcluster), silent=TRUE)\ninputMatrix<-matrix(c(${entries.map(val => val.genotypes.join(',')).join(',\\n')}\n),nrow=${entries.length},byrow=TRUE)\nrownames(inputMatrix)<-c(${keys.map(key => `'${key}'`).join(',')})\nresultClusters<-hclust(dist(inputMatrix), method='single')\ncat(resultClusters$order,sep='\\\\n')`;\n                setResults(text);\n            }\n            catch (e) {\n                if (!isAbortException(e) && isAlive(model)) {\n                    console.error(e);\n                    setError(e);\n                }\n            }\n        })();\n    }, [model]);\n    return (_jsxs(Dialog, { open: true, title: \"Cluster by genotype\", onClose: handleClose, children: [_jsx(DialogContent, { children: _jsxs(\"div\", { className: classes.mgap, children: [_jsx(Typography, { children: \"This page will produce an R script that will perform hierarchical clustering on the visible genotype data using `hclust`.\" }), _jsx(Typography, { children: \"You can then paste the results in this form to specify the row ordering.\" }), results ? (_jsx(\"div\", { children: _jsxs(\"div\", { children: [\"Step 1:\", ' ', _jsx(Button, { variant: \"contained\", onClick: () => {\n                                            saveAs(new Blob([results || ''], {\n                                                type: 'text/plain;charset=utf-8',\n                                            }), 'cluster.R');\n                                        }, children: \"Download Rscript\" }), ' ', \"or\", ' ', _jsx(Button, { variant: \"contained\", onClick: () => {\n                                            copy(results || '');\n                                        }, children: \"Copy Rscript to clipboard\" }), _jsx(\"div\", { children: _jsx(TextField, { multiline: true, fullWidth: true, variant: \"outlined\", placeholder: \"Step 2. Paste results from Rscript here (sequence of numbers, one per line, specifying the new ordering)\", rows: 10, value: paste, onChange: event => {\n                                                setPaste(event.target.value);\n                                            }, slotProps: {\n                                                input: {\n                                                    classes: {\n                                                        input: classes.textAreaFont,\n                                                    },\n                                                },\n                                            } }) })] }) })) : (_jsx(LoadingEllipses, { variant: \"h6\", title: \"Generating genotype matrix\" })), error ? _jsx(ErrorMessage, { error: error }) : null] }) }), _jsxs(DialogActions, { children: [_jsx(Button, { disabled: !results, variant: \"contained\", onClick: () => {\n                            const { sources } = model;\n                            if (sources) {\n                                try {\n                                    model.setLayout(paste\n                                        .split('\\n')\n                                        .map(t => t.trim())\n                                        .filter(f => !!f)\n                                        .map(r => +r)\n                                        .map(idx => {\n                                        const ret = sources[idx - 1];\n                                        if (!ret) {\n                                            throw new Error(`out of bounds at ${idx}`);\n                                        }\n                                        return ret;\n                                    }));\n                                }\n                                catch (e) {\n                                    console.error(e);\n                                    setError(e);\n                                }\n                            }\n                            handleClose();\n                        }, children: \"Apply clustering\" }), _jsx(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                            handleClose();\n                        }, children: \"Cancel\" })] })] }));\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
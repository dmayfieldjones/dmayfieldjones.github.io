{"version":3,"file":"static/chunks/2849.9ef3da7e05688b0d.js","mappings":"kOAOA,MAAkB,uBAAU,IAC5B,eACA,YACA,CAAK,CACL,cACA,wBACA,CAAK,CACL,OACA,YACA,gBACA,CAAK,CACJ,EAwCD,EApCyB,cAAQ,cAoClB,GApC+B,aAoCf,CApCe,CAoCd,CApCmC,EACnE,YAAY,GAAU,IACtB,eAAY,GAAgB,EAC5B,MAA4B,cAAQ,eACpC,MAA8B,cAAQ,GAiBtC,MAhBI,eAAS,MACb,IACA,EACA,YACA,iBACA,eACA,YAdA,IAeA,SAdI,4BAAsB,GAe1B,CAAa,EACb,SACA,CACA,SACA,iBACA,IACA,CACA,CAAK,MACO,UAAK,CAAC,QAAM,EAAI,oEAAyF,UAAK,CAAC,GAAa,EAAI,UAAW,UAAK,QAAU,qGAAwG,UAAK,OAAS,UAAW,UAAK,OAAS,UAAW,SAAI,SAAW,6CAA+C,4DAA8D,EAAG,UAAK,OAAS,UAAW,SAAI,SAAW,4CAA8C,gFAAkF,EAAG,UAAK,OAAS,UAAW,SAAI,SAAW,2CAA6C,8DAAgE,GAAI,GAAI,IAAW,SAAI,MAAQ,8BAAuC,EAAM,EAAG,OAAU,SAAI,CAAC,GAAS,EAAI,iHAC12B,iBACA,CAAyB,YACzB,OACA,SACA,qBACiC,CAEjC,EAA2B,GAAI,EAAG,UAAK,CAAC,GAAa,EAAI,UAAW,SAAI,CAAC,GAAM,EAAI,yFACnF,gCACA,GACA,CAAyB,mBAAsB,EAAG,SAAI,CAAC,GAAM,EAAI,mDACjE,GACA,CAAyB,mBAAsB,GAAI,GAAI,CACvD,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearBasicDisplay/components/AddFiltersDialog.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { stringToJexlExpression } from '@jbrowse/core/util/jexlStrings';\nimport { Button, DialogActions, DialogContent, TextField } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()({\n    dialogContent: {\n        width: '80em',\n    },\n    textAreaFont: {\n        fontFamily: 'Courier New',\n    },\n    error: {\n        color: 'red',\n        fontSize: '0.8em',\n    },\n});\nfunction checkJexl(code) {\n    stringToJexlExpression(code);\n}\nconst AddFiltersDialog = observer(function ({ model, handleClose, }) {\n    const { classes } = useStyles();\n    const { activeFilters } = model;\n    const [data, setData] = useState(activeFilters.join('\\n'));\n    const [error, setError] = useState();\n    useEffect(() => {\n        try {\n            data\n                .split('\\n')\n                .map(line => line.trim())\n                .filter(line => !!line)\n                .map(line => {\n                checkJexl(line.trim());\n            });\n            setError(undefined);\n        }\n        catch (e) {\n            console.error(e);\n            setError(e);\n        }\n    }, [data]);\n    return (_jsxs(Dialog, { maxWidth: \"xl\", open: true, onClose: handleClose, title: \"Add track filters\", children: [_jsxs(DialogContent, { children: [_jsxs(\"div\", { children: [\"Add filters, in jexl format, one per line, starting with the string jexl:. Examples:\", ' ', _jsxs(\"ul\", { children: [_jsxs(\"li\", { children: [_jsx(\"code\", { children: \"jexl:get(feature,'name')=='BRCA1'\" }), \" - show only feature where the name attribute is BRCA1\"] }), _jsxs(\"li\", { children: [_jsx(\"code\", { children: \"jexl:get(feature,'type')=='gene'\" }), \" - show only gene type features in a GFF that has many other feature types\"] }), _jsxs(\"li\", { children: [_jsx(\"code\", { children: \"jexl:get(feature,'score') > 400\" }), \" - show only features that have a score greater than 400\"] })] })] }), error ? _jsx(\"p\", { className: classes.error, children: `${error}` }) : null, _jsx(TextField, { variant: \"outlined\", multiline: true, minRows: 5, maxRows: 10, className: classes.dialogContent, fullWidth: true, value: data, onChange: event => {\n                            setData(event.target.value);\n                        }, slotProps: {\n                            input: {\n                                classes: {\n                                    input: classes.textAreaFont,\n                                },\n                            },\n                        } })] }), _jsxs(DialogActions, { children: [_jsx(Button, { variant: \"contained\", color: \"primary\", type: \"submit\", autoFocus: true, disabled: !!error, onClick: () => {\n                            model.setJexlFilters(data.split('\\n'));\n                            handleClose();\n                        }, children: \"Submit\" }), _jsx(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                            handleClose();\n                        }, children: \"Cancel\" })] })] }));\n});\nexport default AddFiltersDialog;\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
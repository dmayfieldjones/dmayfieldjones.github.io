{"version":3,"file":"static/chunks/5089.df0eb100ac93042c.js","mappings":"4QAOA,MAAkB,uBAAU,IAC5B,eACA,YACA,CAAK,CACJ,EA+DD,EA9D6B,cAAQ,cA8DtB,GA9DmC,gBAAqB,CA8DpC,EAAC,GAxDpC,EALA,IAAY,WAAU,IACtB,MAA8B,cAAQ,KACtC,MAA8C,cAAQ,KACtD,MAA8C,cAAQ,KACtD,MAAkD,cAAQ,KAE1D,IACA,aACA,CACA,SACA,GACA,CACA,OAAY,eAAmB,CAAC,QAAM,EAAI,wDAA4E,CAC9G,eAAmB,CAAC,GAAa,EAAI,0BAAkC,CACnE,eAAmB,CAAC,GAAU,yKAC9B,eAAmB,CAAC,GAAS,EAAI,qBAC7C,iBACA,CAAiB,sCAAyC,EAC9C,eAAmB,CAAC,GAAS,MACzB,eAAmB,CAAC,GAAgB,EAAI,QAAS,eAAmB,CAAC,GAAQ,EAAI,uBACjG,mBACA,EAA2B,gCAAmC,EAC9C,eAAmB,CAAC,GAAgB,EAAI,QAAS,eAAmB,CAAC,GAAQ,EAAI,uBACjG,mBACA,EAA2B,gCAAmC,EAC9C,eAAmB,CAAC,GAAgB,EAAI,QAAS,eAAmB,CAAC,GAAQ,EAAI,uBACjG,mBACA,EAA2B,2BAA8B,GACzD,EAAoB,eAAmB,CAAC,GAAU,EAAI,cAAgB,IAAK,EAAM,SACzE,eAAmB,CAAC,GAAa,MAC7B,eAAmB,CAAC,GAAM,EAAI,aAC1C,MACA,MACA,yBAA2D,YAAY,EACvE,EAAwC,gBAAU,IAClD,iBAAgC,GAAkB,EAClD,qBAC4B,4BAAsB,MAClD,gBACA,UACA,wBAAyD,EAAM,EAC/D,kBACA,oBACA,SACA,6BACA,SACA,gBACA,gBACA,kBACA,gBAAqD,iBAAW,yEAChE,CAAiC,CACJ,EAC7B,eAEA,CACA,GACA,CAAiB,qCAA0C,WAC/C,eAAmB,CAAC,GAAM,EAAI,aAC1C,GACA,CAAiB,uCAA4C,WAC7D,CAAC","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearGenomeView/components/SequenceSearchDialog.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Dialog } from '@jbrowse/core/ui';\nimport { getSession, isSessionWithAddTracks } from '@jbrowse/core/util';\nimport { Button, Checkbox, DialogActions, DialogContent, FormControlLabel, FormGroup, TextField, Typography, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { getSnapshot } from 'mobx-state-tree';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()({\n    dialogContent: {\n        width: '40em',\n    },\n});\nconst SequenceSearchDialog = observer(function ({ model, handleClose, }) {\n    const { classes } = useStyles();\n    const [value, setValue] = useState('');\n    const [searchForward, setSearchForward] = useState(true);\n    const [searchReverse, setSearchReverse] = useState(true);\n    const [caseInsensitive, setCaseInsensitive] = useState(true);\n    let error;\n    try {\n        new RegExp(value);\n    }\n    catch (e) {\n        error = e;\n    }\n    return (React.createElement(Dialog, { maxWidth: \"xl\", open: true, onClose: handleClose, title: \"Sequence search\" },\n        React.createElement(DialogContent, { className: classes.dialogContent },\n            React.createElement(Typography, null, \"Supply a sequence to search for. A track will be created with the resulting matches once submitted. You can also supply regex style expressions e.g. AACT(C|T).\"),\n            React.createElement(TextField, { value: value, onChange: e => {\n                    setValue(e.target.value);\n                }, helperText: \"Sequence search pattern\" }),\n            React.createElement(FormGroup, null,\n                React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: searchForward, onChange: event => {\n                            setSearchForward(event.target.checked);\n                        } }), label: \"Search forward strand\" }),\n                React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: searchReverse, onChange: event => {\n                            setSearchReverse(event.target.checked);\n                        } }), label: \"Search reverse strand\" }),\n                React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { checked: caseInsensitive, onChange: event => {\n                            setCaseInsensitive(event.target.checked);\n                        } }), label: \"Case insensitive\" })),\n            error ? React.createElement(Typography, { color: \"error\" }, `${error}`) : null),\n        React.createElement(DialogActions, null,\n            React.createElement(Button, { onClick: () => {\n                    var _a;\n                    if (value) {\n                        const trackId = `sequence_search_${+Date.now()}`;\n                        const session = getSession(model);\n                        const { assemblyManager } = session;\n                        const assemblyName = model.assemblyNames[0];\n                        if (isSessionWithAddTracks(session)) {\n                            session.addTrackConf({\n                                trackId,\n                                name: `Sequence search ${value}`,\n                                assemblyNames: [assemblyName],\n                                type: 'FeatureTrack',\n                                adapter: {\n                                    type: 'SequenceSearchAdapter',\n                                    search: value,\n                                    searchForward,\n                                    searchReverse,\n                                    caseInsensitive,\n                                    sequenceAdapter: getSnapshot((_a = assemblyManager.get(assemblyName)) === null || _a === void 0 ? void 0 : _a.configuration.sequence.adapter),\n                                },\n                            });\n                            model.showTrack(trackId);\n                        }\n                    }\n                    handleClose();\n                }, variant: \"contained\", color: \"primary\" }, \"Submit\"),\n            React.createElement(Button, { onClick: () => {\n                    handleClose();\n                }, variant: \"contained\", color: \"secondary\" }, \"Close\"))));\n});\nexport default SequenceSearchDialog;\n"],"names":[],"sourceRoot":"","ignoreList":[0]}
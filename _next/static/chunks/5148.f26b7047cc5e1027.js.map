{"version":3,"file":"static/chunks/5148.f26b7047cc5e1027.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@jbrowse/product-core/esm/ui/FileInfoPanel.js","webpack://_N_E/./node_modules/@jbrowse/product-core/esm/ui/RefNameInfoDialog.js","webpack://_N_E/./node_modules/@jbrowse/product-core/esm/ui/AboutDialogContents.js","webpack://_N_E/./node_modules/@jbrowse/product-core/esm/ui/AboutDialog.js","webpack://_N_E/./node_modules/@jbrowse/react-linear-genome-view/esm/createModel/AboutDialog.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Attributes from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/Attributes';\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard';\nimport { readConfObject } from '@jbrowse/core/configuration';\nimport { ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui';\nimport { getSession } from '@jbrowse/core/util';\nexport default function FileInfoPanel({ config, }) {\n    const [error, setError] = useState();\n    const [info, setInfo] = useState();\n    const session = getSession(config);\n    const { rpcManager } = session;\n    useEffect(() => {\n        ;\n        (async () => {\n            try {\n                const adapterConfig = readConfObject(config, 'adapter');\n                const result = await rpcManager.call(config.trackId, 'CoreGetInfo', {\n                    adapterConfig,\n                });\n                setInfo(result);\n            }\n            catch (e) {\n                console.error(e);\n                setError(e);\n            }\n        })();\n    }, [config, rpcManager]);\n    const details = typeof info === 'string'\n        ? {\n            header: `<pre>${info\n                .replaceAll('<', '&lt;')\n                .replaceAll('>', '&gt;')}</pre>`,\n        }\n        : info || {};\n    return (React.createElement(BaseCard, { title: \"File info\" }, error ? (React.createElement(ErrorMessage, { error: error })) : info === undefined ? (React.createElement(LoadingEllipses, { message: \"Loading file data\" })) : (React.createElement(Attributes, { attributes: details }))));\n}\n","import React, { useEffect, useState } from 'react';\nimport { readConfObject } from '@jbrowse/core/configuration';\nimport { Dialog, ErrorMessage, LoadingEllipses } from '@jbrowse/core/ui';\nimport { getSession } from '@jbrowse/core/util';\nimport { getConfAssemblyNames } from '@jbrowse/core/util/tracks';\nimport { Button, DialogContent } from '@mui/material';\nimport copy from 'copy-to-clipboard';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nconst MAX_REF_NAMES = 10000;\nconst useStyles = makeStyles()(theme => ({\n    container: {\n        minWidth: 800,\n    },\n    refNames: {\n        maxHeight: 300,\n        overflow: 'auto',\n        flexGrow: 1,\n        background: theme.palette.background.default,\n    },\n}));\nconst RefNameInfoDialog = observer(function ({ config, onClose, }) {\n    const { classes } = useStyles();\n    const [error, setError] = useState();\n    const [refNames, setRefNames] = useState();\n    const [copied, setCopied] = useState(false);\n    const { rpcManager } = getSession(config);\n    useEffect(() => {\n        ;\n        (async () => {\n            try {\n                const map = await Promise.all([...new Set(getConfAssemblyNames(config))].map(async (assemblyName) => {\n                    const adapterConfig = readConfObject(config, 'adapter');\n                    return [\n                        assemblyName,\n                        (await rpcManager.call(config.trackId, 'CoreGetRefNames', {\n                            adapterConfig,\n                            regions: [\n                                {\n                                    assemblyName,\n                                },\n                            ],\n                        })),\n                    ];\n                }));\n                setRefNames(Object.fromEntries(map));\n            }\n            catch (e) {\n                console.error(e);\n                setError(e);\n            }\n        })();\n    }, [config, rpcManager]);\n    const names = refNames ? Object.entries(refNames) : [];\n    const result = names\n        .flatMap(([assemblyName, refNames]) => {\n        return [\n            `--- ${assemblyName} ---`,\n            ...refNames.slice(0, MAX_REF_NAMES),\n            refNames.length > MAX_REF_NAMES\n                ? `\\nToo many refNames to show in browser for ${assemblyName}, use \"Copy ref names\" button to copy to clipboard`\n                : '',\n        ];\n    })\n        .filter(f => !!f)\n        .join('\\n');\n    return (React.createElement(Dialog, { open: true, title: \"Reference sequence names used in track\", onClose: onClose, maxWidth: \"xl\" },\n        React.createElement(DialogContent, { className: classes.container }, error ? (React.createElement(ErrorMessage, { error: error })) : refNames === undefined ? (React.createElement(LoadingEllipses, { message: \"Loading refNames\" })) : (React.createElement(React.Fragment, null,\n            React.createElement(Button, { variant: \"contained\", onClick: () => {\n                    copy(names\n                        .flatMap(([assemblyName, refNames]) => [\n                        `--- ${assemblyName} ---`,\n                        ...refNames,\n                    ])\n                        .filter(f => !!f)\n                        .join('\\n'));\n                    setCopied(true);\n                    setTimeout(() => {\n                        setCopied(false);\n                    }, 1000);\n                } }, copied ? 'Copied to clipboard!' : 'Copy ref names'),\n            React.createElement(\"pre\", { className: classes.refNames }, result))))));\n});\nexport default RefNameInfoDialog;\n","import React, { useState } from 'react';\nimport Attributes from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/Attributes';\nimport BaseCard from '@jbrowse/core/BaseFeatureWidget/BaseFeatureDetail/BaseCard';\nimport { getConf, readConfObject } from '@jbrowse/core/configuration';\nimport { getEnv, getSession } from '@jbrowse/core/util';\nimport { Button } from '@mui/material';\nimport copy from 'copy-to-clipboard';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nimport FileInfoPanel from './FileInfoPanel';\nimport RefNameInfoDialog from './RefNameInfoDialog';\nconst useStyles = makeStyles()({\n    content: {\n        minWidth: 800,\n    },\n    button: {\n        float: 'right',\n    },\n});\nfunction removeAttr(obj, attr) {\n    for (const prop in obj) {\n        if (prop === attr) {\n            delete obj[prop];\n        }\n        else if (typeof obj[prop] === 'object') {\n            removeAttr(obj[prop], attr);\n        }\n    }\n    return obj;\n}\nconst AboutDialogContents = observer(function ({ config, }) {\n    const [copied, setCopied] = useState(false);\n    const conf = readConfObject(config);\n    const session = getSession(config);\n    const { classes } = useStyles();\n    const [showRefNames, setShowRefNames] = useState(false);\n    const hideUris = getConf(session, ['formatAbout', 'hideUris']) ||\n        readConfObject(config, ['formatAbout', 'hideUris']);\n    const { pluginManager } = getEnv(session);\n    const confPostExt = pluginManager.evaluateExtensionPoint('Core-customizeAbout', {\n        config: {\n            ...conf,\n            ...getConf(session, ['formatAbout', 'config'], { config: conf }),\n            ...readConfObject(config, ['formatAbout', 'config'], { config: conf }),\n        },\n    }, { session, config });\n    const ExtraPanel = pluginManager.evaluateExtensionPoint('Core-extraAboutPanel', null, { session, config });\n    return (React.createElement(\"div\", { className: classes.content },\n        React.createElement(BaseCard, { title: \"Configuration\" },\n            !hideUris ? (React.createElement(\"span\", { className: classes.button },\n                React.createElement(Button, { variant: \"contained\", color: \"secondary\", onClick: () => {\n                        setShowRefNames(true);\n                    } }, \"Show ref names\"),\n                React.createElement(Button, { variant: \"contained\", onClick: () => {\n                        const snap = removeAttr(structuredClone(conf), 'baseUri');\n                        copy(JSON.stringify(snap, null, 2));\n                        setCopied(true);\n                        setTimeout(() => {\n                            setCopied(false);\n                        }, 1000);\n                    } }, copied ? 'Copied to clipboard!' : 'Copy config'))) : null,\n            React.createElement(Attributes, { attributes: confPostExt, omit: ['displays', 'baseUri', 'refNames', 'formatAbout'], hideUris: hideUris })),\n        ExtraPanel ? (React.createElement(BaseCard, { title: ExtraPanel.name },\n            React.createElement(ExtraPanel.Component, { config: config }))) : null,\n        React.createElement(FileInfoPanel, { config: config }),\n        showRefNames ? (React.createElement(RefNameInfoDialog, { config: config, onClose: () => {\n                setShowRefNames(false);\n            } })) : null));\n});\nexport default AboutDialogContents;\n","import React from 'react';\nimport Dialog from '@jbrowse/core/ui/Dialog';\nimport { getEnv, getSession } from '@jbrowse/core/util';\nimport { getTrackName } from '@jbrowse/core/util/tracks';\nimport AboutContents from './AboutDialogContents';\nexport function AboutDialog({ config, handleClose, }) {\n    const session = getSession(config);\n    const trackName = getTrackName(config, session);\n    const { pluginManager } = getEnv(session);\n    const AboutComponent = pluginManager.evaluateExtensionPoint('Core-replaceAbout', AboutContents, { session, config });\n    return (React.createElement(Dialog, { open: true, onClose: handleClose, title: trackName, maxWidth: \"xl\" },\n        React.createElement(AboutComponent, { config: config })));\n}\n","export { AboutDialog as default } from '@jbrowse/product-core';\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2,3,4]}
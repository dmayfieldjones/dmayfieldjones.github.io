{"version":3,"file":"static/chunks/7969.4af329255fa1f097.js","mappings":"8SAIe,0BAA8B,uCAAmE,EAChH,MAAoB,gBAAU,IAC9B,eAAY,GAAkB,YAAM,IACpC,iBAAY,GAAkB,EAC9B,wCACA,WACA,MACA,wBAAoC,GAAc,YAElD,cACA,wBAAoC,GAAc,qBAWlD,oBACA,MACA,IACA,sFACA,GACA,2BACA,oBAGA,2BAEA,CACA,SACA,gBACA,YAA8B,EAAE,YAChC,CACA,CACA,MAAY,SAAI,CAAC,GAAc,EAAI,UAAW,GAAK,UAAY,UAAK,CAAC,GAAK,EAAI,UAAW,SAAI,CAAC,GAAS,EAAI,SAAU,UAAK,CAAC,GAAQ,EAAI,UAAW,SAAI,CAAC,GAAS,EAAI,gBAAkB,EAAG,SAAI,CAAC,GAAS,EAAI,kCAAsC,EAAG,SAAI,CAAC,GAAS,EAAI,+BAAmC,EAAG,SAAI,CAAC,GAAS,EAAI,cAAgB,GAAI,EAAG,EAAG,SAAI,CAAC,GAAS,EAAI,kBAAuC,UAAK,CAAC,GAAQ,EAAI,UAAW,SAAI,CAAC,GAAS,EAAI,iDAA4D,EAAG,SAAI,CAAC,GAAS,EAAI,uCAAgD,EAAG,SAAI,CAAC,GAAS,EAAI,gCA1BtlB,GACA,MACA,MACA,2CACA,EAAkC,uBAAiB,GAAS,aAAO,OACnE,uEACA,CACA,QACA,EAkBslB,uBAAsE,EAAG,SAAI,CAAC,GAAS,EAAI,uBAA0B,SAAI,CAAC,GAAM,EAAI,kBAC1tB,IACA,uCACA,qBACA,GACA,cAEA,CACA,SACA,iBACA,iBAAmE,EAAE,IACrE,CACA,GACA,CAAqC,mDAA0D,EAAG,GAAI,aAAqB,GAAI,EAAG,CAClI,CCpDe,YAA+B,mEAA+D,EAC7G,MAAY,UAAK,CAAC,QAAM,EAAI,iEAAsF,SAAI,CAAC,GAAa,EAAI,mCAAwM,UAAK,CAAC,UAAS,EAAI,UAAW,UAAK,CAAC,GAAU,EAAI,iCAAmC,SAAI,MAAQ,WAAuB,GAAI,EAAG,SAAI,CAAC,EAAkB,CAAI,eAAJ,KAAI,iCAAkG,GAAI,EAArW,UAAK,CAAC,GAAU,EAAI,kCAAoC,SAAI,MAAQ,WAAuB,GAAI,CAAsQ,CAAI,EAAG,SAAI,CAAC,GAAO,GAAI,EAAG,SAAI,CAAC,GAAa,EAAI,SAAU,SAAI,CAAC,GAAM,EAAI,aACzpB,GACA,CAAqB,mCAAwC,EAAG,GAAI,CACpE","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearGenomeView/components/SearchResultsTable.js","webpack://_N_E/./node_modules/@jbrowse/plugin-linear-genome-view/esm/LinearGenomeView/components/SearchResultsDialog.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { getEnv, getSession } from '@jbrowse/core/util';\nimport { Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, } from '@mui/material';\nimport { getRoot, resolveIdentifier } from 'mobx-state-tree';\nexport default function SearchResultsTable({ searchResults, assemblyName: optAssemblyName, model, handleClose, }) {\n    const session = getSession(model);\n    const { pluginManager } = getEnv(session);\n    const { assemblyManager } = session;\n    const assemblyName = optAssemblyName || model.displayedRegions[0].assemblyName;\n    const assembly = assemblyManager.get(assemblyName);\n    if (!assembly) {\n        throw new Error(`assembly ${assemblyName} not found`);\n    }\n    if (!assembly.regions) {\n        throw new Error(`assembly ${assemblyName} regions not loaded`);\n    }\n    function getTrackName(trackId) {\n        var _a;\n        if (trackId) {\n            const schema = pluginManager.pluggableConfigSchemaType('track');\n            const configuration = resolveIdentifier(schema, getRoot(model), trackId);\n            return ((_a = configuration === null || configuration === void 0 ? void 0 : configuration.name) === null || _a === void 0 ? void 0 : _a.value) || '';\n        }\n        return '';\n    }\n    async function handleClick(location) {\n        var _a;\n        try {\n            const newRegion = (_a = assembly === null || assembly === void 0 ? void 0 : assembly.regions) === null || _a === void 0 ? void 0 : _a.find(region => location === region.refName);\n            if (newRegion) {\n                model.setDisplayedRegions([newRegion]);\n                model.showAllRegions();\n            }\n            else {\n                await model.navToLocString(location, assemblyName);\n            }\n        }\n        catch (e) {\n            console.warn(e);\n            session.notify(`${e}`, 'warning');\n        }\n    }\n    return (_jsx(TableContainer, { component: Paper, children: _jsxs(Table, { children: [_jsx(TableHead, { children: _jsxs(TableRow, { children: [_jsx(TableCell, { children: \"Name\" }), _jsx(TableCell, { align: \"right\", children: \"Location\" }), _jsx(TableCell, { align: \"right\", children: \"Track\" }), _jsx(TableCell, { align: \"right\" })] }) }), _jsx(TableBody, { children: searchResults.map(result => (_jsxs(TableRow, { children: [_jsx(TableCell, { component: \"th\", scope: \"row\", children: result.getLabel() }), _jsx(TableCell, { align: \"right\", children: result.getLocation() }), _jsx(TableCell, { align: \"right\", children: getTrackName(result.getTrackId()) || 'N/A' }), _jsx(TableCell, { align: \"right\", children: _jsx(Button, { onClick: async () => {\n                                        try {\n                                            await handleClick(result.getLocation() || result.getLabel());\n                                            const resultTrackId = result.getTrackId();\n                                            if (resultTrackId) {\n                                                model.showTrack(resultTrackId);\n                                            }\n                                        }\n                                        catch (e) {\n                                            console.error(e);\n                                            session.notifyError(`${e}`, e);\n                                        }\n                                        handleClose();\n                                    }, color: \"primary\", variant: \"contained\", children: \"Go\" }) })] }, result.getId()))) })] }) }));\n}\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { Dialog } from '@jbrowse/core/ui';\nimport { Button, DialogActions, DialogContent, Divider, Typography, } from '@mui/material';\nimport SearchResultsTable from './SearchResultsTable';\nexport default function SearchResultsDialog({ model, assemblyName, searchQuery, searchResults, handleClose, }) {\n    return (_jsxs(Dialog, { open: true, maxWidth: \"xl\", onClose: handleClose, title: \"Search results\", children: [_jsx(DialogContent, { children: !(searchResults === null || searchResults === void 0 ? void 0 : searchResults.length) ? (_jsxs(Typography, { children: [\"No results found for \", _jsx(\"b\", { children: searchQuery })] })) : (_jsxs(_Fragment, { children: [_jsxs(Typography, { children: [\"Showing results for \", _jsx(\"b\", { children: searchQuery })] }), _jsx(SearchResultsTable, { model: model, handleClose: handleClose, assemblyName: assemblyName, searchResults: searchResults })] })) }), _jsx(Divider, {}), _jsx(DialogActions, { children: _jsx(Button, { onClick: () => {\n                        handleClose();\n                    }, color: \"primary\", children: \"Cancel\" }) })] }));\n}\n"],"names":[],"sourceRoot":"","ignoreList":[0,1]}
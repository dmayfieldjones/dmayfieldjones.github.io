{"version":3,"file":"static/chunks/6159.751f5233c3bef97a.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/HierarchicalTrackSelectorWidget/components/faceted/FacetFilter.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/HierarchicalTrackSelectorWidget/components/faceted/FacetFilters.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/HierarchicalTrackSelectorWidget/components/faceted/FacetedDataGrid.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/HierarchicalTrackSelectorWidget/components/faceted/FacetedHeader.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/HierarchicalTrackSelectorWidget/components/faceted/FacetedSelector.js","webpack://_N_E/./node_modules/@jbrowse/plugin-data-management/esm/HierarchicalTrackSelectorWidget/components/faceted/FacetedDialog.js"],"sourcesContent":["import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { coarseStripHTML } from '@jbrowse/core/util';\nimport AddIcon from '@mui/icons-material/Add';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport MinimizeIcon from '@mui/icons-material/Minimize';\nimport { FormControl, IconButton, Select, Tooltip, Typography, } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nconst useStyles = makeStyles()(theme => ({\n    facet: {\n        margin: 0,\n        marginLeft: theme.spacing(2),\n    },\n    select: {\n        marginBottom: theme.spacing(2),\n    },\n}));\nfunction ClearButton({ onClick }) {\n    return (_jsx(Tooltip, { title: \"Clear selection on this facet filter\", children: _jsx(IconButton, { onClick: () => {\n                onClick();\n            }, size: \"small\", children: _jsx(ClearIcon, {}) }) }));\n}\nfunction ExpandButton({ visible, onClick, }) {\n    return (_jsx(Tooltip, { title: \"Minimize/expand this facet filter\", children: _jsx(IconButton, { onClick: () => {\n                onClick();\n            }, size: \"small\", children: visible ? _jsx(MinimizeIcon, {}) : _jsx(AddIcon, {}) }) }));\n}\nconst FacetFilter = observer(function ({ column, vals, model, }) {\n    const { classes } = useStyles();\n    const [visible, setVisible] = useState(true);\n    const { faceted } = model;\n    const { filters } = faceted;\n    const { field } = column;\n    return (_jsxs(FormControl, { className: classes.facet, fullWidth: true, children: [_jsxs(\"div\", { children: [_jsx(Typography, { component: \"span\", children: field }), _jsx(ClearButton, { onClick: () => {\n                            faceted.setFilter(field, []);\n                        } }), _jsx(ExpandButton, { visible: visible, onClick: () => {\n                            setVisible(!visible);\n                        } })] }), visible ? (_jsx(Select, { multiple: true, native: true, className: classes.select, value: filters.get(column.field) || [], onChange: event => {\n                    faceted.setFilter(column.field, [...event.target.options]\n                        .filter(opt => opt.selected)\n                        .map(opt => opt.value));\n                }, children: vals\n                    .sort((a, b) => a[0].localeCompare(b[0]))\n                    .map(([name, count]) => (_jsxs(\"option\", { value: name, children: [coarseStripHTML(name), \" (\", count, \")\"] }, name))) })) : null] }));\n});\nexport default FacetFilter;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { observer } from 'mobx-react';\nimport FacetFilter from './FacetFilter';\nimport { getRowStr } from './util';\nconst FacetFilters = observer(function ({ rows, columns, model, }) {\n    var _a, _b;\n    const { faceted } = model;\n    const { filters } = faceted;\n    const facets = columns.slice(1);\n    const facetFieldToCategoryCountMap = new Map(columns.slice(1).map(f => [f.field, new Map()]));\n    const filterKeys = faceted.filters.keys();\n    const facetKeys = facets.map(f => f.field);\n    const facetKeysPrioritizingUserSelections = new Set();\n    for (const entry of filterKeys) {\n        if ((_a = filters.get(entry)) === null || _a === void 0 ? void 0 : _a.length) {\n            facetKeysPrioritizingUserSelections.add(entry);\n        }\n    }\n    for (const entry of facetKeys) {\n        facetKeysPrioritizingUserSelections.add(entry);\n    }\n    let currentRows = rows;\n    for (const facetKey of facetKeysPrioritizingUserSelections) {\n        const categoryCountMap = facetFieldToCategoryCountMap.get(facetKey);\n        if (categoryCountMap) {\n            for (const row of currentRows) {\n                const key = getRowStr(facetKey, row);\n                const currentCount = categoryCountMap.get(key);\n                if (key) {\n                    if (currentCount === undefined) {\n                        categoryCountMap.set(key, 1);\n                    }\n                    else {\n                        categoryCountMap.set(key, currentCount + 1);\n                    }\n                }\n            }\n        }\n        const filter = ((_b = filters.get(facetKey)) === null || _b === void 0 ? void 0 : _b.length)\n            ? new Set(filters.get(facetKey))\n            : undefined;\n        currentRows = currentRows.filter(row => filter !== undefined ? filter.has(getRowStr(facetKey, row)) : true);\n    }\n    return (_jsx(\"div\", { children: facets.map(c => (_jsx(FacetFilter, { vals: [...facetFieldToCategoryCountMap.get(c.field)], column: c, model: model }, c.field))) }));\n});\nexport default FacetFilters;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { getEnv, measureGridWidth } from '@jbrowse/core/util';\nimport { DataGrid, GridToolbar } from '@mui/x-data-grid';\nimport { transaction } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { getRoot, resolveIdentifier } from 'mobx-state-tree';\nconst FacetedDataGrid = observer(function ({ model, columns, shownTrackIds, selection, }) {\n    const { pluginManager } = getEnv(model);\n    const { view, faceted } = model;\n    const { rows, useShoppingCart, showOptions, filteredRows, filteredNonMetadataKeys, filteredMetadataKeys, visible, } = faceted;\n    const [widths, setWidths] = useState({\n        name: measureGridWidth(rows.map(r => r.name), { maxWidth: 500, stripHTML: true }) + 15,\n        ...Object.fromEntries(filteredNonMetadataKeys\n            .filter(f => visible[f])\n            .map(e => [\n            e,\n            measureGridWidth(rows.map(r => r[e]), { maxWidth: 400, stripHTML: true }),\n        ])),\n        ...Object.fromEntries(filteredMetadataKeys\n            .filter(f => visible[`metadata.${f}`])\n            .map(e => {\n            return [\n                `metadata.${e}`,\n                measureGridWidth(rows.map(r => r.metadata[e]), { maxWidth: 400, stripHTML: true }),\n            ];\n        })),\n    });\n    return (_jsx(DataGrid, { rows: filteredRows, onColumnWidthChange: arg => {\n            setWidths({\n                ...widths,\n                [arg.colDef.field]: arg.width,\n            });\n        }, columnVisibilityModel: visible, onColumnVisibilityModelChange: n => {\n            model.faceted.setVisible(n);\n        }, columnHeaderHeight: 35, checkboxSelection: true, disableRowSelectionOnClick: true, keepNonExistentRowsSelected: true, onRowSelectionModelChange: userSelectedIds => {\n            if (!useShoppingCart) {\n                const a1 = shownTrackIds;\n                const a2 = new Set(userSelectedIds);\n                transaction(() => {\n                    ;\n                    [...a1].filter(x => !a2.has(x)).map(t => view.hideTrack(t));\n                    [...a2]\n                        .filter(x => !a1.has(x))\n                        .map(t => {\n                        view.showTrack(t);\n                        model.addToRecentlyUsed(t);\n                    });\n                });\n            }\n            else {\n                const root = getRoot(model);\n                const schema = pluginManager.pluggableConfigSchemaType('track');\n                model.setSelection(userSelectedIds.map(id => resolveIdentifier(schema, root, id)));\n            }\n        }, rowSelectionModel: useShoppingCart ? selection.map(s => s.trackId) : [...shownTrackIds], slots: {\n            toolbar: showOptions ? GridToolbar : null,\n        }, slotProps: {\n            toolbar: {\n                printOptions: {\n                    disableToolbarButton: true,\n                },\n            },\n        }, columns: columns.map(r => ({\n            ...r,\n            width: widths[r.field],\n        })), rowHeight: 25 }));\n});\nexport default FacetedDataGrid;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { Menu } from '@jbrowse/core/ui';\nimport ClearIcon from '@mui/icons-material/Clear';\nimport MoreVert from '@mui/icons-material/MoreVert';\nimport { Grid, IconButton, InputAdornment, TextField } from '@mui/material';\nimport ShoppingCart from '../ShoppingCart';\nexport default function FacetedHeader({ model, }) {\n    const { faceted } = model;\n    const [anchorEl, setAnchorEl] = useState(null);\n    const { showOptions, showFilters, showSparse, useShoppingCart } = faceted;\n    return (_jsxs(_Fragment, { children: [_jsxs(Grid, { container: true, spacing: 4, alignItems: \"center\", children: [_jsx(Grid, { item: true, children: _jsx(TextField, { label: \"Search...\", value: faceted.filterText, onChange: event => {\n                                faceted.setFilterText(event.target.value);\n                            }, slotProps: {\n                                input: {\n                                    endAdornment: (_jsx(InputAdornment, { position: \"end\", children: _jsx(IconButton, { onClick: () => {\n                                                faceted.setFilterText('');\n                                            }, children: _jsx(ClearIcon, {}) }) })),\n                                },\n                            } }) }), _jsx(Grid, { item: true, children: _jsx(IconButton, { onClick: event => {\n                                setAnchorEl(event.currentTarget);\n                            }, children: _jsx(MoreVert, {}) }) }), _jsx(Grid, { item: true, children: _jsx(ShoppingCart, { model: model }) })] }), _jsx(Menu, { anchorEl: anchorEl, open: !!anchorEl, onClose: () => {\n                    setAnchorEl(null);\n                }, onMenuItemClick: (_event, callback) => {\n                    callback();\n                    setAnchorEl(null);\n                }, menuItems: [\n                    {\n                        label: 'Add tracks to selection instead of turning them on/off',\n                        onClick: () => {\n                            faceted.setUseShoppingCart(!useShoppingCart);\n                        },\n                        type: 'checkbox',\n                        checked: useShoppingCart,\n                    },\n                    {\n                        label: 'Show sparse metadata columns',\n                        onClick: () => {\n                            faceted.setShowSparse(!showSparse);\n                        },\n                        checked: showSparse,\n                        type: 'checkbox',\n                    },\n                    {\n                        label: 'Show facet filters',\n                        onClick: () => {\n                            faceted.setShowFilters(!showFilters);\n                        },\n                        checked: showFilters,\n                        type: 'checkbox',\n                    },\n                    {\n                        label: 'Show extra table options',\n                        onClick: () => {\n                            faceted.setShowOptions(!showOptions);\n                        },\n                        checked: showOptions,\n                        type: 'checkbox',\n                    },\n                ] })] }));\n}\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { ResizeHandle } from '@jbrowse/core/ui';\nimport SanitizedHTML from '@jbrowse/core/ui/SanitizedHTML';\nimport { observer } from 'mobx-react';\nimport { makeStyles } from 'tss-react/mui';\nimport FacetFilters from './FacetFilters';\nimport FacetedDataGrid from './FacetedDataGrid';\nimport FacetedHeader from './FacetedHeader';\nimport TrackLabelMenu from '../tree/TrackLabelMenu';\nconst useStyles = makeStyles()({\n    cell: {\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        textOverflow: 'ellipsis',\n    },\n    resizeHandle: {\n        marginLeft: 5,\n        background: 'grey',\n        width: 5,\n    },\n});\nconst frac = 0.75;\nconst FacetedSelector = observer(function FacetedSelector({ model, }) {\n    const { classes } = useStyles();\n    const { selection, shownTrackIds, faceted } = model;\n    const { rows, panelWidth, showFilters, filteredNonMetadataKeys, filteredMetadataKeys, } = faceted;\n    const columns = [\n        {\n            field: 'name',\n            hideable: false,\n            renderCell: params => {\n                const { value, row } = params;\n                const { id, conf } = row;\n                return (_jsxs(\"div\", { className: classes.cell, children: [_jsx(SanitizedHTML, { html: value }), _jsx(TrackLabelMenu, { id: id, conf: conf, trackId: id, model: model })] }));\n            },\n        },\n        ...filteredNonMetadataKeys.map(e => {\n            return {\n                field: e,\n                renderCell: params => {\n                    const val = params.value;\n                    return val ? (_jsx(SanitizedHTML, { className: classes.cell, html: val })) : ('');\n                },\n            };\n        }),\n        ...filteredMetadataKeys.map(e => {\n            return {\n                field: `metadata.${e}`,\n                headerName: ['name', ...filteredNonMetadataKeys].includes(e)\n                    ? `${e} (from metadata)`\n                    : e,\n                valueGetter: (_, row) => { var _a; return `${(_a = row.metadata[e]) !== null && _a !== void 0 ? _a : ''}`; },\n                renderCell: params => {\n                    const val = params.value;\n                    return val ? (_jsx(SanitizedHTML, { className: classes.cell, html: val })) : ('');\n                },\n            };\n        }),\n    ];\n    return (_jsxs(_Fragment, { children: [_jsx(FacetedHeader, { model: model }), _jsxs(\"div\", { style: {\n                    display: 'flex',\n                    overflow: 'hidden',\n                    height: window.innerHeight * frac,\n                    width: window.innerWidth * frac,\n                }, children: [_jsx(\"div\", { style: {\n                            height: window.innerHeight * frac,\n                            width: window.innerWidth * frac - (showFilters ? panelWidth : 0),\n                        }, children: _jsx(FacetedDataGrid, { model: model, columns: columns, shownTrackIds: shownTrackIds, selection: selection }) }), showFilters ? (_jsxs(_Fragment, { children: [_jsx(ResizeHandle, { vertical: true, onDrag: dist => faceted.setPanelWidth(panelWidth - dist), className: classes.resizeHandle }), _jsx(\"div\", { style: { width: panelWidth, overflow: 'auto' }, children: _jsx(FacetFilters, { model: model, rows: rows, columns: columns }) })] })) : null] })] }));\n});\nexport default FacetedSelector;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Dialog } from '@jbrowse/core/ui';\nimport { DialogContent } from '@mui/material';\nimport { observer } from 'mobx-react';\nimport FacetedSelector from './FacetedSelector';\nconst FacetedTrackSelectorDialog = observer(function (props) {\n    const { handleClose } = props;\n    return (_jsx(Dialog, { open: true, onClose: handleClose, maxWidth: \"xl\", title: \"Faceted track selector\", children: _jsx(DialogContent, { children: _jsx(FacetedSelector, { ...props }) }) }));\n});\nexport default FacetedTrackSelectorDialog;\n"],"names":[],"sourceRoot":"","ignoreList":[0,1,2,3,4,5]}